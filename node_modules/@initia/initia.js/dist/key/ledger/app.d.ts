/** ******************************************************************************
 *  (c) 2019 ZondaX GmbH
 *  (c) 2016-2017 Ledger
 *
 *  Licensed under the Apache License, Version 2.0 (the 'License');
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an 'AS IS' BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 ******************************************************************************* */
/// <reference types="node" />
import Transport from '@ledgerhq/hw-transport';
import { CommonResponse, AppInfoResponse, VersionResponse, PublicKeyResponse, DeviceInfoResponse, SignResponse } from './types';
export default class InitiaApp {
    private transport;
    private info;
    private version;
    constructor(transport?: Transport);
    static serializeHRP(hrp: string): Buffer;
    static getBech32FromPK(hrp: string, pk: Buffer): string;
    private validateCompatibility;
    /**
     * @returns CommonResponse returns CommonResponse if app is not compatible
     */
    initialize(): Promise<CommonResponse | undefined>;
    getInfo(): AppInfoResponse;
    getVersion(): VersionResponse;
    getDeviceInfo(): Promise<DeviceInfoResponse>;
    getPublicKey(path: number[]): Promise<PublicKeyResponse>;
    getAddressAndPubKey(path: number[], hrp: string): Promise<PublicKeyResponse>;
    showAddressAndPubKey(path: number[], hrp: string): Promise<PublicKeyResponse>;
    sign(path: number[], message: Buffer): Promise<SignResponse>;
}
