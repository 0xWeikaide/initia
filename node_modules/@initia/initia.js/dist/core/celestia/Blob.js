"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Blob = void 0;
const json_1 = require("../../util/json");
const blob_1 = require("@initia/initia.proto/celestia/blob/v1/blob");
class Blob extends json_1.JSONSerializable {
    /**
     * @param namespace_id
     * @param data
     * @param share_version
     * @param namespace_version
     */
    constructor(namespace_id, data, share_version, namespace_version) {
        super();
        this.namespace_id = namespace_id;
        this.data = data;
        this.share_version = share_version;
        this.namespace_version = namespace_version;
    }
    static fromAmino(_) {
        _;
        throw new Error('Amino not supported');
    }
    toAmino() {
        throw new Error('Amino not supported');
    }
    static fromData(data) {
        return new Blob(data.namespace_id, data.data, Number.parseInt(data.share_version), Number.parseInt(data.namespace_version));
    }
    toData() {
        const { namespace_id, data, share_version, namespace_version } = this;
        return {
            namespace_id,
            data,
            share_version: share_version.toString(),
            namespace_version: namespace_version.toString(),
        };
    }
    static fromProto(data) {
        return new Blob(Buffer.from(data.namespaceId).toString('base64'), Buffer.from(data.data).toString('base64'), data.shareVersion, data.namespaceVersion);
    }
    toProto() {
        const { namespace_id, data, share_version, namespace_version } = this;
        return blob_1.Blob.fromPartial({
            namespaceId: Buffer.from(namespace_id, 'base64'),
            data: Buffer.from(data, 'base64'),
            shareVersion: share_version,
            namespaceVersion: namespace_version,
        });
    }
}
exports.Blob = Blob;
//# sourceMappingURL=Blob.js.map