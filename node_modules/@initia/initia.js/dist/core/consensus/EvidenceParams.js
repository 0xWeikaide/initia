"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EvidenceParams = void 0;
const json_1 = require("../../util/json");
const Duration_1 = require("../Duration");
const params_1 = require("@initia/initia.proto/tendermint/types/params");
const long_1 = __importDefault(require("long"));
class EvidenceParams extends json_1.JSONSerializable {
    /**
     * @param max_age_num_blocks Max age of evidence in blocks, MaxAgeDuration / average block time
     * @param max_age_duration Max age of evidence in time
     * @param max_bytes the maximum size of total evidence in bytes that can be committed in a single block
     */
    constructor(max_age_num_blocks, max_age_duration, max_bytes) {
        super();
        this.max_age_num_blocks = max_age_num_blocks;
        this.max_age_duration = max_age_duration;
        this.max_bytes = max_bytes;
    }
    static fromAmino(data) {
        const { max_age_num_blocks, max_age_duration, max_bytes } = data;
        return new EvidenceParams(Number.parseInt(max_age_num_blocks), Duration_1.Duration.fromAmino(max_age_duration), Number.parseInt(max_bytes));
    }
    toAmino() {
        const { max_age_num_blocks, max_age_duration, max_bytes } = this;
        return {
            max_age_num_blocks: max_age_num_blocks.toString(),
            max_age_duration: max_age_duration.toAmino(),
            max_bytes: max_bytes.toString(),
        };
    }
    static fromData(data) {
        const { max_age_num_blocks, max_age_duration, max_bytes } = data;
        return new EvidenceParams(Number.parseInt(max_age_num_blocks), Duration_1.Duration.fromData(max_age_duration), Number.parseInt(max_bytes));
    }
    toData() {
        const { max_age_num_blocks, max_age_duration, max_bytes } = this;
        return {
            max_age_num_blocks: max_age_num_blocks.toString(),
            max_age_duration: max_age_duration.toData(),
            max_bytes: max_bytes.toString(),
        };
    }
    static fromProto(data) {
        return new EvidenceParams(data.maxAgeNumBlocks.toNumber(), Duration_1.Duration.fromProto(data.maxAgeDuration), data.maxBytes.toNumber());
    }
    toProto() {
        const { max_age_num_blocks, max_age_duration, max_bytes } = this;
        return params_1.EvidenceParams.fromPartial({
            maxAgeNumBlocks: long_1.default.fromNumber(max_age_num_blocks),
            maxAgeDuration: max_age_duration.toProto(),
            maxBytes: long_1.default.fromNumber(max_bytes),
        });
    }
}
exports.EvidenceParams = EvidenceParams;
//# sourceMappingURL=EvidenceParams.js.map