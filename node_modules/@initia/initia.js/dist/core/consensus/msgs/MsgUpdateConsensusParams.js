"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgUpdateConsensusParams = void 0;
const json_1 = require("../../../util/json");
const BlockParams_1 = require("../BlockParams");
const EvidenceParams_1 = require("../EvidenceParams");
const ValidatorParams_1 = require("../ValidatorParams");
const ABCIParams_1 = require("../ABCIParams");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/cosmos/consensus/v1/tx");
class MsgUpdateConsensusParams extends json_1.JSONSerializable {
    /**
     * @param authority the address that controls the module
     * @param block block params
     * @param evidence evidence params
     * @param validator validator params
     * @param abci ABCI params
     */
    constructor(authority, block, evidence, validator, abci) {
        super();
        this.authority = authority;
        this.block = block;
        this.evidence = evidence;
        this.validator = validator;
        this.abci = abci;
    }
    static fromAmino(data) {
        const { value: { authority, block, evidence, validator, abci }, } = data;
        return new MsgUpdateConsensusParams(authority, block ? BlockParams_1.BlockParams.fromAmino(block) : undefined, evidence ? EvidenceParams_1.EvidenceParams.fromAmino(evidence) : undefined, validator ? ValidatorParams_1.ValidatorParams.fromAmino(validator) : undefined, abci ? ABCIParams_1.ABCIParams.fromAmino(abci) : undefined);
    }
    toAmino() {
        const { authority, block, evidence, validator, abci } = this;
        return {
            type: 'cosmos-sdk/x/consensus/MsgUpdateParams',
            value: {
                authority,
                block: block === null || block === void 0 ? void 0 : block.toAmino(),
                evidence: evidence === null || evidence === void 0 ? void 0 : evidence.toAmino(),
                validator: validator === null || validator === void 0 ? void 0 : validator.toAmino(),
                abci: abci === null || abci === void 0 ? void 0 : abci.toAmino(),
            },
        };
    }
    static fromData(data) {
        const { authority, block, evidence, validator, abci } = data;
        return new MsgUpdateConsensusParams(authority, block ? BlockParams_1.BlockParams.fromData(block) : undefined, evidence ? EvidenceParams_1.EvidenceParams.fromData(evidence) : undefined, validator ? ValidatorParams_1.ValidatorParams.fromData(validator) : undefined, abci ? ABCIParams_1.ABCIParams.fromData(abci) : undefined);
    }
    toData() {
        const { authority, block, evidence, validator, abci } = this;
        return {
            '@type': '/cosmos.consensus.v1.MsgUpdateParams',
            authority,
            block: block === null || block === void 0 ? void 0 : block.toData(),
            evidence: evidence === null || evidence === void 0 ? void 0 : evidence.toData(),
            validator: validator === null || validator === void 0 ? void 0 : validator.toData(),
            abci: abci === null || abci === void 0 ? void 0 : abci.toData(),
        };
    }
    static fromProto(data) {
        return new MsgUpdateConsensusParams(data.authority, BlockParams_1.BlockParams.fromProto(data.block), EvidenceParams_1.EvidenceParams.fromProto(data.evidence), ValidatorParams_1.ValidatorParams.fromProto(data.validator), ABCIParams_1.ABCIParams.fromProto(data.abci));
    }
    toProto() {
        const { authority, block, evidence, validator, abci } = this;
        return tx_1.MsgUpdateParams.fromPartial({
            authority,
            block: block === null || block === void 0 ? void 0 : block.toProto(),
            evidence: evidence === null || evidence === void 0 ? void 0 : evidence.toProto(),
            validator: validator === null || validator === void 0 ? void 0 : validator.toProto(),
            abci: abci === null || abci === void 0 ? void 0 : abci.toProto(),
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/cosmos.consensus.v1.MsgUpdateParams',
            value: tx_1.MsgUpdateParams.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgUpdateConsensusParams.fromProto(tx_1.MsgUpdateParams.decode(msgAny.value));
    }
}
exports.MsgUpdateConsensusParams = MsgUpdateConsensusParams;
//# sourceMappingURL=MsgUpdateConsensusParams.js.map