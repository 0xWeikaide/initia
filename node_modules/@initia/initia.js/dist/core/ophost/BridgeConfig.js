"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BridgeConfig = void 0;
const json_1 = require("../../util/json");
const Duration_1 = require("../Duration");
const types_1 = require("@initia/opinit.proto/opinit/ophost/v1/types");
const BatchInfo_1 = require("./BatchInfo");
class BridgeConfig extends json_1.JSONSerializable {
    /**
     * @param challenger the address of the challenger
     * @param proposer the address of the proposer
     * @param batch_info the information about batch submission
     * @param submission_interval the time interval at which checkpoints must be submitted
     * @param finalization_period the minium time duration that must elapse before a withdrawal can be finalized
     * @param submission_start_time the time of the first l2 block recorded
     * @param metadata normally IBC channelID for permissioned IBC relayer
     */
    constructor(challenger, proposer, batch_info, submission_interval, finalization_period, submission_start_time, metadata) {
        super();
        this.challenger = challenger;
        this.proposer = proposer;
        this.batch_info = batch_info;
        this.submission_interval = submission_interval;
        this.finalization_period = finalization_period;
        this.submission_start_time = submission_start_time;
        this.metadata = metadata;
    }
    static fromAmino(data) {
        const { challenger, proposer, batch_info, submission_interval, finalization_period, submission_start_time, metadata, } = data;
        return new BridgeConfig(challenger, proposer, BatchInfo_1.BatchInfo.fromAmino(batch_info), Duration_1.Duration.fromAmino(submission_interval), Duration_1.Duration.fromAmino(finalization_period), new Date(submission_start_time), metadata);
    }
    toAmino() {
        const { challenger, proposer, batch_info, submission_interval, finalization_period, submission_start_time, metadata, } = this;
        return {
            challenger,
            proposer,
            batch_info: batch_info.toAmino(),
            submission_interval: submission_interval.toAmino(),
            finalization_period: finalization_period.toAmino(),
            submission_start_time: submission_start_time.toISOString(),
            metadata,
        };
    }
    static fromData(data) {
        const { challenger, proposer, batch_info, submission_interval, finalization_period, submission_start_time, metadata, } = data;
        return new BridgeConfig(challenger, proposer, BatchInfo_1.BatchInfo.fromData(batch_info), Duration_1.Duration.fromData(submission_interval), Duration_1.Duration.fromData(finalization_period), new Date(submission_start_time), metadata);
    }
    toData() {
        const { challenger, proposer, batch_info, submission_interval, finalization_period, submission_start_time, metadata, } = this;
        return {
            challenger,
            proposer,
            batch_info: batch_info.toData(),
            submission_interval: submission_interval.toData(),
            finalization_period: finalization_period.toData(),
            submission_start_time: submission_start_time.toISOString(),
            metadata,
        };
    }
    static fromProto(data) {
        return new BridgeConfig(data.challenger, data.proposer, BatchInfo_1.BatchInfo.fromProto(data.batchInfo), Duration_1.Duration.fromProto(data.submissionInterval), Duration_1.Duration.fromProto(data.finalizationPeriod), data.submissionStartTime, Buffer.from(data.metadata).toString('base64'));
    }
    toProto() {
        const { challenger, proposer, batch_info, submission_interval, finalization_period, submission_start_time, metadata, } = this;
        return types_1.BridgeConfig.fromPartial({
            challenger,
            proposer,
            batchInfo: batch_info.toProto(),
            submissionInterval: submission_interval.toProto(),
            finalizationPeriod: finalization_period.toProto(),
            submissionStartTime: submission_start_time,
            metadata: metadata ? Buffer.from(metadata, 'base64') : undefined,
        });
    }
}
exports.BridgeConfig = BridgeConfig;
//# sourceMappingURL=BridgeConfig.js.map