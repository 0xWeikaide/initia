import { JSONSerializable } from '../../util/json';
import { AccAddress } from '../bech32';
import { Duration } from '../Duration';
import { BridgeConfig as BridgeConfig_pb } from '@initia/opinit.proto/opinit/ophost/v1/types';
import { BatchInfo } from './BatchInfo';
export declare class BridgeConfig extends JSONSerializable<BridgeConfig.Amino, BridgeConfig.Data, BridgeConfig.Proto> {
    challenger: AccAddress;
    proposer: AccAddress;
    batch_info: BatchInfo;
    submission_interval: Duration;
    finalization_period: Duration;
    submission_start_time: Date;
    metadata?: string | undefined;
    /**
     * @param challenger the address of the challenger
     * @param proposer the address of the proposer
     * @param batch_info the information about batch submission
     * @param submission_interval the time interval at which checkpoints must be submitted
     * @param finalization_period the minium time duration that must elapse before a withdrawal can be finalized
     * @param submission_start_time the time of the first l2 block recorded
     * @param metadata normally IBC channelID for permissioned IBC relayer
     */
    constructor(challenger: AccAddress, proposer: AccAddress, batch_info: BatchInfo, submission_interval: Duration, finalization_period: Duration, submission_start_time: Date, metadata?: string | undefined);
    static fromAmino(data: BridgeConfig.Amino): BridgeConfig;
    toAmino(): BridgeConfig.Amino;
    static fromData(data: BridgeConfig.Data): BridgeConfig;
    toData(): BridgeConfig.Data;
    static fromProto(data: BridgeConfig.Proto): BridgeConfig;
    toProto(): BridgeConfig.Proto;
}
export declare namespace BridgeConfig {
    interface Amino {
        challenger: AccAddress;
        proposer: AccAddress;
        batch_info: BatchInfo.Amino;
        submission_interval: Duration.Amino;
        finalization_period: Duration.Amino;
        submission_start_time: string;
        metadata?: string;
    }
    interface Data {
        challenger: AccAddress;
        proposer: AccAddress;
        batch_info: BatchInfo.Data;
        submission_interval: Duration.Data;
        finalization_period: Duration.Data;
        submission_start_time: string;
        metadata?: string;
    }
    type Proto = BridgeConfig_pb;
}
