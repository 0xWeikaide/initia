"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Output = void 0;
const json_1 = require("../../util/json");
const types_1 = require("@initia/opinit.proto/opinit/ophost/v1/types");
const long_1 = __importDefault(require("long"));
class Output extends json_1.JSONSerializable {
    /**
     * @param output_root hash of the l2 output
     * @param l1_block_time timestamp of the l1 block that the output root was submitted in
     * @param l2_block_number the l2 block number that the output root was submitted in
     */
    constructor(output_root, l1_block_time, l2_block_number) {
        super();
        this.output_root = output_root;
        this.l1_block_time = l1_block_time;
        this.l2_block_number = l2_block_number;
    }
    static fromAmino(data) {
        const { output_root, l1_block_time, l2_block_number } = data;
        return new Output(output_root, new Date(l1_block_time), Number.parseInt(l2_block_number));
    }
    toAmino() {
        const { output_root, l1_block_time, l2_block_number } = this;
        return {
            output_root,
            l1_block_time: l1_block_time.toISOString(),
            l2_block_number: l2_block_number.toString(),
        };
    }
    static fromData(data) {
        const { output_root, l1_block_time, l2_block_number } = data;
        return new Output(output_root, new Date(l1_block_time), Number.parseInt(l2_block_number));
    }
    toData() {
        const { output_root, l1_block_time, l2_block_number } = this;
        return {
            output_root,
            l1_block_time: l1_block_time.toISOString(),
            l2_block_number: l2_block_number.toString(),
        };
    }
    static fromProto(data) {
        return new Output(Buffer.from(data.outputRoot).toString('base64'), data.l1BlockTime, data.l2BlockNumber.toNumber());
    }
    toProto() {
        const { output_root, l1_block_time, l2_block_number } = this;
        return types_1.Output.fromPartial({
            outputRoot: Buffer.from(output_root, 'base64'),
            l1BlockTime: l1_block_time,
            l2BlockNumber: long_1.default.fromNumber(l2_block_number),
        });
    }
}
exports.Output = Output;
//# sourceMappingURL=Output.js.map