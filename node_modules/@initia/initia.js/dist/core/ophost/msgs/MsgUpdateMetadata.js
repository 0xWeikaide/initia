"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgUpdateMetadata = void 0;
const json_1 = require("../../../util/json");
const tx_1 = require("@initia/opinit.proto/opinit/ophost/v1/tx");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const long_1 = __importDefault(require("long"));
class MsgUpdateMetadata extends json_1.JSONSerializable {
    /**
     * @param authority the address that controls the module
     * @param bridge_id
     * @param metadata
     */
    constructor(authority, bridge_id, metadata) {
        super();
        this.authority = authority;
        this.bridge_id = bridge_id;
        this.metadata = metadata;
    }
    static fromAmino(data) {
        const { value: { authority, bridge_id, metadata }, } = data;
        return new MsgUpdateMetadata(authority, Number.parseInt(bridge_id), metadata);
    }
    toAmino() {
        const { authority, bridge_id, metadata } = this;
        return {
            type: 'ophost/MsgUpdateMetadata',
            value: {
                authority,
                bridge_id: bridge_id.toString(),
                metadata,
            },
        };
    }
    static fromData(data) {
        const { authority, bridge_id, metadata } = data;
        return new MsgUpdateMetadata(authority, Number.parseInt(bridge_id), metadata);
    }
    toData() {
        const { authority, bridge_id, metadata } = this;
        return {
            '@type': '/opinit.ophost.v1.MsgUpdateMetadata',
            authority,
            bridge_id: bridge_id.toString(),
            metadata,
        };
    }
    static fromProto(data) {
        return new MsgUpdateMetadata(data.authority, data.bridgeId.toNumber(), Buffer.from(data.metadata).toString('base64'));
    }
    toProto() {
        const { authority, bridge_id, metadata } = this;
        return tx_1.MsgUpdateMetadata.fromPartial({
            authority,
            bridgeId: long_1.default.fromNumber(bridge_id),
            metadata: Buffer.from(metadata, 'base64'),
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/opinit.ophost.v1.MsgUpdateMetadata',
            value: tx_1.MsgUpdateMetadata.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgUpdateMetadata.fromProto(tx_1.MsgUpdateMetadata.decode(msgAny.value));
    }
}
exports.MsgUpdateMetadata = MsgUpdateMetadata;
//# sourceMappingURL=MsgUpdateMetadata.js.map