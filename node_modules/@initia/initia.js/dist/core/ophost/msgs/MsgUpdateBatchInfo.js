"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgUpdateBatchInfo = void 0;
const json_1 = require("../../../util/json");
const tx_1 = require("@initia/opinit.proto/opinit/ophost/v1/tx");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const BatchInfo_1 = require("../BatchInfo");
const long_1 = __importDefault(require("long"));
class MsgUpdateBatchInfo extends json_1.JSONSerializable {
    /**
     * @param authority the address that controls the module
     * @param bridge_id
     * @param new_batch_info
     */
    constructor(authority, bridge_id, new_batch_info) {
        super();
        this.authority = authority;
        this.bridge_id = bridge_id;
        this.new_batch_info = new_batch_info;
    }
    static fromAmino(data) {
        const { value: { authority, bridge_id, new_batch_info }, } = data;
        return new MsgUpdateBatchInfo(authority, Number.parseInt(bridge_id), BatchInfo_1.BatchInfo.fromAmino(new_batch_info));
    }
    toAmino() {
        const { authority, bridge_id, new_batch_info } = this;
        return {
            type: 'ophost/MsgUpdateBatchInfo',
            value: {
                authority,
                bridge_id: bridge_id.toString(),
                new_batch_info: new_batch_info.toAmino(),
            },
        };
    }
    static fromData(data) {
        const { authority, bridge_id, new_batch_info } = data;
        return new MsgUpdateBatchInfo(authority, Number.parseInt(bridge_id), BatchInfo_1.BatchInfo.fromData(new_batch_info));
    }
    toData() {
        const { authority, bridge_id, new_batch_info } = this;
        return {
            '@type': '/opinit.ophost.v1.MsgUpdateBatchInfo',
            authority,
            bridge_id: bridge_id.toString(),
            new_batch_info: new_batch_info.toData(),
        };
    }
    static fromProto(data) {
        return new MsgUpdateBatchInfo(data.authority, data.bridgeId.toNumber(), BatchInfo_1.BatchInfo.fromProto(data.newBatchInfo));
    }
    toProto() {
        const { authority, bridge_id, new_batch_info } = this;
        return tx_1.MsgUpdateBatchInfo.fromPartial({
            authority,
            bridgeId: long_1.default.fromNumber(bridge_id),
            newBatchInfo: new_batch_info.toProto(),
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/opinit.ophost.v1.MsgUpdateBatchInfo',
            value: tx_1.MsgUpdateBatchInfo.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgUpdateBatchInfo.fromProto(tx_1.MsgUpdateBatchInfo.decode(msgAny.value));
    }
}
exports.MsgUpdateBatchInfo = MsgUpdateBatchInfo;
//# sourceMappingURL=MsgUpdateBatchInfo.js.map