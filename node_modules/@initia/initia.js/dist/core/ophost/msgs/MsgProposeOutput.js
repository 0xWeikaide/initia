"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgProposeOutput = void 0;
const json_1 = require("../../../util/json");
const tx_1 = require("@initia/opinit.proto/opinit/ophost/v1/tx");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const long_1 = __importDefault(require("long"));
class MsgProposeOutput extends json_1.JSONSerializable {
    /**
     * @param proposer
     * @param bridge_id
     * @param l2_block_number
     * @param output_root
     */
    constructor(proposer, bridge_id, l2_block_number, output_root) {
        super();
        this.proposer = proposer;
        this.bridge_id = bridge_id;
        this.l2_block_number = l2_block_number;
        this.output_root = output_root;
    }
    static fromAmino(data) {
        const { value: { proposer, bridge_id, l2_block_number, output_root }, } = data;
        return new MsgProposeOutput(proposer, Number.parseInt(bridge_id), Number.parseInt(l2_block_number), output_root);
    }
    toAmino() {
        const { proposer, bridge_id, l2_block_number, output_root } = this;
        return {
            type: 'ophost/MsgProposeOutput',
            value: {
                proposer,
                bridge_id: bridge_id.toString(),
                l2_block_number: l2_block_number.toString(),
                output_root,
            },
        };
    }
    static fromData(data) {
        const { proposer, bridge_id, l2_block_number, output_root } = data;
        return new MsgProposeOutput(proposer, Number.parseInt(bridge_id), Number.parseInt(l2_block_number), output_root);
    }
    toData() {
        const { proposer, bridge_id, l2_block_number, output_root } = this;
        return {
            '@type': '/opinit.ophost.v1.MsgProposeOutput',
            proposer,
            bridge_id: bridge_id.toString(),
            l2_block_number: l2_block_number.toString(),
            output_root,
        };
    }
    static fromProto(data) {
        return new MsgProposeOutput(data.proposer, data.bridgeId.toNumber(), data.l2BlockNumber.toNumber(), Buffer.from(data.outputRoot).toString('base64'));
    }
    toProto() {
        const { proposer, bridge_id, l2_block_number, output_root } = this;
        return tx_1.MsgProposeOutput.fromPartial({
            proposer,
            bridgeId: long_1.default.fromNumber(bridge_id),
            l2BlockNumber: long_1.default.fromNumber(l2_block_number),
            outputRoot: output_root ? Buffer.from(output_root, 'base64') : undefined,
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/opinit.ophost.v1.MsgProposeOutput',
            value: tx_1.MsgProposeOutput.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgProposeOutput.fromProto(tx_1.MsgProposeOutput.decode(msgAny.value));
    }
}
exports.MsgProposeOutput = MsgProposeOutput;
//# sourceMappingURL=MsgProposeOutput.js.map