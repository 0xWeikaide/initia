"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgInitiateTokenDeposit = void 0;
const json_1 = require("../../../util/json");
const Coin_1 = require("../../Coin");
const tx_1 = require("@initia/opinit.proto/opinit/ophost/v1/tx");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const long_1 = __importDefault(require("long"));
class MsgInitiateTokenDeposit extends json_1.JSONSerializable {
    /**
     * @param sender
     * @param bridge_id
     * @param to
     * @param amount
     * @param data
     */
    constructor(sender, bridge_id, to, amount, data) {
        super();
        this.sender = sender;
        this.bridge_id = bridge_id;
        this.to = to;
        this.amount = amount;
        this.data = data;
    }
    static fromAmino(msgAmino) {
        const { value: { sender, bridge_id, to, amount, data }, } = msgAmino;
        return new MsgInitiateTokenDeposit(sender, Number.parseInt(bridge_id), to, Coin_1.Coin.fromAmino(amount), data);
    }
    toAmino() {
        const { sender, bridge_id, to, amount, data } = this;
        return {
            type: 'ophost/MsgInitiateTokenDeposit',
            value: {
                sender,
                bridge_id: bridge_id.toString(),
                to,
                amount: amount.toAmino(),
                data,
            },
        };
    }
    static fromData(msgData) {
        const { sender, bridge_id, to, amount, data } = msgData;
        return new MsgInitiateTokenDeposit(sender, Number.parseInt(bridge_id), to, Coin_1.Coin.fromData(amount), data);
    }
    toData() {
        const { sender, bridge_id, to, amount, data } = this;
        return {
            '@type': '/opinit.ophost.v1.MsgInitiateTokenDeposit',
            sender,
            bridge_id: bridge_id.toString(),
            to,
            amount: amount.toData(),
            data,
        };
    }
    static fromProto(msgProto) {
        return new MsgInitiateTokenDeposit(msgProto.sender, msgProto.bridgeId.toNumber(), msgProto.to, Coin_1.Coin.fromProto(msgProto.amount), msgProto.data.length
            ? Buffer.from(msgProto.data).toString('base64')
            : undefined);
    }
    toProto() {
        const { sender, bridge_id, to, amount, data } = this;
        return tx_1.MsgInitiateTokenDeposit.fromPartial({
            sender,
            bridgeId: long_1.default.fromNumber(bridge_id),
            to,
            amount: amount.toProto(),
            data: data ? Buffer.from(data, 'base64') : undefined,
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/opinit.ophost.v1.MsgInitiateTokenDeposit',
            value: tx_1.MsgInitiateTokenDeposit.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgInitiateTokenDeposit.fromProto(tx_1.MsgInitiateTokenDeposit.decode(msgAny.value));
    }
}
exports.MsgInitiateTokenDeposit = MsgInitiateTokenDeposit;
//# sourceMappingURL=MsgInitiateTokenDeposit.js.map