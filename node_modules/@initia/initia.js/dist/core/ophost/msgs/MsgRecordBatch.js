"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgRecordBatch = void 0;
const json_1 = require("../../../util/json");
const tx_1 = require("@initia/opinit.proto/opinit/ophost/v1/tx");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const long_1 = __importDefault(require("long"));
class MsgRecordBatch extends json_1.JSONSerializable {
    /**
     * @param submitter
     * @param bridge_id
     * @param batch_bytes
     */
    constructor(submitter, bridge_id, batch_bytes) {
        super();
        this.submitter = submitter;
        this.bridge_id = bridge_id;
        this.batch_bytes = batch_bytes;
    }
    static fromAmino(data) {
        const { value: { submitter, bridge_id, batch_bytes }, } = data;
        return new MsgRecordBatch(submitter, Number.parseInt(bridge_id), batch_bytes);
    }
    toAmino() {
        const { submitter, bridge_id, batch_bytes } = this;
        return {
            type: 'ophost/MsgRecordBatch',
            value: {
                submitter,
                bridge_id: bridge_id.toString(),
                batch_bytes,
            },
        };
    }
    static fromData(data) {
        const { submitter, bridge_id, batch_bytes } = data;
        return new MsgRecordBatch(submitter, Number.parseInt(bridge_id), batch_bytes);
    }
    toData() {
        const { submitter, bridge_id, batch_bytes } = this;
        return {
            '@type': '/opinit.ophost.v1.MsgRecordBatch',
            submitter,
            bridge_id: bridge_id.toString(),
            batch_bytes,
        };
    }
    static fromProto(data) {
        return new MsgRecordBatch(data.submitter, data.bridgeId.toNumber(), Buffer.from(data.batchBytes).toString('base64'));
    }
    toProto() {
        const { submitter, bridge_id, batch_bytes } = this;
        return tx_1.MsgRecordBatch.fromPartial({
            submitter,
            bridgeId: long_1.default.fromNumber(bridge_id),
            batchBytes: batch_bytes ? Buffer.from(batch_bytes, 'base64') : undefined,
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/opinit.ophost.v1.MsgRecordBatch',
            value: tx_1.MsgRecordBatch.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgRecordBatch.fromProto(tx_1.MsgRecordBatch.decode(msgAny.value));
    }
}
exports.MsgRecordBatch = MsgRecordBatch;
//# sourceMappingURL=MsgRecordBatch.js.map