"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgPinCodes = void 0;
const json_1 = require("../../../util/json");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/cosmwasm/wasm/v1/tx");
const long_1 = __importDefault(require("long"));
class MsgPinCodes extends json_1.JSONSerializable {
    /**
     * @param authority the address of the governance account
     * @param code_ids references the new WASM codes
     */
    constructor(authority, code_ids) {
        super();
        this.authority = authority;
        this.code_ids = code_ids;
    }
    static fromAmino(data) {
        const { value: { authority, code_ids }, } = data;
        return new MsgPinCodes(authority, code_ids.map(Number.parseInt));
    }
    toAmino() {
        const { authority, code_ids } = this;
        return {
            type: 'wasm/MsgPinCodes',
            value: {
                authority,
                code_ids: code_ids.map(id => id.toString()),
            },
        };
    }
    static fromData(data) {
        const { authority, code_ids } = data;
        return new MsgPinCodes(authority, code_ids.map(Number.parseInt));
    }
    toData() {
        const { authority, code_ids } = this;
        return {
            '@type': '/cosmwasm.wasm.v1.MsgPinCodes',
            authority,
            code_ids: code_ids.map(id => id.toString()),
        };
    }
    static fromProto(data) {
        return new MsgPinCodes(data.authority, data.codeIds.map(id => id.toNumber()));
    }
    toProto() {
        const { authority, code_ids } = this;
        return tx_1.MsgPinCodes.fromPartial({
            authority,
            codeIds: code_ids.map(id => long_1.default.fromNumber(id)),
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/cosmwasm.wasm.v1.MsgPinCodes',
            value: tx_1.MsgPinCodes.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgPinCodes.fromProto(tx_1.MsgPinCodes.decode(msgAny.value));
    }
}
exports.MsgPinCodes = MsgPinCodes;
//# sourceMappingURL=MsgPinCodes.js.map