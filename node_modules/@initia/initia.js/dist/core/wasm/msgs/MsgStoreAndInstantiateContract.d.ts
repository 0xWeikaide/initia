import { JSONSerializable } from '../../../util/json';
import { Coins } from '../../Coins';
import { AccAddress } from '../../bech32';
import { Any } from '@initia/initia.proto/google/protobuf/any';
import { MsgStoreAndInstantiateContract as MsgStoreAndInstantiateContract_pb } from '@initia/initia.proto/cosmwasm/wasm/v1/tx';
import { AccessConfig } from '../AccessConfig';
export declare class MsgStoreAndInstantiateContract extends JSONSerializable<MsgStoreAndInstantiateContract.Amino, MsgStoreAndInstantiateContract.Data, MsgStoreAndInstantiateContract.Proto> {
    authority: AccAddress;
    wasm_byte_code: string;
    instantiate_permission: AccessConfig | undefined;
    unpin_code: boolean | undefined;
    admin: AccAddress | undefined;
    label: string | undefined;
    msg: string;
    source: string;
    builder: string;
    code_hash: string;
    funds: Coins;
    /**
     * @param authority the address of the governance account
     * @param wasm_byte_code can be raw or gzip compressed
     * @param instantiate_permission access control to apply on contract creation, optional
     * @param unpin_code code on upload, optional; as default the uploaded contract is pinned to cache
     * @param admin an optional address that can execute migrations
     * @param label optional metadata to be stored with a contract instance
     * @param msg json encoded message to be passed to the contract on instantiation
     * @param funds coins that are transferred from the authority account to the contract on instantiation
     * @param source the URL where the code is hosted
     * @param builder the docker image used to build the code deterministically, used for smart contract verification
     * @param code_hash the SHA256 sum of the code outputted by builder, used for smart contract verification
     */
    constructor(authority: AccAddress, wasm_byte_code: string, instantiate_permission: AccessConfig | undefined, unpin_code: boolean | undefined, admin: AccAddress | undefined, label: string | undefined, msg: string, funds: Coins.Input, source: string, builder: string, code_hash: string);
    static fromAmino(data: MsgStoreAndInstantiateContract.Amino): MsgStoreAndInstantiateContract;
    toAmino(): MsgStoreAndInstantiateContract.Amino;
    static fromData(data: MsgStoreAndInstantiateContract.Data): MsgStoreAndInstantiateContract;
    toData(): MsgStoreAndInstantiateContract.Data;
    static fromProto(data: MsgStoreAndInstantiateContract.Proto): MsgStoreAndInstantiateContract;
    toProto(): MsgStoreAndInstantiateContract.Proto;
    packAny(): Any;
    static unpackAny(msgAny: Any): MsgStoreAndInstantiateContract;
}
export declare namespace MsgStoreAndInstantiateContract {
    interface Amino {
        type: 'wasm/MsgStoreAndInstantiateContract';
        value: {
            authority: AccAddress;
            wasm_byte_code: string;
            instantiate_permission?: AccessConfig.Amino;
            unpin_code?: boolean;
            admin?: AccAddress;
            label?: string;
            msg: string;
            funds: Coins.Amino;
            source: string;
            builder: string;
            code_hash: string;
        };
    }
    interface Data {
        '@type': '/cosmwasm.wasm.v1.MsgStoreAndInstantiateContract';
        authority: AccAddress;
        wasm_byte_code: string;
        instantiate_permission?: AccessConfig.Data;
        unpin_code?: boolean;
        admin?: AccAddress;
        label?: string;
        msg: string;
        funds: Coins.Amino;
        source: string;
        builder: string;
        code_hash: string;
    }
    type Proto = MsgStoreAndInstantiateContract_pb;
}
