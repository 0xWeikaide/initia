"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgInstantiateContract = void 0;
const json_1 = require("../../../util/json");
const Coins_1 = require("../../Coins");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/cosmwasm/wasm/v1/tx");
const long_1 = __importDefault(require("long"));
class MsgInstantiateContract extends json_1.JSONSerializable {
    /**
     * @param sender the actor that signed the messages
     * @param admin an optional address that can execute migrations
     * @param code_id the reference to the stored WASM code
     * @param label optional metadata to be stored with a contract instance
     * @param msg json encoded message to be passed to the contract on instantiation
     * @param funds coins that are transferred to the contract on instantiation
     */
    constructor(sender, admin, code_id, label, msg, funds) {
        super();
        this.sender = sender;
        this.admin = admin;
        this.code_id = code_id;
        this.label = label;
        this.msg = msg;
        this.funds = new Coins_1.Coins(funds);
    }
    static fromAmino(data) {
        const { value: { sender, admin, code_id, label, msg, funds }, } = data;
        return new MsgInstantiateContract(sender, admin, Number.parseInt(code_id), label, msg, Coins_1.Coins.fromAmino(funds));
    }
    toAmino() {
        const { sender, admin, code_id, label, msg, funds } = this;
        return {
            type: 'wasm/MsgInstantiateContract',
            value: {
                sender,
                admin,
                code_id: code_id.toString(),
                label,
                msg,
                funds: funds.toAmino(),
            },
        };
    }
    static fromData(data) {
        const { sender, admin, code_id, label, msg, funds } = data;
        return new MsgInstantiateContract(sender, admin, Number.parseInt(code_id), label, msg, Coins_1.Coins.fromData(funds));
    }
    toData() {
        const { sender, admin, code_id, label, msg, funds } = this;
        return {
            '@type': '/cosmwasm.wasm.v1.MsgInstantiateContract',
            sender,
            admin,
            code_id: code_id.toString(),
            label,
            msg,
            funds: funds.toData(),
        };
    }
    static fromProto(data) {
        return new MsgInstantiateContract(data.sender, data.admin, data.codeId.toNumber(), data.label, Buffer.from(data.msg).toString('base64'), Coins_1.Coins.fromProto(data.funds));
    }
    toProto() {
        const { sender, admin, code_id, label, msg, funds } = this;
        return tx_1.MsgInstantiateContract.fromPartial({
            sender,
            admin,
            codeId: long_1.default.fromNumber(code_id),
            label,
            msg: Buffer.from(msg, 'base64'),
            funds: funds.toProto(),
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/cosmwasm.wasm.v1.MsgInstantiateContract',
            value: tx_1.MsgInstantiateContract.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgInstantiateContract.fromProto(tx_1.MsgInstantiateContract.decode(msgAny.value));
    }
}
exports.MsgInstantiateContract = MsgInstantiateContract;
//# sourceMappingURL=MsgInstantiateContract.js.map