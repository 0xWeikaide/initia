import { JSONSerializable } from '../../../util/json';
import { AccAddress } from '../../bech32';
import { Any } from '@initia/initia.proto/google/protobuf/any';
import { MsgMigrateContract as MsgMigrateContract_pb } from '@initia/initia.proto/cosmwasm/wasm/v1/tx';
export declare class MsgMigrateContract extends JSONSerializable<MsgMigrateContract.Amino, MsgMigrateContract.Data, MsgMigrateContract.Proto> {
    sender: AccAddress;
    contract: AccAddress;
    code_id: number;
    msg: string;
    /**
     * @param sender the actor that signed the messages
     * @param contract the address of the smart contract
     * @param code_id references the new WASM code
     * @param msg json encoded message to be passed to the contract on migration
     */
    constructor(sender: AccAddress, contract: AccAddress, code_id: number, msg: string);
    static fromAmino(data: MsgMigrateContract.Amino): MsgMigrateContract;
    toAmino(): MsgMigrateContract.Amino;
    static fromData(data: MsgMigrateContract.Data): MsgMigrateContract;
    toData(): MsgMigrateContract.Data;
    static fromProto(data: MsgMigrateContract.Proto): MsgMigrateContract;
    toProto(): MsgMigrateContract.Proto;
    packAny(): Any;
    static unpackAny(msgAny: Any): MsgMigrateContract;
}
export declare namespace MsgMigrateContract {
    interface Amino {
        type: 'wasm/MsgMigrateContract';
        value: {
            sender: AccAddress;
            contract: AccAddress;
            code_id: string;
            msg: string;
        };
    }
    interface Data {
        '@type': '/cosmwasm.wasm.v1.MsgMigrateContract';
        sender: AccAddress;
        contract: AccAddress;
        code_id: string;
        msg: string;
    }
    type Proto = MsgMigrateContract_pb;
}
