"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgExecuteContract = void 0;
const json_1 = require("../../../util/json");
const Coins_1 = require("../../Coins");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/cosmwasm/wasm/v1/tx");
class MsgExecuteContract extends json_1.JSONSerializable {
    /**
     * @param sender the actor that signed the messages
     * @param contract the address of the smart contract
     * @param msg json encoded message to be passed to the contract
     * @param funds coins that are transferred to the contract on execution
     */
    constructor(sender, contract, msg, funds) {
        super();
        this.sender = sender;
        this.contract = contract;
        this.msg = msg;
        this.funds = new Coins_1.Coins(funds);
    }
    static fromAmino(data) {
        const { value: { sender, contract, msg, funds }, } = data;
        return new MsgExecuteContract(sender, contract, msg, Coins_1.Coins.fromAmino(funds));
    }
    toAmino() {
        const { sender, contract, msg, funds } = this;
        return {
            type: 'wasm/MsgExecuteContract',
            value: {
                sender,
                contract,
                msg,
                funds: funds.toAmino(),
            },
        };
    }
    static fromData(data) {
        const { sender, contract, msg, funds } = data;
        return new MsgExecuteContract(sender, contract, msg, Coins_1.Coins.fromData(funds));
    }
    toData() {
        const { sender, contract, msg, funds } = this;
        return {
            '@type': '/cosmwasm.wasm.v1.MsgExecuteContract',
            sender,
            contract,
            msg,
            funds: funds.toData(),
        };
    }
    static fromProto(data) {
        return new MsgExecuteContract(data.sender, data.contract, Buffer.from(data.msg).toString('base64'), Coins_1.Coins.fromProto(data.funds));
    }
    toProto() {
        const { sender, contract, msg, funds } = this;
        return tx_1.MsgExecuteContract.fromPartial({
            sender,
            contract,
            msg: Buffer.from(msg, 'base64'),
            funds: funds.toProto(),
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
            value: tx_1.MsgExecuteContract.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgExecuteContract.fromProto(tx_1.MsgExecuteContract.decode(msgAny.value));
    }
}
exports.MsgExecuteContract = MsgExecuteContract;
//# sourceMappingURL=MsgExecuteContract.js.map