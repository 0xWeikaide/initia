"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgAddCodeUploadParamsAddresses = void 0;
const json_1 = require("../../../util/json");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/cosmwasm/wasm/v1/tx");
class MsgAddCodeUploadParamsAddresses extends json_1.JSONSerializable {
    /**
     * @param authority the address of the governance account
     * @param addresses
     */
    constructor(authority, addresses) {
        super();
        this.authority = authority;
        this.addresses = addresses;
    }
    static fromAmino(data) {
        const { value: { authority, addresses }, } = data;
        return new MsgAddCodeUploadParamsAddresses(authority, addresses);
    }
    toAmino() {
        const { authority, addresses } = this;
        return {
            type: 'wasm/MsgAddCodeUploadParamsAddresses',
            value: {
                authority,
                addresses,
            },
        };
    }
    static fromData(data) {
        const { authority, addresses } = data;
        return new MsgAddCodeUploadParamsAddresses(authority, addresses);
    }
    toData() {
        const { authority, addresses } = this;
        return {
            '@type': '/cosmwasm.wasm.v1.MsgAddCodeUploadParamsAddresses',
            authority,
            addresses,
        };
    }
    static fromProto(data) {
        return new MsgAddCodeUploadParamsAddresses(data.authority, data.addresses);
    }
    toProto() {
        const { authority, addresses } = this;
        return tx_1.MsgAddCodeUploadParamsAddresses.fromPartial({
            authority,
            addresses,
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/cosmwasm.wasm.v1.MsgAddCodeUploadParamsAddresses',
            value: tx_1.MsgAddCodeUploadParamsAddresses.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgAddCodeUploadParamsAddresses.fromProto(tx_1.MsgAddCodeUploadParamsAddresses.decode(msgAny.value));
    }
}
exports.MsgAddCodeUploadParamsAddresses = MsgAddCodeUploadParamsAddresses;
//# sourceMappingURL=MsgAddCodeUploadParamsAddresses.js.map