"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgStoreAndInstantiateContract = void 0;
const json_1 = require("../../../util/json");
const Coins_1 = require("../../Coins");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/cosmwasm/wasm/v1/tx");
const AccessConfig_1 = require("../AccessConfig");
class MsgStoreAndInstantiateContract extends json_1.JSONSerializable {
    /**
     * @param authority the address of the governance account
     * @param wasm_byte_code can be raw or gzip compressed
     * @param instantiate_permission access control to apply on contract creation, optional
     * @param unpin_code code on upload, optional; as default the uploaded contract is pinned to cache
     * @param admin an optional address that can execute migrations
     * @param label optional metadata to be stored with a contract instance
     * @param msg json encoded message to be passed to the contract on instantiation
     * @param funds coins that are transferred from the authority account to the contract on instantiation
     * @param source the URL where the code is hosted
     * @param builder the docker image used to build the code deterministically, used for smart contract verification
     * @param code_hash the SHA256 sum of the code outputted by builder, used for smart contract verification
     */
    constructor(authority, wasm_byte_code, instantiate_permission, unpin_code, admin, label, msg, funds, source, builder, code_hash) {
        super();
        this.authority = authority;
        this.wasm_byte_code = wasm_byte_code;
        this.instantiate_permission = instantiate_permission;
        this.unpin_code = unpin_code;
        this.admin = admin;
        this.label = label;
        this.msg = msg;
        this.source = source;
        this.builder = builder;
        this.code_hash = code_hash;
        this.funds = new Coins_1.Coins(funds);
    }
    static fromAmino(data) {
        const { value: { authority, wasm_byte_code, instantiate_permission, unpin_code, admin, label, msg, funds, source, builder, code_hash, }, } = data;
        return new MsgStoreAndInstantiateContract(authority, wasm_byte_code, instantiate_permission
            ? AccessConfig_1.AccessConfig.fromAmino(instantiate_permission)
            : undefined, unpin_code, admin, label, msg, Coins_1.Coins.fromAmino(funds), source, builder, code_hash);
    }
    toAmino() {
        const { authority, wasm_byte_code, instantiate_permission, unpin_code, admin, label, msg, funds, source, builder, code_hash, } = this;
        return {
            type: 'wasm/MsgStoreAndInstantiateContract',
            value: {
                authority,
                wasm_byte_code,
                instantiate_permission: instantiate_permission === null || instantiate_permission === void 0 ? void 0 : instantiate_permission.toAmino(),
                unpin_code,
                admin,
                label,
                msg,
                funds: funds.toAmino(),
                source,
                builder,
                code_hash,
            },
        };
    }
    static fromData(data) {
        const { authority, wasm_byte_code, instantiate_permission, unpin_code, admin, label, msg, funds, source, builder, code_hash, } = data;
        return new MsgStoreAndInstantiateContract(authority, wasm_byte_code, instantiate_permission
            ? AccessConfig_1.AccessConfig.fromData(instantiate_permission)
            : undefined, unpin_code, admin, label, msg, Coins_1.Coins.fromData(funds), source, builder, code_hash);
    }
    toData() {
        const { authority, wasm_byte_code, instantiate_permission, unpin_code, admin, label, msg, funds, source, builder, code_hash, } = this;
        return {
            '@type': '/cosmwasm.wasm.v1.MsgStoreAndInstantiateContract',
            authority,
            wasm_byte_code,
            instantiate_permission: instantiate_permission === null || instantiate_permission === void 0 ? void 0 : instantiate_permission.toData(),
            unpin_code,
            admin,
            label,
            msg,
            funds: funds.toData(),
            source,
            builder,
            code_hash,
        };
    }
    static fromProto(data) {
        return new MsgStoreAndInstantiateContract(data.authority, Buffer.from(data.wasmByteCode).toString('base64'), data.instantiatePermission
            ? AccessConfig_1.AccessConfig.fromProto(data.instantiatePermission)
            : undefined, data.unpinCode, data.admin, data.label, Buffer.from(data.msg).toString('base64'), Coins_1.Coins.fromProto(data.funds), data.source, data.builder, Buffer.from(data.codeHash).toString('base64'));
    }
    toProto() {
        const { authority, wasm_byte_code, instantiate_permission, unpin_code, admin, label, msg, funds, source, builder, code_hash, } = this;
        return tx_1.MsgStoreAndInstantiateContract.fromPartial({
            authority,
            wasmByteCode: Buffer.from(wasm_byte_code, 'base64'),
            instantiatePermission: instantiate_permission === null || instantiate_permission === void 0 ? void 0 : instantiate_permission.toProto(),
            unpinCode: unpin_code,
            admin,
            label,
            msg: Buffer.from(msg, 'base64'),
            funds: funds.toProto(),
            source,
            builder,
            codeHash: Buffer.from(code_hash, 'base64'),
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/cosmwasm.wasm.v1.MsgStoreAndInstantiateContract',
            value: tx_1.MsgStoreAndInstantiateContract.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgStoreAndInstantiateContract.fromProto(tx_1.MsgStoreAndInstantiateContract.decode(msgAny.value));
    }
}
exports.MsgStoreAndInstantiateContract = MsgStoreAndInstantiateContract;
//# sourceMappingURL=MsgStoreAndInstantiateContract.js.map