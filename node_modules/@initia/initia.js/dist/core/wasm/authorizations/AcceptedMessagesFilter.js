"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AcceptedMessagesFilter = void 0;
const json_1 = require("../../../util/json");
const authz_1 = require("@initia/initia.proto/cosmwasm/wasm/v1/authz");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
class AcceptedMessagesFilter extends json_1.JSONSerializable {
    constructor(messages) {
        super();
        this.messages = messages;
    }
    static fromAmino(data) {
        return new AcceptedMessagesFilter(data.value.messages);
    }
    toAmino() {
        return {
            type: 'wasm/AcceptedMessagesFilter',
            value: { messages: this.messages },
        };
    }
    static fromData(data) {
        return new AcceptedMessagesFilter(data.messages);
    }
    toData() {
        return {
            '@type': '/cosmwasm.wasm.v1.AcceptedMessagesFilter',
            messages: this.messages,
        };
    }
    static fromProto(data) {
        return new AcceptedMessagesFilter(data.messages.map(msg => Buffer.from(msg).toString('base64')));
    }
    toProto() {
        return authz_1.AcceptedMessagesFilter.fromPartial({
            messages: this.messages.map(msg => Buffer.from(msg, 'base64')),
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/cosmwasm.wasm.v1.AcceptedMessagesFilter',
            value: authz_1.AcceptedMessagesFilter.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return AcceptedMessagesFilter.fromProto(authz_1.AcceptedMessagesFilter.decode(msgAny.value));
    }
}
exports.AcceptedMessagesFilter = AcceptedMessagesFilter;
//# sourceMappingURL=AcceptedMessagesFilter.js.map