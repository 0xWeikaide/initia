"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CombinedLimit = void 0;
const json_1 = require("../../../util/json");
const Coins_1 = require("../../Coins");
const authz_1 = require("@initia/initia.proto/cosmwasm/wasm/v1/authz");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const long_1 = __importDefault(require("long"));
class CombinedLimit extends json_1.JSONSerializable {
    constructor(calls_remaining, amounts) {
        super();
        this.calls_remaining = calls_remaining;
        this.amounts = new Coins_1.Coins(amounts);
    }
    static fromAmino(data) {
        const { value: { calls_remaining, amounts }, } = data;
        return new CombinedLimit(Number.parseInt(calls_remaining), Coins_1.Coins.fromAmino(amounts));
    }
    toAmino() {
        const { calls_remaining, amounts } = this;
        return {
            type: 'wasm/CombinedLimit',
            value: {
                calls_remaining: calls_remaining.toString(),
                amounts: amounts.toAmino(),
            },
        };
    }
    static fromData(data) {
        const { calls_remaining, amounts } = data;
        return new CombinedLimit(Number.parseInt(calls_remaining), Coins_1.Coins.fromData(amounts));
    }
    toData() {
        const { calls_remaining, amounts } = this;
        return {
            '@type': '/cosmwasm.wasm.v1.CombinedLimit',
            calls_remaining: calls_remaining.toString(),
            amounts: amounts.toData(),
        };
    }
    static fromProto(data) {
        return new CombinedLimit(data.callsRemaining.toNumber(), Coins_1.Coins.fromProto(data.amounts));
    }
    toProto() {
        const { calls_remaining, amounts } = this;
        return authz_1.CombinedLimit.fromPartial({
            callsRemaining: long_1.default.fromNumber(calls_remaining),
            amounts: amounts.toProto(),
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/cosmwasm.wasm.v1.CombinedLimit',
            value: authz_1.CombinedLimit.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return CombinedLimit.fromProto(authz_1.CombinedLimit.decode(msgAny.value));
    }
}
exports.CombinedLimit = CombinedLimit;
//# sourceMappingURL=CombinedLimit.js.map