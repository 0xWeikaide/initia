"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractFilter = void 0;
const AllowAllMessagesFilter_1 = require("./AllowAllMessagesFilter");
const AcceptedMessageKeysFilter_1 = require("./AcceptedMessageKeysFilter");
const AcceptedMessagesFilter_1 = require("./AcceptedMessagesFilter");
var ContractFilter;
(function (ContractFilter) {
    function fromAmino(data) {
        switch (data.type) {
            case 'wasm/AllowAllMessagesFilter':
                return AllowAllMessagesFilter_1.AllowAllMessagesFilter.fromAmino(data);
            case 'wasm/AcceptedMessageKeysFilter':
                return AcceptedMessageKeysFilter_1.AcceptedMessageKeysFilter.fromAmino(data);
            case 'wasm/AcceptedMessagesFilter':
                return AcceptedMessagesFilter_1.AcceptedMessagesFilter.fromAmino(data);
        }
    }
    ContractFilter.fromAmino = fromAmino;
    function fromData(data) {
        switch (data['@type']) {
            case '/cosmwasm.wasm.v1.AllowAllMessagesFilter':
                return AllowAllMessagesFilter_1.AllowAllMessagesFilter.fromData(data);
            case '/cosmwasm.wasm.v1.AcceptedMessageKeysFilter':
                return AcceptedMessageKeysFilter_1.AcceptedMessageKeysFilter.fromData(data);
            case '/cosmwasm.wasm.v1.AcceptedMessagesFilter':
                return AcceptedMessagesFilter_1.AcceptedMessagesFilter.fromData(data);
        }
    }
    ContractFilter.fromData = fromData;
    function fromProto(proto) {
        const typeUrl = proto.typeUrl;
        switch (typeUrl) {
            case '/cosmwasm.wasm.v1.AllowAllMessagesFilter':
                return AllowAllMessagesFilter_1.AllowAllMessagesFilter.unpackAny(proto);
            case '/cosmwasm.wasm.v1.AcceptedMessageKeysFilter':
                return AcceptedMessageKeysFilter_1.AcceptedMessageKeysFilter.unpackAny(proto);
            case '/cosmwasm.wasm.v1.AcceptedMessagesFilter':
                return AcceptedMessagesFilter_1.AcceptedMessagesFilter.unpackAny(proto);
        }
        throw new Error(`ContractFilter type ${typeUrl} not recognized`);
    }
    ContractFilter.fromProto = fromProto;
})(ContractFilter || (exports.ContractFilter = ContractFilter = {}));
//# sourceMappingURL=ContractFilter.js.map