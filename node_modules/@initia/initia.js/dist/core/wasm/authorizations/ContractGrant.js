"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractGrant = void 0;
const json_1 = require("../../../util/json");
const ContractLimit_1 = require("./ContractLimit");
const ContractFilter_1 = require("./ContractFilter");
const authz_1 = require("@initia/initia.proto/cosmwasm/wasm/v1/authz");
class ContractGrant extends json_1.JSONSerializable {
    /**
     * @param contract the bech32 address of the smart contract
     * @param limit execution limits that are enforced and updated when the grant is applied
     * @param filter more fine-grained control on the message payload passed to the contract in the operation
     */
    constructor(contract, limit, filter) {
        super();
        this.contract = contract;
        this.limit = limit;
        this.filter = filter;
    }
    static fromAmino(data) {
        const { contract, limit, filter } = data;
        return new ContractGrant(contract, ContractLimit_1.ContractLimit.fromAmino(limit), ContractFilter_1.ContractFilter.fromAmino(filter));
    }
    toAmino() {
        const { contract, limit, filter } = this;
        return {
            contract,
            limit: limit.toAmino(),
            filter: filter.toAmino(),
        };
    }
    static fromData(data) {
        const { contract, limit, filter } = data;
        return new ContractGrant(contract, ContractLimit_1.ContractLimit.fromData(limit), ContractFilter_1.ContractFilter.fromData(filter));
    }
    toData() {
        const { contract, limit, filter } = this;
        return {
            contract,
            limit: limit.toData(),
            filter: filter.toData(),
        };
    }
    static fromProto(data) {
        return new ContractGrant(data.contract, ContractLimit_1.ContractLimit.fromProto(data.limit), ContractFilter_1.ContractFilter.fromProto(data.filter));
    }
    toProto() {
        const { contract, limit, filter } = this;
        return authz_1.ContractGrant.fromPartial({
            contract,
            limit: limit.packAny(),
            filter: filter.packAny(),
        });
    }
}
exports.ContractGrant = ContractGrant;
//# sourceMappingURL=ContractGrant.js.map