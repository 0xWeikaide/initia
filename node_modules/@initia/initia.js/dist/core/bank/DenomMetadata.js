"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DenomMetadata = void 0;
const json_1 = require("../../util/json");
const DenomUnit_1 = require("./DenomUnit");
const bank_1 = require("@initia/initia.proto/cosmos/bank/v1beta1/bank");
class DenomMetadata extends json_1.JSONSerializable {
    /**
     * @param description
     * @param denom_units the list of DenomUnit's for a given coin
     * @param base the base denom (should be the DenomUnit with exponent = 0)
     * @param display the suggested denom that should be displayed in clients
     * @param name the name of the token
     * @param symbol the token symbol usually shown on exchanges
     * @param uri URI to a document (on or off-chain) that contains additional information
     * @param uri_hash sha256 hash of a document pointed by URI
     */
    constructor(description, denom_units, base, display, name, symbol, uri, uri_hash) {
        super();
        this.description = description;
        this.denom_units = denom_units;
        this.base = base;
        this.display = display;
        this.name = name;
        this.symbol = symbol;
        this.uri = uri;
        this.uri_hash = uri_hash;
    }
    static fromAmino(data) {
        const { description, denom_units, base, display, name, symbol, uri, uri_hash, } = data;
        return new DenomMetadata(description, denom_units.map(DenomUnit_1.DenomUnit.fromAmino), base, display, name, symbol, uri, uri_hash);
    }
    toAmino() {
        const { description, denom_units, base, display, name, symbol, uri, uri_hash, } = this;
        return {
            description,
            denom_units: denom_units.map(d => d.toAmino()),
            base,
            display,
            name,
            symbol,
            uri,
            uri_hash,
        };
    }
    static fromData(data) {
        const { description, denom_units, base, display, name, symbol, uri, uri_hash, } = data;
        return new DenomMetadata(description, denom_units.map(DenomUnit_1.DenomUnit.fromData), base, display, name, symbol, uri, uri_hash);
    }
    toData() {
        const { description, denom_units, base, display, name, symbol, uri, uri_hash, } = this;
        return {
            description,
            denom_units: denom_units.map(d => d.toData()),
            base,
            display,
            name,
            symbol,
            uri,
            uri_hash,
        };
    }
    static fromProto(data) {
        return new DenomMetadata(data.description, data.denomUnits.map(DenomUnit_1.DenomUnit.fromProto), data.base, data.display, data.name, data.symbol, data.uri, data.uriHash);
    }
    toProto() {
        const { description, denom_units, base, display, name, symbol, uri, uri_hash, } = this;
        return bank_1.Metadata.fromPartial({
            description,
            denomUnits: denom_units.map(d => d.toProto()),
            base,
            display,
            name,
            symbol,
            uri,
            uriHash: uri_hash,
        });
    }
}
exports.DenomMetadata = DenomMetadata;
//# sourceMappingURL=DenomMetadata.js.map