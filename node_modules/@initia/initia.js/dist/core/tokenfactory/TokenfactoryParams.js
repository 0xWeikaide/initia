"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenfactoryParams = void 0;
const json_1 = require("../../util/json");
const Coins_1 = require("../Coins");
const params_1 = require("@initia/initia.proto/miniwasm/tokenfactory/v1/params");
const long_1 = __importDefault(require("long"));
class TokenfactoryParams extends json_1.JSONSerializable {
    /**
     * @param denom_creation_fee the fee to be charged on the creation of a new denom
     * @param denom_creation_gas_consume the gas cost for creating a new denom
     */
    constructor(denom_creation_fee, denom_creation_gas_consume) {
        super();
        this.denom_creation_gas_consume = denom_creation_gas_consume;
        this.denom_creation_fee = new Coins_1.Coins(denom_creation_fee);
    }
    static fromAmino(data) {
        const { denom_creation_fee, denom_creation_gas_consume } = data;
        return new TokenfactoryParams(Coins_1.Coins.fromAmino(denom_creation_fee), Number.parseInt(denom_creation_gas_consume));
    }
    toAmino() {
        const { denom_creation_fee, denom_creation_gas_consume } = this;
        return {
            denom_creation_fee: denom_creation_fee.toAmino(),
            denom_creation_gas_consume: denom_creation_gas_consume.toString(),
        };
    }
    static fromData(data) {
        const { denom_creation_fee, denom_creation_gas_consume } = data;
        return new TokenfactoryParams(Coins_1.Coins.fromData(denom_creation_fee), Number.parseInt(denom_creation_gas_consume));
    }
    toData() {
        const { denom_creation_fee, denom_creation_gas_consume } = this;
        return {
            denom_creation_fee: denom_creation_fee.toData(),
            denom_creation_gas_consume: denom_creation_gas_consume.toString(),
        };
    }
    static fromProto(data) {
        return new TokenfactoryParams(Coins_1.Coins.fromProto(data.denomCreationFee), data.denomCreationGasConsume.toNumber());
    }
    toProto() {
        const { denom_creation_fee, denom_creation_gas_consume } = this;
        return params_1.Params.fromPartial({
            denomCreationFee: denom_creation_fee.toProto(),
            denomCreationGasConsume: long_1.default.fromNumber(denom_creation_gas_consume),
        });
    }
}
exports.TokenfactoryParams = TokenfactoryParams;
//# sourceMappingURL=TokenfactoryParams.js.map