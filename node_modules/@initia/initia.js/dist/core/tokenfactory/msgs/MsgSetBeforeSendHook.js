"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgSetBeforeSendHook = void 0;
const json_1 = require("../../../util/json");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/miniwasm/tokenfactory/v1/tx");
class MsgSetBeforeSendHook extends json_1.JSONSerializable {
    /**
     * @param sender
     * @param denom
     * @param cosmwasm_address
     */
    constructor(sender, denom, cosmwasm_address) {
        super();
        this.sender = sender;
        this.denom = denom;
        this.cosmwasm_address = cosmwasm_address;
    }
    static fromAmino(data) {
        const { value: { sender, denom, cosmwasm_address }, } = data;
        return new MsgSetBeforeSendHook(sender, denom, cosmwasm_address);
    }
    toAmino() {
        const { sender, denom, cosmwasm_address } = this;
        return {
            type: 'tokenfactory/MsgSetBeforeSendHook',
            value: {
                sender,
                denom,
                cosmwasm_address,
            },
        };
    }
    static fromData(data) {
        const { sender, denom, cosmwasm_address } = data;
        return new MsgSetBeforeSendHook(sender, denom, cosmwasm_address);
    }
    toData() {
        const { sender, denom, cosmwasm_address } = this;
        return {
            '@type': '/miniwasm.tokenfactory.v1.MsgSetBeforeSendHook',
            sender,
            denom,
            cosmwasm_address,
        };
    }
    static fromProto(data) {
        return new MsgSetBeforeSendHook(data.sender, data.denom, data.cosmwasmAddress);
    }
    toProto() {
        const { sender, denom, cosmwasm_address } = this;
        return tx_1.MsgSetBeforeSendHook.fromPartial({
            sender,
            denom,
            cosmwasmAddress: cosmwasm_address,
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/miniwasm.tokenfactory.v1.MsgSetBeforeSendHook',
            value: tx_1.MsgSetBeforeSendHook.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgSetBeforeSendHook.fromProto(tx_1.MsgSetBeforeSendHook.decode(msgAny.value));
    }
}
exports.MsgSetBeforeSendHook = MsgSetBeforeSendHook;
//# sourceMappingURL=MsgSetBeforeSendHook.js.map