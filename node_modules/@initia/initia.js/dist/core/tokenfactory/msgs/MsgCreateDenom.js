"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgCreateDenom = void 0;
const json_1 = require("../../../util/json");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/miniwasm/tokenfactory/v1/tx");
class MsgCreateDenom extends json_1.JSONSerializable {
    /**
     * @param sender the actor that signed the messages
     * @param subdenom can be up to 44 "alphanumeric" characters long
     */
    constructor(sender, subdenom) {
        super();
        this.sender = sender;
        this.subdenom = subdenom;
    }
    static fromAmino(data) {
        const { value: { sender, subdenom }, } = data;
        return new MsgCreateDenom(sender, subdenom);
    }
    toAmino() {
        const { sender, subdenom } = this;
        return {
            type: 'tokenfactory/MsgCreateDenom',
            value: {
                sender,
                subdenom,
            },
        };
    }
    static fromData(data) {
        const { sender, subdenom } = data;
        return new MsgCreateDenom(sender, subdenom);
    }
    toData() {
        const { sender, subdenom } = this;
        return {
            '@type': '/miniwasm.tokenfactory.v1.MsgCreateDenom',
            sender,
            subdenom,
        };
    }
    static fromProto(data) {
        return new MsgCreateDenom(data.sender, data.subdenom);
    }
    toProto() {
        const { sender, subdenom } = this;
        return tx_1.MsgCreateDenom.fromPartial({
            sender,
            subdenom,
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/miniwasm.tokenfactory.v1.MsgCreateDenom',
            value: tx_1.MsgCreateDenom.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgCreateDenom.fromProto(tx_1.MsgCreateDenom.decode(msgAny.value));
    }
}
exports.MsgCreateDenom = MsgCreateDenom;
//# sourceMappingURL=MsgCreateDenom.js.map