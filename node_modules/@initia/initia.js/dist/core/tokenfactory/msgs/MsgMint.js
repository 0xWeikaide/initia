"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgMint = void 0;
const json_1 = require("../../../util/json");
const Coin_1 = require("../../Coin");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/miniwasm/tokenfactory/v1/tx");
class MsgMint extends json_1.JSONSerializable {
    /**
     * @param sender
     * @param amount
     * @param mint_to_address
     */
    constructor(sender, amount, mint_to_address) {
        super();
        this.sender = sender;
        this.amount = amount;
        this.mint_to_address = mint_to_address;
    }
    static fromAmino(data) {
        const { value: { sender, amount, mint_to_address }, } = data;
        return new MsgMint(sender, Coin_1.Coin.fromAmino(amount), mint_to_address);
    }
    toAmino() {
        const { sender, amount, mint_to_address } = this;
        return {
            type: 'tokenfactory/MsgMint',
            value: {
                sender,
                amount: amount.toAmino(),
                mint_to_address,
            },
        };
    }
    static fromData(data) {
        const { sender, amount, mint_to_address } = data;
        return new MsgMint(sender, Coin_1.Coin.fromData(amount), mint_to_address);
    }
    toData() {
        const { sender, amount, mint_to_address } = this;
        return {
            '@type': '/miniwasm.tokenfactory.v1.MsgMint',
            sender,
            amount: amount.toData(),
            mint_to_address,
        };
    }
    static fromProto(data) {
        return new MsgMint(data.sender, Coin_1.Coin.fromProto(data.amount), data.mintToAddress);
    }
    toProto() {
        const { sender, amount, mint_to_address } = this;
        return tx_1.MsgMint.fromPartial({
            sender,
            amount: amount.toProto(),
            mintToAddress: mint_to_address,
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/miniwasm.tokenfactory.v1.MsgMint',
            value: tx_1.MsgMint.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgMint.fromProto(tx_1.MsgMint.decode(msgAny.value));
    }
}
exports.MsgMint = MsgMint;
//# sourceMappingURL=MsgMint.js.map