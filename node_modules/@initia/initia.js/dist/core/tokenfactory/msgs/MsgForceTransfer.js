"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgForceTransfer = void 0;
const json_1 = require("../../../util/json");
const Coin_1 = require("../../Coin");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/miniwasm/tokenfactory/v1/tx");
class MsgForceTransfer extends json_1.JSONSerializable {
    /**
     * @param sender
     * @param amount
     * @param transfer_from_address
     * @param transfer_to_address
     */
    constructor(sender, amount, transfer_from_address, transfer_to_address) {
        super();
        this.sender = sender;
        this.amount = amount;
        this.transfer_from_address = transfer_from_address;
        this.transfer_to_address = transfer_to_address;
    }
    static fromAmino(data) {
        const { value: { sender, amount, transfer_from_address, transfer_to_address }, } = data;
        return new MsgForceTransfer(sender, Coin_1.Coin.fromAmino(amount), transfer_from_address, transfer_to_address);
    }
    toAmino() {
        const { sender, amount, transfer_from_address, transfer_to_address } = this;
        return {
            type: 'tokenfactory/MsgForceTransfer',
            value: {
                sender,
                amount: amount.toAmino(),
                transfer_from_address,
                transfer_to_address,
            },
        };
    }
    static fromData(data) {
        const { sender, amount, transfer_from_address, transfer_to_address } = data;
        return new MsgForceTransfer(sender, Coin_1.Coin.fromData(amount), transfer_from_address, transfer_to_address);
    }
    toData() {
        const { sender, amount, transfer_from_address, transfer_to_address } = this;
        return {
            '@type': '/miniwasm.tokenfactory.v1.MsgForceTransfer',
            sender,
            amount: amount.toData(),
            transfer_from_address,
            transfer_to_address,
        };
    }
    static fromProto(data) {
        return new MsgForceTransfer(data.sender, Coin_1.Coin.fromProto(data.amount), data.transferFromAddress, data.transferToAddress);
    }
    toProto() {
        const { sender, amount, transfer_from_address, transfer_to_address } = this;
        return tx_1.MsgForceTransfer.fromPartial({
            sender,
            amount: amount.toProto(),
            transferFromAddress: transfer_from_address,
            transferToAddress: transfer_to_address,
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/miniwasm.tokenfactory.v1.MsgForceTransfer',
            value: tx_1.MsgForceTransfer.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgForceTransfer.fromProto(tx_1.MsgForceTransfer.decode(msgAny.value));
    }
}
exports.MsgForceTransfer = MsgForceTransfer;
//# sourceMappingURL=MsgForceTransfer.js.map