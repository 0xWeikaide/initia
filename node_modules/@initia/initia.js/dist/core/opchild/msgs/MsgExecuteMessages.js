"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgExecuteMessages = void 0;
const json_1 = require("../../../util/json");
const Msg_1 = require("../../Msg");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/opinit.proto/opinit/opchild/v1/tx");
class MsgExecuteMessages extends json_1.JSONSerializable {
    /**
     * @param sender the actor that signed the messages
     * @param messages the arbitrary messages to be executed
     */
    constructor(sender, messages) {
        super();
        this.sender = sender;
        this.messages = messages;
    }
    static fromAmino(data) {
        const { value: { sender, messages }, } = data;
        return new MsgExecuteMessages(sender, messages.map(Msg_1.Msg.fromAmino));
    }
    toAmino() {
        const { sender, messages } = this;
        return {
            type: 'opchild/MsgExecuteMessages',
            value: {
                sender,
                messages: messages.map(msg => msg.toAmino()),
            },
        };
    }
    static fromData(data) {
        const { sender, messages } = data;
        return new MsgExecuteMessages(sender, messages.map(Msg_1.Msg.fromData));
    }
    toData() {
        const { sender, messages } = this;
        return {
            '@type': '/opinit.opchild.v1.MsgExecuteMessages',
            sender,
            messages: messages.map(msg => msg.toData()),
        };
    }
    static fromProto(data) {
        return new MsgExecuteMessages(data.sender, data.messages.map(Msg_1.Msg.fromProto));
    }
    toProto() {
        const { sender, messages } = this;
        return tx_1.MsgExecuteMessages.fromPartial({
            sender,
            messages: messages.map(msg => msg.packAny()),
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/opinit.opchild.v1.MsgExecuteMessages',
            value: tx_1.MsgExecuteMessages.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgExecuteMessages.fromProto(tx_1.MsgExecuteMessages.decode(msgAny.value));
    }
}
exports.MsgExecuteMessages = MsgExecuteMessages;
//# sourceMappingURL=MsgExecuteMessages.js.map