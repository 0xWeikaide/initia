"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgSetBridgeInfo = void 0;
const json_1 = require("../../../util/json");
const BridgeInfo_1 = require("../BridgeInfo");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/opinit.proto/opinit/opchild/v1/tx");
class MsgSetBridgeInfo extends json_1.JSONSerializable {
    /**
     * @param sender the sender address
     * @param bridge_info the bridge information to be set
     */
    constructor(sender, bridge_info) {
        super();
        this.sender = sender;
        this.bridge_info = bridge_info;
    }
    static fromAmino(data) {
        const { value: { sender, bridge_info }, } = data;
        return new MsgSetBridgeInfo(sender, BridgeInfo_1.BridgeInfo.fromAmino(bridge_info));
    }
    toAmino() {
        const { sender, bridge_info } = this;
        return {
            type: 'opchild/MsgSetBridgeInfo',
            value: {
                sender,
                bridge_info: bridge_info.toAmino(),
            },
        };
    }
    static fromData(data) {
        const { sender, bridge_info } = data;
        return new MsgSetBridgeInfo(sender, BridgeInfo_1.BridgeInfo.fromData(bridge_info));
    }
    toData() {
        const { sender, bridge_info } = this;
        return {
            '@type': '/opinit.opchild.v1.MsgSetBridgeInfo',
            sender,
            bridge_info: bridge_info.toData(),
        };
    }
    static fromProto(data) {
        return new MsgSetBridgeInfo(data.sender, BridgeInfo_1.BridgeInfo.fromProto(data.bridgeInfo));
    }
    toProto() {
        const { sender, bridge_info } = this;
        return tx_1.MsgSetBridgeInfo.fromPartial({
            sender,
            bridgeInfo: bridge_info.toProto(),
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/opinit.opchild.v1.MsgSetBridgeInfo',
            value: tx_1.MsgSetBridgeInfo.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgSetBridgeInfo.fromProto(tx_1.MsgSetBridgeInfo.decode(msgAny.value));
    }
}
exports.MsgSetBridgeInfo = MsgSetBridgeInfo;
//# sourceMappingURL=MsgSetBridgeInfo.js.map