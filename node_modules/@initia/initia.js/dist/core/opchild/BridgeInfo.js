"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BridgeInfo = void 0;
const json_1 = require("../../util/json");
const types_1 = require("@initia/opinit.proto/opinit/opchild/v1/types");
const ophost_1 = require("../ophost");
const long_1 = __importDefault(require("long"));
class BridgeInfo extends json_1.JSONSerializable {
    /**
     * @param bridge_id the unique identifier of the bridge which is assigned from l1
     * @param bridge_addr the address of the bridge on l1
     * @param l1_chain_id the chain id of the l1 chain
     * @param l1_client_id the IBC client ID, which is allocated for l1 chain, in l2 chain state
     * @param bridge_config the configuration of the bridge
     */
    constructor(bridge_id, bridge_addr, l1_chain_id, l1_client_id, bridge_config) {
        super();
        this.bridge_id = bridge_id;
        this.bridge_addr = bridge_addr;
        this.l1_chain_id = l1_chain_id;
        this.l1_client_id = l1_client_id;
        this.bridge_config = bridge_config;
    }
    static fromAmino(data) {
        const { bridge_id, bridge_addr, l1_chain_id, l1_client_id, bridge_config } = data;
        return new BridgeInfo(Number.parseInt(bridge_id), bridge_addr, l1_chain_id, l1_client_id, ophost_1.BridgeConfig.fromAmino(bridge_config));
    }
    toAmino() {
        const { bridge_id, bridge_addr, l1_chain_id, l1_client_id, bridge_config } = this;
        return {
            bridge_id: bridge_id.toString(),
            bridge_addr,
            l1_chain_id,
            l1_client_id,
            bridge_config: bridge_config.toAmino(),
        };
    }
    static fromData(data) {
        const { bridge_id, bridge_addr, l1_chain_id, l1_client_id, bridge_config } = data;
        return new BridgeInfo(Number.parseInt(bridge_id), bridge_addr, l1_chain_id, l1_client_id, ophost_1.BridgeConfig.fromData(bridge_config));
    }
    toData() {
        const { bridge_id, bridge_addr, l1_chain_id, l1_client_id, bridge_config } = this;
        return {
            bridge_id: bridge_id.toString(),
            bridge_addr,
            l1_chain_id,
            l1_client_id,
            bridge_config: bridge_config.toData(),
        };
    }
    static fromProto(data) {
        return new BridgeInfo(data.bridgeId.toNumber(), data.bridgeAddr, data.l1ChainId, data.l1ClientId, ophost_1.BridgeConfig.fromProto(data.bridgeConfig));
    }
    toProto() {
        const { bridge_id, bridge_addr, l1_chain_id, l1_client_id, bridge_config } = this;
        return types_1.BridgeInfo.fromPartial({
            bridgeId: long_1.default.fromNumber(bridge_id),
            bridgeAddr: bridge_addr,
            l1ChainId: l1_chain_id,
            l1ClientId: l1_client_id,
            bridgeConfig: bridge_config.toProto(),
        });
    }
}
exports.BridgeInfo = BridgeInfo;
//# sourceMappingURL=BridgeInfo.js.map