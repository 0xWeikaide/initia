"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpchildParams = void 0;
const json_1 = require("../../util/json");
const Coins_1 = require("../Coins");
const types_1 = require("@initia/opinit.proto/opinit/opchild/v1/types");
class OpchildParams extends json_1.JSONSerializable {
    /**
     * @param max_validators the maximum number of validators
     * @param historical_entries the number of historical entries to persist
     * @param min_gas_prices
     * @param bridge_executor the account address of bridge executor who can execute permissioned bridge messages
     * @param admin the account address of admin who can execute permissioned cosmos messages
     * @param fee_whitelist the list of addresses that are allowed to pay zero fee
     */
    constructor(max_validators, historical_entries, min_gas_prices, bridge_executor, admin, fee_whitelist) {
        super();
        this.max_validators = max_validators;
        this.historical_entries = historical_entries;
        this.bridge_executor = bridge_executor;
        this.admin = admin;
        this.fee_whitelist = fee_whitelist;
        this.min_gas_prices = new Coins_1.Coins(min_gas_prices);
    }
    static fromAmino(data) {
        const { value: { max_validators, historical_entries, min_gas_prices, bridge_executor, admin, fee_whitelist, }, } = data;
        return new OpchildParams(max_validators, historical_entries, Coins_1.Coins.fromAmino(min_gas_prices), bridge_executor, admin, fee_whitelist);
    }
    toAmino() {
        const { max_validators, historical_entries, min_gas_prices, bridge_executor, admin, fee_whitelist, } = this;
        return {
            type: 'opchild/Params',
            value: {
                max_validators,
                historical_entries,
                min_gas_prices: min_gas_prices.toAmino(),
                bridge_executor,
                admin,
                fee_whitelist,
            },
        };
    }
    static fromData(data) {
        const { max_validators, historical_entries, min_gas_prices, bridge_executor, admin, fee_whitelist, } = data;
        return new OpchildParams(max_validators, historical_entries, Coins_1.Coins.fromData(min_gas_prices), bridge_executor, admin, fee_whitelist);
    }
    toData() {
        const { max_validators, historical_entries, min_gas_prices, bridge_executor, admin, fee_whitelist, } = this;
        return {
            '@type': '/opinit.opchild.v1.Params',
            max_validators,
            historical_entries,
            min_gas_prices: min_gas_prices.toData(),
            bridge_executor,
            admin,
            fee_whitelist,
        };
    }
    static fromProto(data) {
        return new OpchildParams(data.maxValidators, data.historicalEntries, Coins_1.Coins.fromProto(data.minGasPrices), data.bridgeExecutor, data.admin, data.feeWhitelist);
    }
    toProto() {
        const { max_validators, historical_entries, min_gas_prices, bridge_executor, admin, fee_whitelist, } = this;
        return types_1.Params.fromPartial({
            maxValidators: max_validators,
            historicalEntries: historical_entries,
            minGasPrices: min_gas_prices.toProto(),
            bridgeExecutor: bridge_executor,
            admin,
            feeWhitelist: fee_whitelist,
        });
    }
}
exports.OpchildParams = OpchildParams;
//# sourceMappingURL=OpchildParams.js.map