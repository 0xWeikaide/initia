"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpValidator = void 0;
const json_1 = require("../../util/json");
const PublicKey_1 = require("../PublicKey");
const types_1 = require("@initia/opinit.proto/opinit/opchild/v1/types");
const long_1 = __importDefault(require("long"));
class OpValidator extends json_1.JSONSerializable {
    /**
     * @param moniker
     * @param operator_address the address of the validator's operator
     * @param consensus_pubkey the consensus public key of the validator
     * @param cons_power
     */
    constructor(moniker, operator_address, consensus_pubkey, cons_power) {
        super();
        this.moniker = moniker;
        this.operator_address = operator_address;
        this.consensus_pubkey = consensus_pubkey;
        this.cons_power = cons_power;
    }
    static fromAmino(data) {
        const { moniker, operator_address, consensus_pubkey, cons_power } = data;
        return new OpValidator(moniker, operator_address, PublicKey_1.ValConsPublicKey.fromAmino(consensus_pubkey), Number.parseInt(cons_power));
    }
    toAmino() {
        const { moniker, operator_address, consensus_pubkey, cons_power } = this;
        return {
            moniker,
            operator_address,
            consensus_pubkey: consensus_pubkey.toAmino(),
            cons_power: cons_power.toString(),
        };
    }
    static fromData(data) {
        const { moniker, operator_address, consensus_pubkey, cons_power } = data;
        return new OpValidator(moniker, operator_address, PublicKey_1.ValConsPublicKey.fromData(consensus_pubkey), Number.parseInt(cons_power));
    }
    toData() {
        const { moniker, operator_address, consensus_pubkey, cons_power } = this;
        return {
            moniker,
            operator_address,
            consensus_pubkey: consensus_pubkey.toData(),
            cons_power: cons_power.toString(),
        };
    }
    static fromProto(data) {
        return new OpValidator(data.moniker, data.operatorAddress, PublicKey_1.ValConsPublicKey.unpackAny(data.consensusPubkey), data.consPower.toNumber());
    }
    toProto() {
        const { moniker, operator_address, consensus_pubkey, cons_power } = this;
        return types_1.Validator.fromPartial({
            moniker,
            operatorAddress: operator_address,
            consensusPubkey: consensus_pubkey.packAny(),
            consPower: long_1.default.fromNumber(cons_power),
        });
    }
}
exports.OpValidator = OpValidator;
//# sourceMappingURL=OpValidator.js.map