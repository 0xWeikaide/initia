"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgRegisterForwardingAccount = void 0;
const json_1 = require("../../../util/json");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/noble/forwarding/v1/tx");
class MsgRegisterForwardingAccount extends json_1.JSONSerializable {
    /**
     * @param signer
     * @param recipient
     * @param channel
     */
    constructor(signer, recipient, channel) {
        super();
        this.signer = signer;
        this.recipient = recipient;
        this.channel = channel;
    }
    static fromAmino(data) {
        const { value: { signer, recipient, channel }, } = data;
        return new MsgRegisterForwardingAccount(signer, recipient, channel);
    }
    toAmino() {
        const { signer, recipient, channel } = this;
        return {
            type: 'noble/forwarding/RegisterAccount',
            value: {
                signer,
                recipient,
                channel,
            },
        };
    }
    static fromData(data) {
        const { signer, recipient, channel } = data;
        return new MsgRegisterForwardingAccount(signer, recipient, channel);
    }
    toData() {
        const { signer, recipient, channel } = this;
        return {
            '@type': '/noble.forwarding.v1.MsgRegisterAccount',
            signer,
            recipient,
            channel,
        };
    }
    static fromProto(data) {
        return new MsgRegisterForwardingAccount(data.signer, data.recipient, data.channel);
    }
    toProto() {
        const { signer, recipient, channel } = this;
        return tx_1.MsgRegisterAccount.fromPartial({
            signer,
            recipient,
            channel,
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/noble.forwarding.v1.MsgRegisterAccount',
            value: tx_1.MsgRegisterAccount.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgRegisterForwardingAccount.fromProto(tx_1.MsgRegisterAccount.decode(msgAny.value));
    }
}
exports.MsgRegisterForwardingAccount = MsgRegisterForwardingAccount;
//# sourceMappingURL=MsgRegisterForwardingAccount.js.map