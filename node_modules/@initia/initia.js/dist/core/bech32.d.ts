/// <reference types="node" />
/** `init-` prefixed account address */
export type AccAddress = string;
/** `initvaloper-` prefixed validator operator address */
export type ValAddress = string;
/** `initvalcons-` prefixed validator consensus address */
export type ValConsAddress = string;
/** `initpub-` prefixed account public key */
export type AccPubKey = string;
/** `initvaloperpub-` prefixed validator public key */
export type ValPubKey = string;
export declare namespace AccAddress {
    /**
     * Checks if a string is a valid Initia account address.
     *
     * @param data string to check
     */
    function validate(data: string): boolean;
    /**
     * Converts a validator address into an account address
     *
     * @param address validator address
     */
    function fromValAddress(address: ValAddress): AccAddress;
    /**
     * Converts a account address into a hex address
     *
     * @param address account address
     */
    function toHex(address: AccAddress): string;
    /**
     * Converts a hex address into an account address
     *
     * @param hexAddress hex address
     */
    function fromHex(hexAddress: string): AccAddress;
    function toBuffer(address: AccAddress): Buffer;
}
export declare namespace AccPubKey {
    /**
     * Checks if a string is a Initia account's public key
     * @param data string to check
     */
    function validate(data: string): boolean;
    /**
     * Converts a Initia validator pubkey to an account pubkey.
     * @param address validator pubkey to convert
     */
    function fromAccAddress(address: AccAddress): AccPubKey;
}
export declare namespace ValAddress {
    /**
     * Checks if a string is a Initia validator address.
     *
     * @param data string to check
     */
    function validate(data: string): boolean;
    /**
     * Converts a Initia account address to a validator address.
     * @param address account address to convert
     */
    function fromAccAddress(address: AccAddress): ValAddress;
}
export declare namespace ValPubKey {
    /**
     * Checks if a string is a Initia validator pubkey
     * @param data string to check
     */
    function validate(data: string): boolean;
    /**
     * Converts a Initia validator operator address to a validator pubkey.
     * @param valAddress account pubkey
     */
    function fromValAddress(valAddress: ValAddress): ValPubKey;
}
export declare namespace ValConsAddress {
    /**
     * Checks if a string is a Initia validator consensus address
     * @param data string to check
     */
    function validate(data: string): boolean;
}
