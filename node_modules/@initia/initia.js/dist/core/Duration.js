"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Duration = void 0;
const long_1 = __importDefault(require("long"));
/**
 * A Duration represents a signed, fixed-length span of time represented
 * as a count of seconds and fractions of seconds at nanosecond
 * resolution. It is independent of any calendar and concepts like "day"
 * or "month". It is related to Timestamp in that the difference between
 * two Timestamp values is a Duration and it can be added or subtracted
 * from a Timestamp. Range is approximately +-10,000 years.
 *
 * # JSON Mapping
 *
 * In JSON format, the Duration type is encoded as a string rather than an
 * object, where the string ends in the suffix "s" (indicating seconds) and
 * is preceded by the number of seconds, with nanoseconds expressed as
 * fractional seconds. For example, 3 seconds with 0 nanoseconds should be
 * encoded in JSON format as "3s", while 3 seconds and 1 nanosecond should
 * be expressed in JSON format as "3.000000001s", and 3 seconds and 1
 * microsecond should be expressed in JSON format as "3.000001s".
 */
class Duration {
    constructor(seconds, nanos = 0) {
        const [sec, nano] = (nanos / Math.pow(10, 9) + seconds)
            .toFixed(9)
            .split('.');
        this.seconds = long_1.default.fromString(sec);
        this.nanos = Number.parseInt(nano);
    }
    static fromString(str) {
        const [sec, nano] = Number.parseFloat(str.replace('s', ''))
            .toFixed(9)
            .split('.');
        return new Duration(Number.parseInt(sec), Number.parseInt(nano));
    }
    toString() {
        return `${this.nanos / Math.pow(10, 9) + this.seconds.toNumber()}s`;
    }
    static fromAmino(amino) {
        return Duration.fromString(amino);
    }
    toAmino() {
        return this.toString();
    }
    static fromData(data) {
        return Duration.fromString(data);
    }
    toData() {
        return this.toString();
    }
    static fromProto(proto) {
        return new Duration(proto.seconds.toNumber(), proto.nanos);
    }
    toProto() {
        return { seconds: this.seconds, nanos: this.nanos };
    }
}
exports.Duration = Duration;
//# sourceMappingURL=Duration.js.map