"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgUpdateACL = void 0;
const json_1 = require("../../../util/json");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/initia/ibchooks/v1/tx");
class MsgUpdateACL extends json_1.JSONSerializable {
    /**
     * @param authority the address that controls the module
     * @param address contract address (wasm, evm) or a contract deployer address (move)
     * @param allowed the flag whether this address is allowed to use hook or not
     */
    constructor(authority, address, allowed) {
        super();
        this.authority = authority;
        this.address = address;
        this.allowed = allowed;
    }
    static fromAmino(data) {
        const { value: { authority, address, allowed }, } = data;
        return new MsgUpdateACL(authority, address, allowed);
    }
    toAmino() {
        const { authority, address, allowed } = this;
        return {
            type: 'ibchooks/MsgUpdateACL',
            value: {
                authority,
                address,
                allowed,
            },
        };
    }
    static fromData(data) {
        const { authority, address, allowed } = data;
        return new MsgUpdateACL(authority, address, allowed);
    }
    toData() {
        const { authority, address, allowed } = this;
        return {
            '@type': '/initia.ibchooks.v1.MsgUpdateACL',
            authority,
            address,
            allowed,
        };
    }
    static fromProto(data) {
        return new MsgUpdateACL(data.authority, data.address, data.allowed);
    }
    toProto() {
        const { authority, address, allowed } = this;
        return tx_1.MsgUpdateACL.fromPartial({
            authority,
            address,
            allowed,
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/initia.ibchooks.v1.MsgUpdateACL',
            value: tx_1.MsgUpdateACL.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgUpdateACL.fromProto(tx_1.MsgUpdateACL.decode(msgAny.value));
    }
}
exports.MsgUpdateACL = MsgUpdateACL;
//# sourceMappingURL=MsgUpdateACL.js.map