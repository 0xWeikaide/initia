"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StakeAuthorizationValidators = exports.StakeAuthorization = void 0;
const json_1 = require("../../../util/json");
const Coins_1 = require("../../Coins");
const authz_1 = require("@initia/initia.proto/initia/mstaking/v1/authz");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
class StakeAuthorization extends json_1.JSONSerializable {
    constructor(max_tokens, allow_list, deny_list, authorization_type) {
        super();
        this.allow_list = allow_list;
        this.deny_list = deny_list;
        this.authorization_type = authorization_type;
        this.max_tokens = new Coins_1.Coins(max_tokens);
    }
    static fromAmino(data) {
        const { value: { max_tokens, allow_list, deny_list, authorization_type }, } = data;
        return new StakeAuthorization(Coins_1.Coins.fromAmino(max_tokens), StakeAuthorizationValidators.fromAmino(allow_list), StakeAuthorizationValidators.fromAmino(deny_list), (0, authz_1.authorizationTypeFromJSON)(authorization_type));
    }
    toAmino() {
        const { max_tokens, allow_list, deny_list, authorization_type } = this;
        return {
            type: 'mstake/StakeAuthorization',
            value: {
                max_tokens: max_tokens.toAmino(),
                allow_list: allow_list.toAmino(),
                deny_list: deny_list.toAmino(),
                authorization_type: (0, authz_1.authorizationTypeToJSON)(authorization_type),
            },
        };
    }
    static fromData(data) {
        const { max_tokens, allow_list, deny_list, authorization_type } = data;
        return new StakeAuthorization(Coins_1.Coins.fromData(max_tokens), StakeAuthorizationValidators.fromData(allow_list), StakeAuthorizationValidators.fromData(deny_list), (0, authz_1.authorizationTypeFromJSON)(authorization_type));
    }
    toData() {
        const { max_tokens, allow_list, deny_list, authorization_type } = this;
        return {
            '@type': '/initia.mstaking.v1.StakeAuthorization',
            max_tokens: max_tokens.toData(),
            allow_list: allow_list.toData(),
            deny_list: deny_list.toData(),
            authorization_type: (0, authz_1.authorizationTypeToJSON)(authorization_type),
        };
    }
    static fromProto(proto) {
        return new StakeAuthorization(Coins_1.Coins.fromProto(proto.maxTokens), StakeAuthorizationValidators.fromProto(proto.allowList), StakeAuthorizationValidators.fromProto(proto.denyList), proto.authorizationType);
    }
    toProto() {
        const { max_tokens, allow_list, deny_list, authorization_type } = this;
        return authz_1.StakeAuthorization.fromPartial({
            maxTokens: max_tokens.toProto(),
            allowList: allow_list.toProto(),
            denyList: deny_list.toProto(),
            authorizationType: authorization_type,
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/initia.mstaking.v1.StakeAuthorization',
            value: authz_1.StakeAuthorization.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return StakeAuthorization.fromProto(authz_1.StakeAuthorization.decode(msgAny.value));
    }
}
exports.StakeAuthorization = StakeAuthorization;
class StakeAuthorizationValidators extends json_1.JSONSerializable {
    constructor(address) {
        super();
        this.address = address;
    }
    static fromAmino(data) {
        return new StakeAuthorizationValidators(data.address);
    }
    toAmino() {
        return { address: this.address };
    }
    static fromData(data) {
        return new StakeAuthorizationValidators(data.address);
    }
    toData() {
        return {
            address: this.address,
        };
    }
    static fromProto(proto) {
        return new StakeAuthorizationValidators(proto.address);
    }
    toProto() {
        return authz_1.StakeAuthorization_Validators.fromPartial({
            address: this.address,
        });
    }
}
exports.StakeAuthorizationValidators = StakeAuthorizationValidators;
(function (StakeAuthorization) {
    StakeAuthorization.Type = authz_1.AuthorizationType;
})(StakeAuthorization || (exports.StakeAuthorization = StakeAuthorization = {}));
//# sourceMappingURL=StakeAuthorization.js.map