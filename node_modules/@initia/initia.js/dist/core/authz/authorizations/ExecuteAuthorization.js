"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExecuteAuthorizationItem = exports.ExecuteAuthorization = void 0;
const json_1 = require("../../../util/json");
const authz_1 = require("@initia/initia.proto/initia/move/v1/authz");
const types_1 = require("@initia/initia.proto/initia/move/v1/types");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
class ExecuteAuthorization extends json_1.JSONSerializable {
    constructor(items) {
        super();
        this.items = items;
    }
    static fromAmino(data) {
        return new ExecuteAuthorization(data.value.items.map(ExecuteAuthorizationItem.fromAmino));
    }
    toAmino() {
        return {
            type: 'move/ExecuteAuthorization',
            value: {
                items: this.items.map(d => d.toAmino()),
            },
        };
    }
    static fromData(data) {
        return new ExecuteAuthorization(data.items.map(ExecuteAuthorizationItem.fromData));
    }
    toData() {
        return {
            '@type': '/initia.move.v1.ExecuteAuthorization',
            items: this.items.map(item => item.toData()),
        };
    }
    static fromProto(proto) {
        return new ExecuteAuthorization(proto.items.map(ExecuteAuthorizationItem.fromProto));
    }
    toProto() {
        return authz_1.ExecuteAuthorization.fromPartial({
            items: this.items.map(item => item.toProto()),
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/initia.move.v1.ExecuteAuthorization',
            value: authz_1.ExecuteAuthorization.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return ExecuteAuthorization.fromProto(authz_1.ExecuteAuthorization.decode(msgAny.value));
    }
}
exports.ExecuteAuthorization = ExecuteAuthorization;
class ExecuteAuthorizationItem extends json_1.JSONSerializable {
    constructor(module_address, module_name, function_names) {
        super();
        this.module_address = module_address;
        this.module_name = module_name;
        this.function_names = function_names;
    }
    static fromAmino(data) {
        const { module_address, module_name, function_names } = data;
        return new ExecuteAuthorizationItem(module_address, module_name, function_names);
    }
    toAmino() {
        const { module_address, module_name, function_names } = this;
        return {
            module_address,
            module_name,
            function_names,
        };
    }
    static fromData(data) {
        const { module_address, module_name, function_names } = data;
        return new ExecuteAuthorizationItem(module_address, module_name, function_names);
    }
    toData() {
        const { module_address, module_name, function_names } = this;
        return {
            module_address,
            module_name,
            function_names,
        };
    }
    static fromProto(proto) {
        return new ExecuteAuthorizationItem(proto.moduleAddress, proto.moduleName, proto.functionNames);
    }
    toProto() {
        return types_1.ExecuteAuthorizationItem.fromPartial({
            moduleAddress: this.module_address,
            moduleName: this.module_name,
            functionNames: this.function_names,
        });
    }
}
exports.ExecuteAuthorizationItem = ExecuteAuthorizationItem;
//# sourceMappingURL=ExecuteAuthorization.js.map