"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Authorization = exports.AuthorizationGrant = void 0;
const json_1 = require("../../../util/json");
const GenericAuthorization_1 = require("./GenericAuthorization");
const SendAuthorization_1 = require("./SendAuthorization");
const StakeAuthorization_1 = require("./StakeAuthorization");
const PublishAuthorization_1 = require("./PublishAuthorization");
const ExecuteAuthorization_1 = require("./ExecuteAuthorization");
const wasm_1 = require("../../wasm");
const transfer_1 = require("../../ibc/applications/transfer");
const authz_1 = require("@initia/initia.proto/cosmos/authz/v1beta1/authz");
class AuthorizationGrant extends json_1.JSONSerializable {
    constructor(authorization, expiration) {
        super();
        this.authorization = authorization;
        this.expiration = expiration;
    }
    static fromAmino(amino) {
        const { authorization, expiration } = amino;
        return new AuthorizationGrant(Authorization.fromAmino(authorization), expiration ? new Date(expiration) : undefined);
    }
    toAmino() {
        const { authorization, expiration } = this;
        return {
            authorization: authorization.toAmino(),
            expiration: expiration === null || expiration === void 0 ? void 0 : expiration.toISOString().replace(/\.000Z$/, 'Z'),
        };
    }
    static fromData(data) {
        const { authorization, expiration } = data;
        return new AuthorizationGrant(Authorization.fromData(authorization), expiration ? new Date(expiration) : undefined);
    }
    toData() {
        const { authorization, expiration } = this;
        return {
            authorization: authorization.toData(),
            expiration: expiration === null || expiration === void 0 ? void 0 : expiration.toISOString().replace(/\.000Z$/, 'Z'),
        };
    }
    static fromProto(proto) {
        return new AuthorizationGrant(Authorization.fromProto(proto.authorization), proto.expiration);
    }
    toProto() {
        const { authorization, expiration } = this;
        return authz_1.Grant.fromPartial({
            authorization: authorization.packAny(),
            expiration,
        });
    }
}
exports.AuthorizationGrant = AuthorizationGrant;
var Authorization;
(function (Authorization) {
    function fromAmino(data) {
        switch (data.type) {
            case 'cosmos-sdk/SendAuthorization':
                return SendAuthorization_1.SendAuthorization.fromAmino(data);
            case 'cosmos-sdk/GenericAuthorization':
                return GenericAuthorization_1.GenericAuthorization.fromAmino(data);
            case 'mstake/StakeAuthorization':
                return StakeAuthorization_1.StakeAuthorization.fromAmino(data);
            case 'move/ExecuteAuthorization':
                return ExecuteAuthorization_1.ExecuteAuthorization.fromAmino(data);
            case 'move/PublishAuthorization':
                return PublishAuthorization_1.PublishAuthorization.fromAmino(data);
            case 'wasm/StoreCodeAuthorization':
                return wasm_1.StoreCodeAuthorization.fromAmino(data);
            case 'wasm/ContractExecutionAuthorization':
                return wasm_1.ContractExecutionAuthorization.fromAmino(data);
            case 'wasm/ContractMigrationAuthorization':
                return wasm_1.ContractMigrationAuthorization.fromAmino(data);
        }
    }
    Authorization.fromAmino = fromAmino;
    function fromData(data) {
        switch (data['@type']) {
            case '/cosmos.authz.v1beta1.GenericAuthorization':
                return GenericAuthorization_1.GenericAuthorization.fromData(data);
            case '/cosmos.bank.v1beta1.SendAuthorization':
                return SendAuthorization_1.SendAuthorization.fromData(data);
            case '/initia.mstaking.v1.StakeAuthorization':
                return StakeAuthorization_1.StakeAuthorization.fromData(data);
            case '/initia.move.v1.PublishAuthorization':
                return PublishAuthorization_1.PublishAuthorization.fromData(data);
            case '/initia.move.v1.ExecuteAuthorization':
                return ExecuteAuthorization_1.ExecuteAuthorization.fromData(data);
            case '/cosmwasm.wasm.v1.StoreCodeAuthorization':
                return wasm_1.StoreCodeAuthorization.fromData(data);
            case '/cosmwasm.wasm.v1.ContractExecutionAuthorization':
                return wasm_1.ContractExecutionAuthorization.fromData(data);
            case '/cosmwasm.wasm.v1.ContractMigrationAuthorization':
                return wasm_1.ContractMigrationAuthorization.fromData(data);
            case '/ibc.applications.transfer.v1.TransferAuthorization':
                return transfer_1.TransferAuthorization.fromData(data);
        }
    }
    Authorization.fromData = fromData;
    function fromProto(proto) {
        const typeUrl = proto.typeUrl;
        switch (typeUrl) {
            case '/cosmos.authz.v1beta1.GenericAuthorization':
                return GenericAuthorization_1.GenericAuthorization.unpackAny(proto);
            case '/cosmos.bank.v1beta1.SendAuthorization':
                return SendAuthorization_1.SendAuthorization.unpackAny(proto);
            case '/initia.mstaking.v1.StakeAuthorization':
                return StakeAuthorization_1.StakeAuthorization.unpackAny(proto);
            case '/initia.move.v1.PublishAuthorization':
                return PublishAuthorization_1.PublishAuthorization.unpackAny(proto);
            case '/initia.move.v1.ExecuteAuthorization':
                return ExecuteAuthorization_1.ExecuteAuthorization.unpackAny(proto);
            case '/cosmwasm.wasm.v1.StoreCodeAuthorization':
                return wasm_1.StoreCodeAuthorization.unpackAny(proto);
            case '/cosmwasm.wasm.v1.ContractExecutionAuthorization':
                return wasm_1.ContractExecutionAuthorization.unpackAny(proto);
            case '/cosmwasm.wasm.v1.ContractMigrationAuthorization':
                return wasm_1.ContractMigrationAuthorization.unpackAny(proto);
            case '/ibc.applications.transfer.v1.TransferAuthorization':
                return transfer_1.TransferAuthorization.unpackAny(proto);
        }
        throw new Error(`Authorization type ${typeUrl} not recognized`);
    }
    Authorization.fromProto = fromProto;
})(Authorization || (exports.Authorization = Authorization = {}));
//# sourceMappingURL=Authorization.js.map