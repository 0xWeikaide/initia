"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IbcConnectionParams = void 0;
const json_1 = require("../../../../util/json");
const connection_1 = require("@initia/initia.proto/ibc/core/connection/v1/connection");
const long_1 = __importDefault(require("long"));
class IbcConnectionParams extends json_1.JSONSerializable {
    /**
     * @param max_expected_time_per_block maximum expected time per block (in nanoseconds), used to enforce block delay
     */
    constructor(max_expected_time_per_block) {
        super();
        this.max_expected_time_per_block = max_expected_time_per_block;
    }
    static fromAmino(data) {
        const { max_expected_time_per_block } = data;
        return new IbcConnectionParams(Number.parseInt(max_expected_time_per_block));
    }
    toAmino() {
        const { max_expected_time_per_block } = this;
        return {
            max_expected_time_per_block: max_expected_time_per_block.toString(),
        };
    }
    static fromData(data) {
        const { max_expected_time_per_block } = data;
        return new IbcConnectionParams(Number.parseInt(max_expected_time_per_block));
    }
    toData() {
        const { max_expected_time_per_block } = this;
        return {
            max_expected_time_per_block: max_expected_time_per_block.toString(),
        };
    }
    static fromProto(proto) {
        return new IbcConnectionParams(proto.maxExpectedTimePerBlock.toNumber());
    }
    toProto() {
        const { max_expected_time_per_block } = this;
        return connection_1.Params.fromPartial({
            maxExpectedTimePerBlock: long_1.default.fromNumber(max_expected_time_per_block),
        });
    }
}
exports.IbcConnectionParams = IbcConnectionParams;
//# sourceMappingURL=IbcConnectionParams.js.map