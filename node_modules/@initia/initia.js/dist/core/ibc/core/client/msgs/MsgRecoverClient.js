"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgRecoverClient = void 0;
const json_1 = require("../../../../../util/json");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/ibc/core/client/v1/tx");
/**
 * MsgRecoverClient defines the message used to recover a frozen or expired client
 */
class MsgRecoverClient extends json_1.JSONSerializable {
    /**
     * @param subject_client_id the client identifier to be updated if the proposal passes
     * @param substitute_client_id the substitute client identifier which will replace the subject client
     * @param signer signer address
     */
    constructor(subject_client_id, substitute_client_id, signer) {
        super();
        this.subject_client_id = subject_client_id;
        this.substitute_client_id = substitute_client_id;
        this.signer = signer;
    }
    static fromAmino(_) {
        _;
        throw new Error('Amino not supported');
    }
    toAmino() {
        throw new Error('Amino not supported');
    }
    static fromData(data) {
        const { subject_client_id, substitute_client_id, signer } = data;
        return new MsgRecoverClient(subject_client_id, substitute_client_id, signer);
    }
    toData() {
        const { subject_client_id, substitute_client_id, signer } = this;
        return {
            '@type': '/ibc.core.client.v1.MsgRecoverClient',
            subject_client_id,
            substitute_client_id,
            signer,
        };
    }
    static fromProto(proto) {
        return new MsgRecoverClient(proto.subjectClientId, proto.substituteClientId, proto.signer);
    }
    toProto() {
        const { subject_client_id, substitute_client_id, signer } = this;
        return tx_1.MsgRecoverClient.fromPartial({
            subjectClientId: subject_client_id,
            substituteClientId: substitute_client_id,
            signer,
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/ibc.core.client.v1.MsgRecoverClient',
            value: tx_1.MsgRecoverClient.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgRecoverClient.fromProto(tx_1.MsgRecoverClient.decode(msgAny.value));
    }
}
exports.MsgRecoverClient = MsgRecoverClient;
//# sourceMappingURL=MsgRecoverClient.js.map