"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgIBCSoftwareUpgrade = void 0;
const json_1 = require("../../../../../util/json");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/ibc/core/client/v1/tx");
const upgrade_1 = require("../../../../upgrade");
/**
 * MsgIBCSoftwareUpgrade defines the message used to schedule an upgrade of an IBC client using a v1 governance proposal
 */
class MsgIBCSoftwareUpgrade extends json_1.JSONSerializable {
    /**
     * @param plan
     * @param upgraded_client_state
     * @param signer signer address
     */
    constructor(plan, upgraded_client_state, signer) {
        super();
        this.plan = plan;
        this.upgraded_client_state = upgraded_client_state;
        this.signer = signer;
    }
    static fromAmino(_) {
        _;
        throw new Error('Amino not supported');
    }
    toAmino() {
        throw new Error('Amino not supported');
    }
    static fromData(data) {
        const { plan, upgraded_client_state, signer } = data;
        return new MsgIBCSoftwareUpgrade(upgrade_1.Plan.fromData(plan), upgraded_client_state, signer);
    }
    toData() {
        const { plan, upgraded_client_state, signer } = this;
        return {
            '@type': '/ibc.core.client.v1.MsgIBCSoftwareUpgrade',
            plan: plan.toData(),
            upgraded_client_state,
            signer,
        };
    }
    static fromProto(proto) {
        return new MsgIBCSoftwareUpgrade(upgrade_1.Plan.fromProto(proto.plan), proto.upgradedClientState, proto.signer);
    }
    toProto() {
        const { plan, upgraded_client_state, signer } = this;
        return tx_1.MsgIBCSoftwareUpgrade.fromPartial({
            plan: plan.toProto(),
            upgradedClientState: upgraded_client_state,
            signer,
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/ibc.core.client.v1.MsgIBCSoftwareUpgrade',
            value: tx_1.MsgIBCSoftwareUpgrade.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgIBCSoftwareUpgrade.fromProto(tx_1.MsgIBCSoftwareUpgrade.decode(msgAny.value));
    }
}
exports.MsgIBCSoftwareUpgrade = MsgIBCSoftwareUpgrade;
//# sourceMappingURL=MsgIBCSoftwareUpgrade.js.map