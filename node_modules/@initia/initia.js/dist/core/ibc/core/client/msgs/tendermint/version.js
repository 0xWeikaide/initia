"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.App = exports.Consensus = void 0;
const json_1 = require("../../../../../../util/json");
const types_1 = require("@initia/initia.proto/tendermint/version/types");
const long_1 = __importDefault(require("long"));
/**
 * Consensus captures the consensus rules for processing a block in the blockchain,
 * including all blockchain data structures and the rules of the application's
 * state transition machine.
 */
class Consensus extends json_1.JSONSerializable {
    /**
     * @param block
     * @param app
     */
    constructor(block, app) {
        super();
        this.block = block;
        this.app = app;
    }
    static fromAmino(_) {
        _;
        throw new Error('Amino not supported');
    }
    toAmino() {
        throw new Error('Amino not supported');
    }
    static fromData(data) {
        const { block, app } = data;
        return new Consensus(Number.parseInt(block), Number.parseInt(app));
    }
    toData() {
        const { block, app } = this;
        const res = {
            block: block.toFixed(),
            app: app.toFixed(),
        };
        return res;
    }
    static fromProto(proto) {
        return new Consensus(proto.block.toNumber(), proto.app.toNumber());
    }
    toProto() {
        const { block, app } = this;
        return types_1.Consensus.fromPartial({
            block: long_1.default.fromNumber(block),
            app: long_1.default.fromNumber(app),
        });
    }
}
exports.Consensus = Consensus;
/**
 * App captures the consensus rules for processing a block in the blockchain,
 * including all blockchain data structures and the rules of the application's
 * state transition machine.
 */
class App extends json_1.JSONSerializable {
    /**
     * @param protocol
     * @param software
     */
    constructor(protocol, software) {
        super();
        this.protocol = protocol;
        this.software = software;
    }
    static fromAmino(_) {
        _;
        throw new Error('Amino not supported');
    }
    toAmino() {
        throw new Error('Amino not supported');
    }
    static fromData(data) {
        const { protocol, software } = data;
        return new App(Number.parseInt(protocol), software);
    }
    toData() {
        const { protocol, software } = this;
        const res = {
            protocol: protocol.toFixed(),
            software: software,
        };
        return res;
    }
    static fromProto(proto) {
        return new App(proto.protocol.toNumber(), proto.software);
    }
    toProto() {
        const { protocol, software } = this;
        return types_1.App.fromPartial({
            protocol: long_1.default.fromNumber(protocol),
            software: software,
        });
    }
}
exports.App = App;
//# sourceMappingURL=version.js.map