"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransferAuthorization = void 0;
const json_1 = require("../../../../../util/json");
const authz_1 = require("@initia/initia.proto/ibc/applications/transfer/v1/authz");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const Allocation_1 = require("./Allocation");
class TransferAuthorization extends json_1.JSONSerializable {
    constructor(allocations) {
        super();
        this.allocations = allocations;
    }
    static fromAmino(_) {
        _;
        throw new Error('Amino not supported');
    }
    toAmino() {
        throw new Error('Amino not supported');
    }
    static fromData(data) {
        return new TransferAuthorization(data.allocations.map(Allocation_1.Allocation.fromData));
    }
    toData() {
        return {
            '@type': '/ibc.applications.transfer.v1.TransferAuthorization',
            allocations: this.allocations.map(alloc => alloc.toData()),
        };
    }
    static fromProto(data) {
        return new TransferAuthorization(data.allocations.map(Allocation_1.Allocation.fromProto));
    }
    toProto() {
        return authz_1.TransferAuthorization.fromPartial({
            allocations: this.allocations.map(alloc => alloc.toProto()),
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/ibc.applications.transfer.v1.TransferAuthorization',
            value: authz_1.TransferAuthorization.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return TransferAuthorization.fromProto(authz_1.TransferAuthorization.decode(msgAny.value));
    }
}
exports.TransferAuthorization = TransferAuthorization;
//# sourceMappingURL=TransferAuthorization.js.map