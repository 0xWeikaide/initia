"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NftClassTrace = void 0;
const types_1 = require("@initia/initia.proto/ibc/applications/nft_transfer/v1/types");
const json_1 = require("../../../../util/json");
class NftClassTrace extends json_1.JSONSerializable {
    /**
     * @param path the chain of port/channel identifiers used for tracing the source of the non fungible token
     * @param base_class_id base class id of the relayed non fungible token
     */
    constructor(path, base_class_id) {
        super();
        this.path = path;
        this.base_class_id = base_class_id;
    }
    static fromAmino(data) {
        const { path, base_class_id } = data;
        return new NftClassTrace(path, base_class_id);
    }
    toAmino() {
        const { path, base_class_id } = this;
        const res = {
            path,
            base_class_id,
        };
        return res;
    }
    static fromData(data) {
        const { path, base_class_id } = data;
        return new NftClassTrace(path, base_class_id);
    }
    toData() {
        const { path, base_class_id } = this;
        const res = {
            path,
            base_class_id,
        };
        return res;
    }
    static fromProto(proto) {
        return new NftClassTrace(proto.path, proto.baseClassId);
    }
    toProto() {
        const { path, base_class_id } = this;
        return types_1.ClassTrace.fromPartial({ path, baseClassId: base_class_id });
    }
}
exports.NftClassTrace = NftClassTrace;
//# sourceMappingURL=NftClassTrace.js.map