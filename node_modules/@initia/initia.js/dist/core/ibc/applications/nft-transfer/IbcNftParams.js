"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IbcNftParams = void 0;
const json_1 = require("../../../../util/json");
const types_1 = require("@initia/initia.proto/ibc/applications/nft_transfer/v1/types");
class IbcNftParams extends json_1.JSONSerializable {
    /**
     * @param send_enabled enables or disables all cross-chain token transfers from this chain
     * @param receive_enabled enables or disables all cross-chain token transfers to this chain
     */
    constructor(send_enabled, receive_enabled) {
        super();
        this.send_enabled = send_enabled;
        this.receive_enabled = receive_enabled;
    }
    static fromAmino(data) {
        const { value: { send_enabled, receive_enabled }, } = data;
        return new IbcNftParams(send_enabled, receive_enabled);
    }
    toAmino() {
        const { send_enabled, receive_enabled } = this;
        return {
            type: 'nft-transfer/Params',
            value: { send_enabled, receive_enabled },
        };
    }
    static fromData(data) {
        const { send_enabled, receive_enabled } = data;
        return new IbcNftParams(send_enabled, receive_enabled);
    }
    toData() {
        const { send_enabled, receive_enabled } = this;
        return {
            '@type': '/ibc.applications.nft_transfer.v1.Params',
            send_enabled,
            receive_enabled,
        };
    }
    static fromProto(data) {
        return new IbcNftParams(data.sendEnabled, data.receiveEnabled);
    }
    toProto() {
        const { send_enabled, receive_enabled } = this;
        return types_1.Params.fromPartial({
            sendEnabled: send_enabled,
            receiveEnabled: receive_enabled,
        });
    }
}
exports.IbcNftParams = IbcNftParams;
//# sourceMappingURL=IbcNftParams.js.map