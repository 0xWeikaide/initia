"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgRegisterCounterpartyPayee = void 0;
const json_1 = require("../../../../../util/json");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/ibc/applications/fee/v1/tx");
/**
 * MsgRegisterCounterpartyPayee defines the request type for the RegisterCounterpartyPayee rpc
 */
class MsgRegisterCounterpartyPayee extends json_1.JSONSerializable {
    /**
     * @param port_id unique port identifier
     * @param channel_id unique channel identifier
     * @param relayer the relayer address
     * @param counterparty_payee the counterparty payee address
     */
    constructor(port_id, channel_id, relayer, counterparty_payee) {
        super();
        this.port_id = port_id;
        this.channel_id = channel_id;
        this.relayer = relayer;
        this.counterparty_payee = counterparty_payee;
    }
    static fromAmino(_) {
        _;
        throw new Error('Amino not supported');
    }
    toAmino() {
        throw new Error('Amino not supported');
    }
    static fromData(data) {
        const { port_id, channel_id, relayer, counterparty_payee } = data;
        return new MsgRegisterCounterpartyPayee(port_id, channel_id, relayer, counterparty_payee);
    }
    toData() {
        const { port_id, channel_id, relayer, counterparty_payee } = this;
        return {
            '@type': '/ibc.applications.fee.v1.MsgRegisterCounterpartyPayee',
            port_id,
            channel_id,
            relayer,
            counterparty_payee,
        };
    }
    static fromProto(proto) {
        return new MsgRegisterCounterpartyPayee(proto.portId, proto.channelId, proto.relayer, proto.counterpartyPayee);
    }
    toProto() {
        const { port_id, channel_id, relayer, counterparty_payee } = this;
        return tx_1.MsgRegisterCounterpartyPayee.fromPartial({
            portId: port_id,
            channelId: channel_id,
            relayer,
            counterpartyPayee: counterparty_payee,
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/ibc.applications.fee.v1.MsgRegisterCounterpartyPayee',
            value: tx_1.MsgRegisterCounterpartyPayee.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgRegisterCounterpartyPayee.fromProto(tx_1.MsgRegisterCounterpartyPayee.decode(msgAny.value));
    }
}
exports.MsgRegisterCounterpartyPayee = MsgRegisterCounterpartyPayee;
//# sourceMappingURL=MsgRegisterCounterpartyPayee.js.map