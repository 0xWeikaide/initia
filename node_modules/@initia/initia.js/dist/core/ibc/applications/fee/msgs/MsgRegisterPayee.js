"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgRegisterPayee = void 0;
const json_1 = require("../../../../../util/json");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/ibc/applications/fee/v1/tx");
/**
 * MsgRegisterPayee defines the request type for the RegisterPayee rpc
 */
class MsgRegisterPayee extends json_1.JSONSerializable {
    /**
     * @param port_id unique port identifier
     * @param channel_id unique channel identifier
     * @param relayer the relayer address
     * @param payee the payee address
     */
    constructor(port_id, channel_id, relayer, payee) {
        super();
        this.port_id = port_id;
        this.channel_id = channel_id;
        this.relayer = relayer;
        this.payee = payee;
    }
    static fromAmino(_) {
        _;
        throw new Error('Amino not supported');
    }
    toAmino() {
        throw new Error('Amino not supported');
    }
    static fromData(data) {
        const { port_id, channel_id, relayer, payee } = data;
        return new MsgRegisterPayee(port_id, channel_id, relayer, payee);
    }
    toData() {
        const { port_id, channel_id, relayer, payee } = this;
        return {
            '@type': '/ibc.applications.fee.v1.MsgRegisterPayee',
            port_id,
            channel_id,
            relayer,
            payee,
        };
    }
    static fromProto(proto) {
        return new MsgRegisterPayee(proto.portId, proto.channelId, proto.relayer, proto.payee);
    }
    toProto() {
        const { port_id, channel_id, relayer, payee } = this;
        return tx_1.MsgRegisterPayee.fromPartial({
            portId: port_id,
            channelId: channel_id,
            relayer,
            payee,
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/ibc.applications.fee.v1.MsgRegisterPayee',
            value: tx_1.MsgRegisterPayee.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgRegisterPayee.fromProto(tx_1.MsgRegisterPayee.decode(msgAny.value));
    }
}
exports.MsgRegisterPayee = MsgRegisterPayee;
//# sourceMappingURL=MsgRegisterPayee.js.map