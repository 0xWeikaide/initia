"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DistributionParams = void 0;
const json_1 = require("../../util/json");
const RewardWeight_1 = require("./RewardWeight");
const distribution_1 = require("@initia/initia.proto/initia/distribution/v1/distribution");
class DistributionParams extends json_1.JSONSerializable {
    /**
     * @param community_tax
     * @param withdraw_addr_enabled
     * @param reward_weights reward allocation ratio between pools
     */
    constructor(community_tax, withdraw_addr_enabled, reward_weights) {
        super();
        this.community_tax = community_tax;
        this.withdraw_addr_enabled = withdraw_addr_enabled;
        this.reward_weights = reward_weights;
    }
    static fromAmino(data) {
        const { value: { community_tax, withdraw_addr_enabled, reward_weights }, } = data;
        return new DistributionParams(community_tax, withdraw_addr_enabled, reward_weights.map(RewardWeight_1.RewardWeight.fromAmino));
    }
    toAmino() {
        const { community_tax, withdraw_addr_enabled, reward_weights } = this;
        return {
            type: 'distribution/Params',
            value: {
                community_tax,
                withdraw_addr_enabled,
                reward_weights: reward_weights.map(d => d.toAmino()),
            },
        };
    }
    static fromData(data) {
        const { community_tax, withdraw_addr_enabled, reward_weights } = data;
        return new DistributionParams(community_tax, withdraw_addr_enabled, reward_weights.map(RewardWeight_1.RewardWeight.fromData));
    }
    toData() {
        const { community_tax, withdraw_addr_enabled, reward_weights } = this;
        return {
            '@type': '/initia.distribution.v1.Params',
            community_tax,
            withdraw_addr_enabled,
            reward_weights: reward_weights.map(d => d.toData()),
        };
    }
    static fromProto(data) {
        return new DistributionParams(data.communityTax, data.withdrawAddrEnabled, data.rewardWeights.map(RewardWeight_1.RewardWeight.fromProto));
    }
    toProto() {
        const { community_tax, withdraw_addr_enabled, reward_weights } = this;
        return distribution_1.Params.fromPartial({
            communityTax: community_tax,
            withdrawAddrEnabled: withdraw_addr_enabled,
            rewardWeights: reward_weights.map(d => d.toProto()),
        });
    }
}
exports.DistributionParams = DistributionParams;
//# sourceMappingURL=DistributionParams.js.map