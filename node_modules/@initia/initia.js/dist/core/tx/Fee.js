"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Fee = void 0;
const json_1 = require("../../util/json");
const Coins_1 = require("../Coins");
const num_1 = require("../num");
const tx_1 = require("@initia/initia.proto/cosmos/tx/v1beta1/tx");
const long_1 = __importDefault(require("long"));
/**
 * A transaction must include a fee, otherwise it will be rejected.
 */
class Fee extends json_1.JSONSerializable {
    /**
     * Creates a new Fee object.
     * @param gas gas limit
     * @param amount amount to be paid to validator
     */
    constructor(gas_limit, amount, payer, granter) {
        super();
        this.gas_limit = gas_limit;
        this.payer = payer;
        this.granter = granter;
        this.amount = new Coins_1.Coins(amount);
    }
    static fromAmino(data) {
        const { gas, amount } = data;
        return new Fee(Number.parseInt(gas), Coins_1.Coins.fromAmino(amount), '', '');
    }
    toAmino() {
        return {
            gas: (0, num_1.num)(this.gas_limit).toFixed(0),
            amount: this.amount.toAmino(),
        };
    }
    static fromData(data) {
        return new Fee(Number.parseInt(data.gas_limit), Coins_1.Coins.fromData(data.amount), data.payer, data.granter);
    }
    toData() {
        const { amount, gas_limit, payer, granter } = this;
        return {
            amount: amount.toData(),
            gas_limit: gas_limit.toFixed(),
            granter: granter !== null && granter !== void 0 ? granter : '',
            payer: payer !== null && payer !== void 0 ? payer : '',
        };
    }
    static fromProto(proto) {
        return new Fee(proto.gasLimit.toNumber(), Coins_1.Coins.fromProto(proto.amount), proto.payer, proto.granter);
    }
    toProto() {
        const { amount, gas_limit, payer, granter } = this;
        return tx_1.Fee.fromPartial({
            amount: amount.toProto(),
            gasLimit: long_1.default.fromNumber(gas_limit),
            granter,
            payer,
        });
    }
    /**
     * Gets the minimum gas prices implied by the fee. Minimum gas prices are `fee amount / gas`.
     */
    gasPrices() {
        return this.amount.toDecCoins().div(this.gas_limit);
    }
}
exports.Fee = Fee;
//# sourceMappingURL=Fee.js.map