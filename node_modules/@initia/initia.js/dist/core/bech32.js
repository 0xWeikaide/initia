"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValConsAddress = exports.ValPubKey = exports.ValAddress = exports.AccPubKey = exports.AccAddress = void 0;
const bech32_1 = require("bech32");
function checkPrefixAndLength(prefix, data, length) {
    try {
        const vals = bech32_1.bech32.decode(data);
        return vals.prefix === prefix && data.length == length;
    }
    catch (e) {
        return false;
    }
}
var AccAddress;
(function (AccAddress) {
    /**
     * Checks if a string is a valid Initia account address.
     *
     * @param data string to check
     */
    function validate(data) {
        return (checkPrefixAndLength('init', data, 43) ||
            checkPrefixAndLength('init', data, 63));
    }
    AccAddress.validate = validate;
    /**
     * Converts a validator address into an account address
     *
     * @param address validator address
     */
    function fromValAddress(address) {
        const vals = bech32_1.bech32.decode(address);
        return bech32_1.bech32.encode('init', vals.words);
    }
    AccAddress.fromValAddress = fromValAddress;
    /**
     * Converts a account address into a hex address
     *
     * @param address account address
     */
    function toHex(address) {
        const vals = bech32_1.bech32.decode(address);
        return '0x' + Buffer.from(bech32_1.bech32.fromWords(vals.words)).toString('hex');
    }
    AccAddress.toHex = toHex;
    /**
     * Converts a hex address into an account address
     *
     * @param hexAddress hex address
     */
    function fromHex(hexAddress) {
        const hex = hexAddress.replace(/^0x0+|^0x|^0+(?!x)/, '');
        // That moudule address reach here is nearly impossible
        if (hex.length <= 40) {
            return bech32_1.bech32.encode('init', bech32_1.bech32.toWords(Buffer.from(hex.padStart(40, '0'), 'hex')));
        }
        else {
            return bech32_1.bech32.encode('init', bech32_1.bech32.toWords(Buffer.from(hex.padStart(64, '0'), 'hex')));
        }
    }
    AccAddress.fromHex = fromHex;
    function toBuffer(address) {
        const vals = bech32_1.bech32.decode(address);
        return Buffer.from(bech32_1.bech32.fromWords(vals.words));
    }
    AccAddress.toBuffer = toBuffer;
})(AccAddress || (exports.AccAddress = AccAddress = {}));
var AccPubKey;
(function (AccPubKey) {
    /**
     * Checks if a string is a Initia account's public key
     * @param data string to check
     */
    function validate(data) {
        return checkPrefixAndLength('initpub', data, 46);
    }
    AccPubKey.validate = validate;
    /**
     * Converts a Initia validator pubkey to an account pubkey.
     * @param address validator pubkey to convert
     */
    function fromAccAddress(address) {
        const vals = bech32_1.bech32.decode(address);
        return bech32_1.bech32.encode('initpub', vals.words);
    }
    AccPubKey.fromAccAddress = fromAccAddress;
})(AccPubKey || (exports.AccPubKey = AccPubKey = {}));
var ValAddress;
(function (ValAddress) {
    /**
     * Checks if a string is a Initia validator address.
     *
     * @param data string to check
     */
    function validate(data) {
        return checkPrefixAndLength('initvaloper', data, 50);
    }
    ValAddress.validate = validate;
    /**
     * Converts a Initia account address to a validator address.
     * @param address account address to convert
     */
    function fromAccAddress(address) {
        const vals = bech32_1.bech32.decode(address);
        return bech32_1.bech32.encode('initvaloper', vals.words);
    }
    ValAddress.fromAccAddress = fromAccAddress;
})(ValAddress || (exports.ValAddress = ValAddress = {}));
var ValPubKey;
(function (ValPubKey) {
    /**
     * Checks if a string is a Initia validator pubkey
     * @param data string to check
     */
    function validate(data) {
        return checkPrefixAndLength('initvaloperpub', data, 53);
    }
    ValPubKey.validate = validate;
    /**
     * Converts a Initia validator operator address to a validator pubkey.
     * @param valAddress account pubkey
     */
    function fromValAddress(valAddress) {
        const vals = bech32_1.bech32.decode(valAddress);
        return bech32_1.bech32.encode('initvaloperpub', vals.words);
    }
    ValPubKey.fromValAddress = fromValAddress;
})(ValPubKey || (exports.ValPubKey = ValPubKey = {}));
var ValConsAddress;
(function (ValConsAddress) {
    /**
     * Checks if a string is a Initia validator consensus address
     * @param data string to check
     */
    function validate(data) {
        return checkPrefixAndLength('initvalcons', data, 50);
    }
    ValConsAddress.validate = validate;
})(ValConsAddress || (exports.ValConsAddress = ValConsAddress = {}));
//# sourceMappingURL=bech32.js.map