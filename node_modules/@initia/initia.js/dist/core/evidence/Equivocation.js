"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Equivocation = void 0;
const json_1 = require("../../util/json");
const evidence_1 = require("@initia/initia.proto/cosmos/evidence/v1beta1/evidence");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const long_1 = __importDefault(require("long"));
class Equivocation extends json_1.JSONSerializable {
    /**
     * @param height the equivocation height
     * @param time the equivocation time
     * @param power the equivocation validator power
     * @param consensus_address the equivocation validator consensus address
     */
    constructor(height, time, power, consensus_address) {
        super();
        this.height = height;
        this.time = time;
        this.power = power;
        this.consensus_address = consensus_address;
    }
    static fromAmino(data) {
        const { value: { height, time, power, consensus_address }, } = data;
        return new Equivocation(Number.parseInt(height), new Date(time), Number.parseInt(power), consensus_address);
    }
    toAmino() {
        const { height, time, power, consensus_address } = this;
        return {
            type: 'cosmos-sdk/Equivocation',
            value: {
                height: height.toString(),
                time: time.toISOString(),
                power: power.toString(),
                consensus_address,
            },
        };
    }
    static fromData(data) {
        const { height, time, power, consensus_address } = data;
        return new Equivocation(Number.parseInt(height), new Date(time), Number.parseInt(power), consensus_address);
    }
    toData() {
        const { height, time, power, consensus_address } = this;
        return {
            '@type': '/cosmos.evidence.v1beta1.Equivocation',
            height: height.toString(),
            time: time.toISOString(),
            power: power.toString(),
            consensus_address,
        };
    }
    static fromProto(data) {
        return new Equivocation(data.height.toNumber(), data.time, data.power.toNumber(), data.consensusAddress);
    }
    toProto() {
        const { height, time, power, consensus_address } = this;
        return evidence_1.Equivocation.fromPartial({
            height: long_1.default.fromNumber(height),
            time,
            power: long_1.default.fromNumber(power),
            consensusAddress: consensus_address,
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/cosmos.evidence.v1beta1.Equivocation',
            value: evidence_1.Equivocation.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return Equivocation.fromProto(evidence_1.Equivocation.decode(msgAny.value));
    }
}
exports.Equivocation = Equivocation;
//# sourceMappingURL=Equivocation.js.map