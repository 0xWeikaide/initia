"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgSubmitEvidence = void 0;
const json_1 = require("../../../util/json");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/cosmos/evidence/v1beta1/tx");
const Evidence_1 = require("../Evidence");
class MsgSubmitEvidence extends json_1.JSONSerializable {
    /**
     * @param submitter the signer account address of evidence
     * @param evidence the evidence of misbehavior
     */
    constructor(submitter, evidence) {
        super();
        this.submitter = submitter;
        this.evidence = evidence;
    }
    static fromAmino(data) {
        const { value: { submitter, evidence }, } = data;
        return new MsgSubmitEvidence(submitter, Evidence_1.Evidence.fromAmino(evidence));
    }
    toAmino() {
        const { submitter, evidence } = this;
        return {
            type: 'cosmos-sdk/MsgSubmitEvidence',
            value: {
                submitter,
                evidence: evidence.toAmino(),
            },
        };
    }
    static fromData(data) {
        const { submitter, evidence } = data;
        return new MsgSubmitEvidence(submitter, Evidence_1.Evidence.fromData(evidence));
    }
    toData() {
        const { submitter, evidence } = this;
        return {
            '@type': '/cosmos.evidence.v1beta1.MsgSubmitEvidence',
            submitter,
            evidence: evidence.toData(),
        };
    }
    static fromProto(data) {
        return new MsgSubmitEvidence(data.submitter, Evidence_1.Evidence.fromProto(data.evidence));
    }
    toProto() {
        const { submitter, evidence } = this;
        return tx_1.MsgSubmitEvidence.fromPartial({
            submitter,
            evidence: evidence.packAny(),
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/cosmos.evidence.v1beta1.MsgSubmitEvidence',
            value: tx_1.MsgSubmitEvidence.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgSubmitEvidence.fromProto(tx_1.MsgSubmitEvidence.decode(msgAny.value));
    }
}
exports.MsgSubmitEvidence = MsgSubmitEvidence;
//# sourceMappingURL=MsgSubmitEvidence.js.map