"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SlashingParams = void 0;
const json_1 = require("../../util/json");
const Duration_1 = require("../Duration");
const slashing_1 = require("@initia/initia.proto/cosmos/slashing/v1beta1/slashing");
const long_1 = __importDefault(require("long"));
class SlashingParams extends json_1.JSONSerializable {
    /**
     * @param signed_blocks_window Number of blocks over which missed blocks are tallied for downtime
     * @param min_signed_per_window If a validator misses more than this number, they will be penalized and jailed for downtime
     * @param downtime_jail_duration Amount of time in seconds after which a jailed validator can be unjailed
     * @param slash_fraction_double_sign Ratio of funds slashed for a double-sign infraction
     * @param slash_fraction_downtime Ratio of funds slashed for a downtime infraction
     */
    constructor(signed_blocks_window, min_signed_per_window, downtime_jail_duration, slash_fraction_double_sign, slash_fraction_downtime) {
        super();
        this.signed_blocks_window = signed_blocks_window;
        this.min_signed_per_window = min_signed_per_window;
        this.downtime_jail_duration = downtime_jail_duration;
        this.slash_fraction_double_sign = slash_fraction_double_sign;
        this.slash_fraction_downtime = slash_fraction_downtime;
    }
    static fromAmino(data) {
        const { value: { signed_blocks_window, min_signed_per_window, downtime_jail_duration, slash_fraction_double_sign, slash_fraction_downtime, }, } = data;
        return new SlashingParams(Number.parseInt(signed_blocks_window), Number.parseInt(min_signed_per_window), Duration_1.Duration.fromAmino(downtime_jail_duration), Number.parseInt(slash_fraction_double_sign), Number.parseInt(slash_fraction_downtime));
    }
    toAmino() {
        const { signed_blocks_window, min_signed_per_window, downtime_jail_duration, slash_fraction_double_sign, slash_fraction_downtime, } = this;
        return {
            type: 'cosmos-sdk/x/slashing/Params',
            value: {
                signed_blocks_window: signed_blocks_window.toString(),
                min_signed_per_window: min_signed_per_window.toString(),
                downtime_jail_duration: downtime_jail_duration.toAmino(),
                slash_fraction_double_sign: slash_fraction_double_sign.toString(),
                slash_fraction_downtime: slash_fraction_downtime.toString(),
            },
        };
    }
    static fromData(data) {
        const { signed_blocks_window, min_signed_per_window, downtime_jail_duration, slash_fraction_double_sign, slash_fraction_downtime, } = data;
        return new SlashingParams(Number.parseInt(signed_blocks_window), Number.parseInt(min_signed_per_window), Duration_1.Duration.fromData(downtime_jail_duration), Number.parseInt(slash_fraction_double_sign), Number.parseInt(slash_fraction_downtime));
    }
    toData() {
        const { signed_blocks_window, min_signed_per_window, downtime_jail_duration, slash_fraction_double_sign, slash_fraction_downtime, } = this;
        return {
            '@type': '/cosmos.slashing.v1beta1.Params',
            signed_blocks_window: signed_blocks_window.toString(),
            min_signed_per_window: min_signed_per_window.toString(),
            downtime_jail_duration: downtime_jail_duration.toData(),
            slash_fraction_double_sign: slash_fraction_double_sign.toString(),
            slash_fraction_downtime: slash_fraction_downtime.toString(),
        };
    }
    static fromProto(data) {
        return new SlashingParams(data.signedBlocksWindow.toNumber(), Number.parseFloat(data.minSignedPerWindow.toString()), Duration_1.Duration.fromProto(data.downtimeJailDuration), Number.parseFloat(data.slashFractionDoubleSign.toString()), Number.parseFloat(data.slashFractionDowntime.toString()));
    }
    toProto() {
        const { signed_blocks_window, min_signed_per_window, downtime_jail_duration, slash_fraction_double_sign, slash_fraction_downtime, } = this;
        return slashing_1.Params.fromPartial({
            signedBlocksWindow: long_1.default.fromNumber(signed_blocks_window),
            minSignedPerWindow: Buffer.from(min_signed_per_window.toString()),
            downtimeJailDuration: downtime_jail_duration.toProto(),
            slashFractionDoubleSign: Buffer.from(slash_fraction_double_sign.toString()),
            slashFractionDowntime: Buffer.from(slash_fraction_downtime.toString()),
        });
    }
}
exports.SlashingParams = SlashingParams;
//# sourceMappingURL=SlashingParams.js.map