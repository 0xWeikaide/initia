"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MstakingParams = void 0;
const json_1 = require("../../util/json");
const Duration_1 = require("../Duration");
const staking_1 = require("@initia/initia.proto/initia/mstaking/v1/staking");
const long_1 = __importDefault(require("long"));
class MstakingParams extends json_1.JSONSerializable {
    /**
     * @param unbonding_time the time duration of unbonding
     * @param max_validators the maximum number of validators
     * @param max_entries the max entries for either unbonding delegation or redelegation (per pair/trio)
     * @param historical_entries the number of historical entries to persist
     * @param bond_denoms the bondable coin denomination
     * @param min_voting_power the chain-wide minimum voting power to get into power update whitelist
     * @param min_commission_rate the chain-wide minimum commission rate that a validator can charge their delegators
     */
    constructor(unbonding_time, max_validators, max_entries, historical_entries, bond_denoms, min_voting_power, min_commission_rate) {
        super();
        this.unbonding_time = unbonding_time;
        this.max_validators = max_validators;
        this.max_entries = max_entries;
        this.historical_entries = historical_entries;
        this.bond_denoms = bond_denoms;
        this.min_voting_power = min_voting_power;
        this.min_commission_rate = min_commission_rate;
    }
    static fromAmino(data) {
        const { value: { unbonding_time, max_validators, max_entries, historical_entries, bond_denoms, min_voting_power, min_commission_rate, }, } = data;
        return new MstakingParams(Duration_1.Duration.fromAmino(unbonding_time), max_validators, max_entries, historical_entries, bond_denoms, Number.parseInt(min_voting_power), min_commission_rate);
    }
    toAmino() {
        const { unbonding_time, max_validators, max_entries, historical_entries, bond_denoms, min_voting_power, min_commission_rate, } = this;
        return {
            type: 'mstaking/Params',
            value: {
                unbonding_time: unbonding_time.toAmino(),
                max_validators,
                max_entries,
                historical_entries,
                bond_denoms,
                min_voting_power: min_voting_power.toString(),
                min_commission_rate,
            },
        };
    }
    static fromData(data) {
        const { unbonding_time, max_validators, max_entries, historical_entries, bond_denoms, min_voting_power, min_commission_rate, } = data;
        return new MstakingParams(Duration_1.Duration.fromData(unbonding_time), max_validators, max_entries, historical_entries, bond_denoms, Number.parseInt(min_voting_power), min_commission_rate);
    }
    toData() {
        const { unbonding_time, max_validators, max_entries, historical_entries, bond_denoms, min_voting_power, min_commission_rate, } = this;
        return {
            '@type': '/initia.mstaking.v1.Params',
            unbonding_time: unbonding_time.toData(),
            max_validators,
            max_entries,
            historical_entries,
            bond_denoms,
            min_voting_power: min_voting_power.toString(),
            min_commission_rate,
        };
    }
    static fromProto(data) {
        return new MstakingParams(Duration_1.Duration.fromProto(data.unbondingTime), data.maxValidators, data.maxEntries, data.historicalEntries, data.bondDenoms, data.minVotingPower.toNumber(), data.minCommissionRate);
    }
    toProto() {
        const { unbonding_time, max_validators, max_entries, historical_entries, bond_denoms, min_voting_power, min_commission_rate, } = this;
        return staking_1.Params.fromPartial({
            unbondingTime: unbonding_time.toProto(),
            maxValidators: max_validators,
            maxEntries: max_entries,
            historicalEntries: historical_entries,
            bondDenoms: bond_denoms,
            minVotingPower: long_1.default.fromNumber(min_voting_power),
            minCommissionRate: min_commission_rate,
        });
    }
}
exports.MstakingParams = MstakingParams;
//# sourceMappingURL=MstakingParams.js.map