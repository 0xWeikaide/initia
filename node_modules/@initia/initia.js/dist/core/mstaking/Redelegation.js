"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Redelegation = void 0;
const json_1 = require("../../util/json");
const Coins_1 = require("../Coins");
const staking_1 = require("@initia/initia.proto/initia/mstaking/v1/staking");
const long_1 = __importDefault(require("long"));
/**
 * A redelegation is when a delegator decides to stop mstaking with one validator and
 * transfer their delegation to another validator. Rather than unbonding (which takes
 * some time) and re-staking, the funds can be redelegated immediately if a
 * [[Redelegation.Entry]] can be created.
 *
 * A redelegation, like an unbonding delegation, is implemented through
 * [[Redelegation.Entry]] objects, limited by the `max_entry` parameter in the mstaking
 * module params. For each pair of source and target validators, you cannot redelegate
 * more times than the amount of entries. Entries are cleared when the redelegation is
 * completed, the same amount of time as unbonding.
 */
class Redelegation extends json_1.JSONSerializable {
    /**
     *
     * @param delegator_address delegator's account address
     * @param validator_src_address source validator's operator address (from)
     * @param validator_dst_address target validator's operator address (to)
     * @param entries entries
     */
    constructor(delegator_address, validator_src_address, validator_dst_address, entries) {
        super();
        this.delegator_address = delegator_address;
        this.validator_src_address = validator_src_address;
        this.validator_dst_address = validator_dst_address;
        this.entries = entries;
    }
    static fromAmino(data) {
        const { redelegation: { delegator_address, validator_src_address, validator_dst_address, }, entries, } = data;
        return new Redelegation(delegator_address, validator_src_address, validator_dst_address, entries.map(e => Redelegation.Entry.fromAmino(e)));
    }
    toAmino() {
        const { delegator_address, validator_src_address, validator_dst_address, entries, } = this;
        return {
            redelegation: {
                delegator_address,
                validator_src_address,
                validator_dst_address,
            },
            entries: entries.map(e => e.toAmino()),
        };
    }
    static fromData(data) {
        const { redelegation: { delegator_address, validator_src_address, validator_dst_address, }, entries, } = data;
        return new Redelegation(delegator_address, validator_src_address, validator_dst_address, entries.map(e => Redelegation.Entry.fromData(e)));
    }
    toData() {
        const { delegator_address, validator_src_address, validator_dst_address, entries, } = this;
        return {
            redelegation: {
                delegator_address,
                validator_src_address,
                validator_dst_address,
            },
            entries: entries.map(e => e.toData()),
        };
    }
    static fromProto(data) {
        const redelegationProto = data.redelegation;
        return new Redelegation(redelegationProto.delegatorAddress, redelegationProto.validatorDstAddress, redelegationProto.validatorDstAddress, data.entries.map(e => Redelegation.Entry.fromProto(e)));
    }
    toProto() {
        const { delegator_address, validator_src_address, validator_dst_address, entries, } = this;
        return staking_1.RedelegationResponse.fromPartial({
            entries: entries.map(e => e.toProto()),
            redelegation: staking_1.Redelegation.fromPartial({
                delegatorAddress: delegator_address,
                entries: entries.map(e => e.toProto().redelegationEntry),
                validatorDstAddress: validator_dst_address,
                validatorSrcAddress: validator_src_address,
            }),
        });
    }
}
exports.Redelegation = Redelegation;
(function (Redelegation) {
    class Entry extends json_1.JSONSerializable {
        /**
         *
         * @param initial_balance balance of delegation prior to initiating redelegation
         * @param shares_dst
         * @param creation_height 	height of blockchain when entry was created
         * @param completion_time time when redelegation entry will be removed
         */
        constructor(initial_balance, balance, shares_dst, creation_height, completion_time) {
            super();
            this.creation_height = creation_height;
            this.completion_time = completion_time;
            this.initial_balance = new Coins_1.Coins(initial_balance);
            this.balance = new Coins_1.Coins(balance);
            this.shares_dst = new Coins_1.Coins(shares_dst);
        }
        toAmino() {
            return {
                redelegation_entry: {
                    initial_balance: this.initial_balance.toAmino(),
                    shares_dst: this.shares_dst.toAmino(),
                    creation_height: this.creation_height,
                    completion_time: this.completion_time.toISOString(),
                },
                balance: this.balance.toAmino(),
            };
        }
        static fromAmino(data) {
            const { redelegation_entry: { initial_balance, shares_dst, creation_height, completion_time, }, balance, } = data;
            return new Entry(Coins_1.Coins.fromAmino(initial_balance), Coins_1.Coins.fromAmino(balance), Coins_1.Coins.fromAmino(shares_dst), creation_height, new Date(completion_time));
        }
        toData() {
            return {
                redelegation_entry: {
                    initial_balance: this.initial_balance.toData(),
                    shares_dst: this.shares_dst.toData(),
                    creation_height: this.creation_height,
                    completion_time: this.completion_time.toISOString(),
                },
                balance: this.balance.toData(),
            };
        }
        static fromData(data) {
            const { redelegation_entry: { initial_balance, shares_dst, creation_height, completion_time, }, balance, } = data;
            return new Entry(Coins_1.Coins.fromData(initial_balance), Coins_1.Coins.fromData(balance), Coins_1.Coins.fromData(shares_dst), creation_height, new Date(completion_time));
        }
        toProto() {
            const { initial_balance, balance, shares_dst, creation_height, completion_time, } = this;
            return staking_1.RedelegationEntryResponse.fromPartial({
                balance: balance.toProto(),
                redelegationEntry: staking_1.RedelegationEntry.fromPartial({
                    completionTime: completion_time,
                    creationHeight: long_1.default.fromNumber(creation_height),
                    initialBalance: initial_balance.toProto(),
                    sharesDst: shares_dst.toProto(),
                }),
            });
        }
        static fromProto(proto) {
            const redelegationEntryProto = proto.redelegationEntry;
            return new Entry(Coins_1.Coins.fromProto(redelegationEntryProto.initialBalance), Coins_1.Coins.fromProto(proto.balance), Coins_1.Coins.fromProto(redelegationEntryProto.sharesDst), redelegationEntryProto.creationHeight.toNumber(), redelegationEntryProto.completionTime);
        }
    }
    Redelegation.Entry = Entry;
})(Redelegation || (exports.Redelegation = Redelegation = {}));
//# sourceMappingURL=Redelegation.js.map