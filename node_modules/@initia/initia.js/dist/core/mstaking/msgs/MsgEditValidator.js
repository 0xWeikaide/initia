"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgEditValidator = void 0;
const json_1 = require("../../../util/json");
const Validator_1 = require("../Validator");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/initia/mstaking/v1/tx");
/**
 * A validator can edit its delegate information, such as moniker, website, commission
 * rate, etc.
 *
 * You must use special or sentinel values to inform that you want to leave the current
 * field untouched. For `Description`,` you should start with [[MsgEditValidator.DESC_DO_NOT_MODIFY]] and
 * change each field you wish to modify individually.
 */
class MsgEditValidator extends json_1.JSONSerializable {
    /**
     * @param description new description to apply
     * @param validator_address new address to apply
     * @param commission_rate new commission rates to apply
     */
    constructor(description, validator_address, commission_rate) {
        super();
        this.description = description;
        this.validator_address = validator_address;
        this.commission_rate = commission_rate;
    }
    static fromAmino(data) {
        const { value: { description, validator_address, commission_rate }, } = data;
        return new MsgEditValidator(Validator_1.Validator.Description.fromAmino(description), validator_address, commission_rate);
    }
    toAmino() {
        const { description, validator_address, commission_rate } = this;
        return {
            type: 'mstaking/MsgEditValidator',
            value: {
                description,
                validator_address,
                commission_rate,
            },
        };
    }
    static fromProto(data) {
        return new MsgEditValidator(Validator_1.Validator.Description.fromProto(data.description), data.validatorAddress, data.commissionRate !== '' ? data.commissionRate : undefined);
    }
    toProto() {
        var _a;
        const { description, validator_address, commission_rate } = this;
        return tx_1.MsgEditValidator.fromPartial({
            description: description.toProto(),
            commissionRate: (_a = commission_rate === null || commission_rate === void 0 ? void 0 : commission_rate.toString()) !== null && _a !== void 0 ? _a : '',
            validatorAddress: validator_address,
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/initia.mstaking.v1.MsgEditValidator',
            value: tx_1.MsgEditValidator.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgEditValidator.fromProto(tx_1.MsgEditValidator.decode(msgAny.value));
    }
    static fromData(data) {
        const { description, validator_address, commission_rate } = data;
        return new MsgEditValidator(Validator_1.Validator.Description.fromData(description), validator_address, commission_rate);
    }
    toData() {
        const { description, validator_address, commission_rate } = this;
        return {
            '@type': '/initia.mstaking.v1.MsgEditValidator',
            description,
            validator_address,
            commission_rate,
        };
    }
}
exports.MsgEditValidator = MsgEditValidator;
(function (MsgEditValidator) {
    MsgEditValidator.DESC_DO_NOT_MODIFY = {
        moniker: '[do-not-modify]',
        website: '[do-not-modify]',
        identity: '[do-not-modify]',
        details: '[do-not-modify]',
        security_contact: '[do-not-modify]',
    };
})(MsgEditValidator || (exports.MsgEditValidator = MsgEditValidator = {}));
//# sourceMappingURL=MsgEditValidator.js.map