"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgCreateValidator = void 0;
const json_1 = require("../../../util/json");
const Coins_1 = require("../../Coins");
const Validator_1 = require("../Validator");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/initia/mstaking/v1/tx");
const PublicKey_1 = require("../../PublicKey");
/**
 * For new validators, this message registers a validator address to be a delegate on
 * the blockchain.
 */
class MsgCreateValidator extends json_1.JSONSerializable {
    /**
     *
     * @param description validator's delegate information
     * @param commission validator's commission policy
     * @param validator_address validator's operator address
     * @param pubkey validator's consensus public key
     * @param amount amount to use for self-delegation
     */
    constructor(description, commission, validator_address, pubkey, amount) {
        super();
        this.description = description;
        this.commission = commission;
        this.validator_address = validator_address;
        this.pubkey = pubkey;
        this.amount = new Coins_1.Coins(amount);
    }
    static fromAmino(data) {
        const { value: { description, commission, validator_address, pubkey, amount }, } = data;
        return new MsgCreateValidator(description, Validator_1.Validator.CommissionRates.fromAmino(commission), validator_address, PublicKey_1.ValConsPublicKey.fromAmino(pubkey), Coins_1.Coins.fromAmino(amount));
    }
    toAmino() {
        const { description, commission, validator_address, pubkey, amount } = this;
        return {
            type: 'mstaking/MsgCreateValidator',
            value: {
                description,
                commission: commission.toAmino(),
                validator_address,
                pubkey: pubkey.toAmino(),
                amount: amount.toAmino(),
            },
        };
    }
    static fromData(data) {
        const { description, commission, validator_address, pubkey, amount } = data;
        return new MsgCreateValidator(description, Validator_1.Validator.CommissionRates.fromData(commission), validator_address, PublicKey_1.ValConsPublicKey.fromData(pubkey), Coins_1.Coins.fromData(amount));
    }
    toData() {
        const { description, commission, validator_address, pubkey, amount } = this;
        return {
            '@type': '/initia.mstaking.v1.MsgCreateValidator',
            description,
            commission: commission.toData(),
            validator_address,
            pubkey: pubkey.toData(),
            amount: amount.toData(),
        };
    }
    static fromProto(proto) {
        return new MsgCreateValidator(Validator_1.Validator.Description.fromProto(proto.description), Validator_1.Validator.CommissionRates.fromProto(proto.commission), proto.validatorAddress, PublicKey_1.PublicKey.fromProto(proto.pubkey), Coins_1.Coins.fromProto(proto.amount));
    }
    toProto() {
        const { description, commission, validator_address, pubkey, amount } = this;
        return tx_1.MsgCreateValidator.fromPartial({
            commission: commission.toProto(),
            description: description.toProto(),
            pubkey: pubkey.packAny(),
            validatorAddress: validator_address,
            amount: amount.toProto(),
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/initia.mstaking.v1.MsgCreateValidator',
            value: tx_1.MsgCreateValidator.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgCreateValidator.fromProto(tx_1.MsgCreateValidator.decode(msgAny.value));
    }
}
exports.MsgCreateValidator = MsgCreateValidator;
//# sourceMappingURL=MsgCreateValidator.js.map