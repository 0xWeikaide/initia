"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgSoftwareUpgrade = void 0;
const json_1 = require("../../../util/json");
const Plan_1 = require("../Plan");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/cosmos/upgrade/v1beta1/tx");
/**
 * MsgSoftwareUpgrade is a governance operation for initiating a software upgrade
 */
class MsgSoftwareUpgrade extends json_1.JSONSerializable {
    /**
     *
     * @param authority the address that controls the module
     * @param plan the upgrade plan
     */
    constructor(authority, plan) {
        super();
        this.authority = authority;
        this.plan = plan;
    }
    static fromAmino(data) {
        const { value: { authority, plan }, } = data;
        return new MsgSoftwareUpgrade(authority, Plan_1.Plan.fromAmino(plan));
    }
    toAmino() {
        const { authority, plan } = this;
        return {
            type: 'cosmos-sdk/MsgSoftwareUpgrade',
            value: {
                authority,
                plan: plan.toAmino(),
            },
        };
    }
    static fromData(data) {
        const { authority, plan } = data;
        return new MsgSoftwareUpgrade(authority, Plan_1.Plan.fromData(plan));
    }
    toData() {
        const { authority, plan } = this;
        return {
            '@type': '/cosmos.upgrade.v1beta1.MsgSoftwareUpgrade',
            authority,
            plan: plan.toData(),
        };
    }
    static fromProto(proto) {
        return new MsgSoftwareUpgrade(proto.authority, Plan_1.Plan.fromProto(proto.plan));
    }
    toProto() {
        const { authority, plan } = this;
        return tx_1.MsgSoftwareUpgrade.fromPartial({
            authority,
            plan: plan.toProto(),
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/cosmos.upgrade.v1beta1.MsgSoftwareUpgrade',
            value: tx_1.MsgSoftwareUpgrade.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgSoftwareUpgrade.fromProto(tx_1.MsgSoftwareUpgrade.decode(msgAny.value));
    }
}
exports.MsgSoftwareUpgrade = MsgSoftwareUpgrade;
//# sourceMappingURL=MsgSoftwareUpgrade.js.map