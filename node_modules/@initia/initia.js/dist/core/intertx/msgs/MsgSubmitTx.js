"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgSubmitTx = void 0;
const json_1 = require("../../../util/json");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/initia/intertx/v1/tx");
const Msg_1 = require("../../Msg");
class MsgSubmitTx extends json_1.JSONSerializable {
    /**
     * @param owner
     * @param connection_id
     * @param msg
     */
    constructor(owner, connection_id, msg) {
        super();
        this.owner = owner;
        this.connection_id = connection_id;
        this.msg = msg;
    }
    static fromAmino(data) {
        const { value: { owner, connection_id, msg }, } = data;
        return new MsgSubmitTx(owner, connection_id, Msg_1.Msg.fromAmino(msg));
    }
    toAmino() {
        const { owner, connection_id, msg } = this;
        return {
            type: 'intertx/MsgSubmitTx',
            value: {
                owner,
                connection_id,
                msg: msg.toAmino(),
            },
        };
    }
    static fromData(data) {
        const { owner, connection_id, msg } = data;
        return new MsgSubmitTx(owner, connection_id, Msg_1.Msg.fromData(msg));
    }
    toData() {
        const { owner, connection_id, msg } = this;
        return {
            '@type': '/initia.intertx.v1.MsgSubmitTx',
            owner,
            connection_id,
            msg: msg.toData(),
        };
    }
    static fromProto(proto) {
        return new MsgSubmitTx(proto.owner, proto.connectionId, Msg_1.Msg.fromProto(proto.msg));
    }
    toProto() {
        const { owner, connection_id, msg } = this;
        return tx_1.MsgSubmitTx.fromPartial({
            owner,
            connectionId: connection_id,
            msg: msg.packAny(),
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/initia.intertx.v1.MsgSubmitTx',
            value: tx_1.MsgSubmitTx.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgSubmitTx.fromProto(tx_1.MsgSubmitTx.decode(msgAny.value));
    }
}
exports.MsgSubmitTx = MsgSubmitTx;
//# sourceMappingURL=MsgSubmitTx.js.map