"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuctionParams = void 0;
const json_1 = require("../../util/json");
const Coin_1 = require("../Coin");
const genesis_1 = require("@initia/initia.proto/sdk/auction/v1/genesis");
class AuctionParams extends json_1.JSONSerializable {
    /**
     * @param max_bundle_size the maximum number of transactions that can be bundled in a single bundle
     * @param escrow_account_address the address of the account that will receive a portion of the bid proceeds
     * @param reserve_fee the bid floor for the auction
     * @param min_bid_increment the minimum amount that the next bid must be greater than the previous bid
     * @param front_running_protection specifies whether front running and sandwich attack protection is enabled
     * @param proposer_fee the portion of the winning bid that goes to the block proposer that proposed the block
     */
    constructor(max_bundle_size, escrow_account_address, reserve_fee, min_bid_increment, front_running_protection, proposer_fee) {
        super();
        this.max_bundle_size = max_bundle_size;
        this.escrow_account_address = escrow_account_address;
        this.reserve_fee = reserve_fee;
        this.min_bid_increment = min_bid_increment;
        this.front_running_protection = front_running_protection;
        this.proposer_fee = proposer_fee;
    }
    static fromAmino(data) {
        const { value: { max_bundle_size, escrow_account_address, reserve_fee, min_bid_increment, front_running_protection, proposer_fee, }, } = data;
        return new AuctionParams(Number.parseInt(max_bundle_size), escrow_account_address, Coin_1.Coin.fromAmino(reserve_fee), Coin_1.Coin.fromAmino(min_bid_increment), front_running_protection, proposer_fee);
    }
    toAmino() {
        const { max_bundle_size, escrow_account_address, reserve_fee, min_bid_increment, front_running_protection, proposer_fee, } = this;
        return {
            type: 'block-sdk/x/auction/Params',
            value: {
                max_bundle_size: max_bundle_size.toString(),
                escrow_account_address,
                reserve_fee: reserve_fee.toAmino(),
                min_bid_increment: min_bid_increment.toAmino(),
                front_running_protection,
                proposer_fee,
            },
        };
    }
    static fromData(data) {
        const { max_bundle_size, escrow_account_address, reserve_fee, min_bid_increment, front_running_protection, proposer_fee, } = data;
        return new AuctionParams(Number.parseInt(max_bundle_size), escrow_account_address, Coin_1.Coin.fromData(reserve_fee), Coin_1.Coin.fromData(min_bid_increment), front_running_protection, proposer_fee);
    }
    toData() {
        const { max_bundle_size, escrow_account_address, reserve_fee, min_bid_increment, front_running_protection, proposer_fee, } = this;
        return {
            '@type': '/sdk.auction.v1.Params',
            max_bundle_size: max_bundle_size.toString(),
            escrow_account_address,
            reserve_fee: reserve_fee.toData(),
            min_bid_increment: min_bid_increment.toData(),
            front_running_protection,
            proposer_fee,
        };
    }
    static fromProto(data) {
        return new AuctionParams(data.maxBundleSize, Buffer.from(data.escrowAccountAddress).toString('base64'), Coin_1.Coin.fromProto(data.reserveFee), Coin_1.Coin.fromProto(data.minBidIncrement), data.frontRunningProtection, data.proposerFee);
    }
    toProto() {
        const { max_bundle_size, escrow_account_address, reserve_fee, min_bid_increment, front_running_protection, proposer_fee, } = this;
        return genesis_1.Params.fromPartial({
            maxBundleSize: max_bundle_size,
            escrowAccountAddress: Buffer.from(escrow_account_address, 'base64'),
            reserveFee: reserve_fee.toProto(),
            minBidIncrement: min_bid_increment.toProto(),
            frontRunningProtection: front_running_protection,
            proposerFee: proposer_fee,
        });
    }
}
exports.AuctionParams = AuctionParams;
//# sourceMappingURL=AuctionParams.js.map