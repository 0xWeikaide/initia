"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgAuctionBid = void 0;
const json_1 = require("../../../util/json");
const Coin_1 = require("../../Coin");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/sdk/auction/v1/tx");
class MsgAuctionBid extends json_1.JSONSerializable {
    /**
     * @param bidder the address of the account that is submitting a bid to the auction
     * @param bid the amount of coins that the bidder is bidding to participate in the auction
     * @param transactions the bytes of the transactions that the bidder wants to bundle together
     */
    constructor(bidder, bid, transactions) {
        super();
        this.bidder = bidder;
        this.bid = bid;
        this.transactions = transactions;
    }
    static fromAmino(data) {
        const { value: { bidder, bid, transactions }, } = data;
        return new MsgAuctionBid(bidder, Coin_1.Coin.fromAmino(bid), transactions);
    }
    toAmino() {
        const { bidder, bid, transactions } = this;
        return {
            type: 'block-sdk/x/auction/MsgAuctionBid',
            value: {
                bidder,
                bid: bid.toAmino(),
                transactions,
            },
        };
    }
    static fromData(data) {
        const { bidder, bid, transactions } = data;
        return new MsgAuctionBid(bidder, Coin_1.Coin.fromData(bid), transactions);
    }
    toData() {
        const { bidder, bid, transactions } = this;
        return {
            '@type': '/sdk.auction.v1.MsgAuctionBid',
            bidder,
            bid: bid.toData(),
            transactions,
        };
    }
    static fromProto(data) {
        return new MsgAuctionBid(data.bidder, Coin_1.Coin.fromProto(data.bid), data.transactions.map(tx => Buffer.from(tx).toString('base64')));
    }
    toProto() {
        const { bidder, bid, transactions } = this;
        return tx_1.MsgAuctionBid.fromPartial({
            bidder,
            bid: bid.toProto(),
            transactions: transactions.map(tx => Buffer.from(tx, 'base64')),
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/sdk.auction.v1.MsgAuctionBid',
            value: tx_1.MsgAuctionBid.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgAuctionBid.fromProto(tx_1.MsgAuctionBid.decode(msgAny.value));
    }
}
exports.MsgAuctionBid = MsgAuctionBid;
//# sourceMappingURL=MsgAuctionBid.js.map