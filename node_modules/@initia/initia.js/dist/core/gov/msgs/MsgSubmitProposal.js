"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgSubmitProposal = void 0;
const json_1 = require("../../../util/json");
const Msg_1 = require("../../Msg");
const Coins_1 = require("../../Coins");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/cosmos/gov/v1/tx");
class MsgSubmitProposal extends json_1.JSONSerializable {
    /**
     * @param messages the arbitrary messages to be executed if proposal passes
     * @param initial_deposit the deposit value that must be paid at proposal submission
     * @param proposer the account address of the proposer
     * @param metadata any arbitrary metadata attached to the proposal
     * @param title the title of the proposal
     * @param summary the summary of the proposal
     * @param expedited if the proposal is expedited or not
     */
    constructor(messages, initial_deposit, proposer, metadata, title, summary, expedited) {
        super();
        this.messages = messages;
        this.proposer = proposer;
        this.metadata = metadata;
        this.title = title;
        this.summary = summary;
        this.expedited = expedited;
        this.initial_deposit = new Coins_1.Coins(initial_deposit);
    }
    static fromAmino(data) {
        const { value: { messages, initial_deposit, proposer, metadata, title, summary, expedited, }, } = data;
        return new MsgSubmitProposal(messages.map(Msg_1.Msg.fromAmino), Coins_1.Coins.fromAmino(initial_deposit), proposer, metadata, title, summary, expedited);
    }
    toAmino() {
        const { messages, initial_deposit, proposer, metadata, title, summary, expedited, } = this;
        return {
            type: 'cosmos-sdk/v1/MsgSubmitProposal',
            value: {
                messages: messages.map(msg => msg.toAmino()),
                initial_deposit: initial_deposit.toAmino(),
                proposer,
                metadata,
                title,
                summary,
                expedited,
            },
        };
    }
    static fromData(data) {
        const { messages, initial_deposit, proposer, metadata, title, summary, expedited, } = data;
        return new MsgSubmitProposal(messages.map(Msg_1.Msg.fromData), Coins_1.Coins.fromData(initial_deposit), proposer, metadata, title, summary, expedited);
    }
    toData() {
        const { messages, initial_deposit, proposer, metadata, title, summary, expedited, } = this;
        return {
            '@type': '/cosmos.gov.v1.MsgSubmitProposal',
            messages: messages.map(msg => msg.toData()),
            initial_deposit: initial_deposit.toData(),
            proposer,
            metadata,
            title,
            summary,
            expedited,
        };
    }
    static fromProto(data) {
        return new MsgSubmitProposal(data.messages.map(Msg_1.Msg.fromProto), Coins_1.Coins.fromProto(data.initialDeposit), data.proposer, data.metadata, data.title, data.summary, data.expedited);
    }
    toProto() {
        const { messages, initial_deposit, proposer, metadata, title, summary, expedited, } = this;
        return tx_1.MsgSubmitProposal.fromPartial({
            messages: messages.map(msg => msg.packAny()),
            initialDeposit: initial_deposit.toProto(),
            proposer,
            metadata,
            title,
            summary,
            expedited,
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/cosmos.gov.v1.MsgSubmitProposal',
            value: tx_1.MsgSubmitProposal.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgSubmitProposal.fromProto(tx_1.MsgSubmitProposal.decode(msgAny.value));
    }
}
exports.MsgSubmitProposal = MsgSubmitProposal;
//# sourceMappingURL=MsgSubmitProposal.js.map