"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgVoteWeighted = void 0;
const json_1 = require("../../../util/json");
const Vote_1 = require("../Vote");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/cosmos/gov/v1/tx");
const long_1 = __importDefault(require("long"));
/**
 * Defines a message to cast a vote
 */
class MsgVoteWeighted extends json_1.JSONSerializable {
    /**
     * @param proposal_id the unique id of the proposal
     * @param voter the voter address for the proposal
     * @param options the weighted vote options
     * @param metadata any arbitrary metadata attached to the VoteWeighted
     */
    constructor(proposal_id, voter, options, metadata) {
        super();
        this.proposal_id = proposal_id;
        this.voter = voter;
        this.options = options;
        this.metadata = metadata;
    }
    static fromAmino(data) {
        const { value: { proposal_id, voter, options, metadata }, } = data;
        return new MsgVoteWeighted(Number.parseInt(proposal_id), voter, options.map(o => Vote_1.WeightedVoteOption.fromAmino(o)), metadata);
    }
    toAmino() {
        const { proposal_id, voter, options, metadata } = this;
        return {
            type: 'cosmos-sdk/v1/MsgVoteWeighted',
            value: {
                proposal_id: proposal_id.toFixed(),
                voter,
                options: options.map(o => o.toAmino()),
                metadata,
            },
        };
    }
    static fromData(data) {
        const { proposal_id, voter, options, metadata } = data;
        return new MsgVoteWeighted(Number.parseInt(proposal_id), voter, options.map(o => Vote_1.WeightedVoteOption.fromData(o)), metadata);
    }
    toData() {
        const { proposal_id, voter, options, metadata } = this;
        return {
            '@type': '/cosmos.gov.v1.MsgVoteWeighted',
            proposal_id: proposal_id.toFixed(),
            voter,
            options: options.map(o => o.toData()),
            metadata,
        };
    }
    static fromProto(proto) {
        return new MsgVoteWeighted(proto.proposalId.toNumber(), proto.voter, proto.options.map(o => Vote_1.WeightedVoteOption.fromProto(o)), proto.metadata);
    }
    toProto() {
        const { proposal_id, voter, options, metadata } = this;
        return tx_1.MsgVoteWeighted.fromPartial({
            options: options.map(o => o.toProto()),
            proposalId: long_1.default.fromNumber(proposal_id),
            voter,
            metadata,
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/cosmos.gov.v1.MsgVoteWeighted',
            value: tx_1.MsgVoteWeighted.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgVoteWeighted.fromProto(tx_1.MsgVoteWeighted.decode(msgAny.value));
    }
}
exports.MsgVoteWeighted = MsgVoteWeighted;
//# sourceMappingURL=MsgVoteWeighted.js.map