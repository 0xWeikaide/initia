"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgDeposit = void 0;
const Coins_1 = require("../../Coins");
const json_1 = require("../../../util/json");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/cosmos/gov/v1/tx");
const long_1 = __importDefault(require("long"));
/**
 * Defines a message to submit a deposit to an existing proposal
 */
class MsgDeposit extends json_1.JSONSerializable {
    /**
     * @param proposal_id the unique id of the proposal
     * @param depositor the deposit addresses from the proposals
     * @param amount amount to be deposited by depositor
     */
    constructor(proposal_id, depositor, amount) {
        super();
        this.proposal_id = proposal_id;
        this.depositor = depositor;
        this.amount = new Coins_1.Coins(amount);
    }
    static fromAmino(data) {
        const { value: { proposal_id, depositor, amount }, } = data;
        return new MsgDeposit(Number.parseInt(proposal_id), depositor, Coins_1.Coins.fromAmino(amount));
    }
    toAmino() {
        const { proposal_id, depositor, amount } = this;
        return {
            type: 'cosmos-sdk/v1/MsgDeposit',
            value: {
                proposal_id: proposal_id.toString(),
                depositor,
                amount: amount.toAmino(),
            },
        };
    }
    static fromData(data) {
        const { proposal_id, depositor, amount } = data;
        return new MsgDeposit(Number.parseInt(proposal_id), depositor, Coins_1.Coins.fromData(amount));
    }
    toData() {
        const { proposal_id, depositor, amount } = this;
        return {
            '@type': '/cosmos.gov.v1.MsgDeposit',
            proposal_id: proposal_id.toString(),
            depositor,
            amount: amount.toData(),
        };
    }
    static fromProto(proto) {
        return new MsgDeposit(proto.proposalId.toNumber(), proto.depositor, Coins_1.Coins.fromProto(proto.amount));
    }
    toProto() {
        const { proposal_id, depositor, amount } = this;
        return tx_1.MsgDeposit.fromPartial({
            amount: amount.toProto(),
            depositor,
            proposalId: long_1.default.fromNumber(proposal_id),
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/cosmos.gov.v1.MsgDeposit',
            value: tx_1.MsgDeposit.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgDeposit.fromProto(tx_1.MsgDeposit.decode(msgAny.value));
    }
}
exports.MsgDeposit = MsgDeposit;
//# sourceMappingURL=MsgDeposit.js.map