"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WeightedVoteOption = exports.Vote = void 0;
const json_1 = require("../../util/json");
const gov_1 = require("@initia/initia.proto/cosmos/gov/v1/gov");
const num_1 = require("../num");
const long_1 = __importDefault(require("long"));
/**
 * Defines a vote on a governance proposal
 */
class Vote extends json_1.JSONSerializable {
    /**
     * @param proposal_id the unique id of the proposal
     * @param voter the voter address of the proposal
     * @param options the weighted vote options
     * @param metadata any arbitrary metadata to attached to the vote
     */
    constructor(proposal_id, voter, options, metadata) {
        super();
        this.proposal_id = proposal_id;
        this.voter = voter;
        this.options = options;
        this.metadata = metadata;
    }
    static fromAmino(data) {
        const { proposal_id, voter, options, metadata } = data;
        return new Vote(Number.parseInt(proposal_id), voter, options.map(v => WeightedVoteOption.fromAmino(v)), metadata);
    }
    toAmino() {
        const { proposal_id, voter, options, metadata } = this;
        return {
            proposal_id: proposal_id.toString(),
            voter,
            options: options.map(v => v.toAmino()),
            metadata,
        };
    }
    static fromData(data) {
        const { proposal_id, voter, options, metadata } = data;
        return new Vote(Number.parseInt(proposal_id), voter, options.map(v => WeightedVoteOption.fromData(v)), metadata);
    }
    toData() {
        const { proposal_id, voter, options, metadata } = this;
        return {
            proposal_id: proposal_id.toString(),
            voter,
            options: options.map(v => v.toData()),
            metadata,
        };
    }
    static fromProto(proto) {
        return new Vote(proto.proposalId.toNumber(), proto.voter, proto.options.map(o => WeightedVoteOption.fromProto(o)), proto.metadata);
    }
    toProto() {
        const { proposal_id, voter, options, metadata } = this;
        return gov_1.Vote.fromPartial({
            options: options.map(o => o.toProto()),
            proposalId: long_1.default.fromNumber(proposal_id),
            voter,
            metadata,
        });
    }
}
exports.Vote = Vote;
(function (Vote) {
    Vote.Option = gov_1.VoteOption;
})(Vote || (exports.Vote = Vote = {}));
class WeightedVoteOption extends json_1.JSONSerializable {
    constructor(option, weight) {
        super();
        this.option = option;
        this.weight = (0, num_1.num)(weight).toString();
    }
    static fromAmino(data) {
        const { option, weight } = data;
        return new WeightedVoteOption(option, weight);
    }
    toAmino() {
        const { option, weight } = this;
        return {
            option,
            weight,
        };
    }
    static fromData(data) {
        const { option, weight } = data;
        return new WeightedVoteOption(option, weight);
    }
    toData() {
        const { option, weight } = this;
        return {
            option,
            weight,
        };
    }
    static fromProto(proto) {
        return new WeightedVoteOption(proto.option, proto.weight);
    }
    toProto() {
        const { option, weight } = this;
        return gov_1.WeightedVoteOption.fromPartial({
            option,
            weight,
        });
    }
}
exports.WeightedVoteOption = WeightedVoteOption;
//# sourceMappingURL=Vote.js.map