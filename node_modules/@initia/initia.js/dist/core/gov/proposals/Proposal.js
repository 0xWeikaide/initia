"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Proposal = void 0;
const json_1 = require("../../../util/json");
const Coins_1 = require("../../Coins");
const num_1 = require("../../num");
const Msg_1 = require("../../Msg");
const gov_1 = require("@initia/initia.proto/cosmos/gov/v1/gov");
const gov_2 = require("@initia/initia.proto/initia/gov/v1/gov");
const long_1 = __importDefault(require("long"));
/**
 * Defines the core field members of a governance proposal
 */
class Proposal extends json_1.JSONSerializable {
    /**
     *
     * @param id the unique id of the proposal
     * @param messages the arbitrary messages to be executed if the proposal passes
     * @param status the proposal status
     * @param final_tally_result the final tally result of the proposal
     * @param submit_time the time of proposal submission
     * @param deposit_end_time the end time for deposition
     * @param total_deposit the total deposit on the proposal
     * @param voting_start_time the starting time to vote on a proposal
     * @param voting_end_time the end time of voting on a proposal
     * @param emergency_start_time
     * @param emergency_next_tally_time
     * @param metadata any arbitrary metadata attached to the proposal
     * @param title title of the proposal
     * @param summary short summary of the proposal
     * @param proposer the address of the proposal sumbitter
     * @param expedited if the proposal is expedited
     * @param emergency
     * @param failed_reason the reason why the proposal failed
     */
    constructor(id, messages, status, final_tally_result, submit_time, deposit_end_time, total_deposit, voting_start_time, voting_end_time, emergency_start_time, emergency_next_tally_time, metadata, title, summary, proposer, expedited, emergency, failed_reason) {
        super();
        this.id = id;
        this.messages = messages;
        this.status = status;
        this.final_tally_result = final_tally_result;
        this.submit_time = submit_time;
        this.deposit_end_time = deposit_end_time;
        this.voting_start_time = voting_start_time;
        this.voting_end_time = voting_end_time;
        this.emergency_start_time = emergency_start_time;
        this.emergency_next_tally_time = emergency_next_tally_time;
        this.metadata = metadata;
        this.title = title;
        this.summary = summary;
        this.proposer = proposer;
        this.expedited = expedited;
        this.emergency = emergency;
        this.failed_reason = failed_reason;
        this.total_deposit = new Coins_1.Coins(total_deposit);
    }
    static fromAmino(data) {
        var _a, _b, _c, _d;
        const { id, messages, status, final_tally_result, submit_time, deposit_end_time, total_deposit, voting_start_time, voting_end_time, emergency_start_time, emergency_next_tally_time, metadata, title, summary, proposer, expedited, emergency, failed_reason, } = data;
        return new Proposal(Number.parseInt(id), messages.map(Msg_1.Msg.fromAmino), (0, gov_1.proposalStatusFromJSON)(status), {
            yes_count: (0, num_1.num)((_a = final_tally_result.yes_count) !== null && _a !== void 0 ? _a : 0).toFixed(0),
            no_count: (0, num_1.num)((_b = final_tally_result.no_count) !== null && _b !== void 0 ? _b : 0).toFixed(0),
            abstain_count: (0, num_1.num)((_c = final_tally_result.abstain_count) !== null && _c !== void 0 ? _c : 0).toFixed(0),
            no_with_veto_count: (0, num_1.num)((_d = final_tally_result.no_with_veto_count) !== null && _d !== void 0 ? _d : 0).toFixed(0),
        }, new Date(submit_time), new Date(deposit_end_time), Coins_1.Coins.fromAmino(total_deposit), new Date(voting_start_time), new Date(voting_end_time), new Date(emergency_start_time), new Date(emergency_next_tally_time), metadata, title, summary, proposer, expedited, emergency, failed_reason);
    }
    toAmino() {
        const { id, messages, status, final_tally_result, submit_time, deposit_end_time, total_deposit, voting_start_time, voting_end_time, emergency_start_time, emergency_next_tally_time, metadata, title, summary, proposer, expedited, emergency, failed_reason, } = this;
        return {
            id: id.toString(),
            messages: messages.map(msg => msg.toAmino()),
            status: (0, gov_1.proposalStatusToJSON)(status),
            final_tally_result: {
                yes_count: (0, num_1.num)(final_tally_result.yes_count).toFixed(),
                no_count: (0, num_1.num)(final_tally_result.no_count).toFixed(),
                abstain_count: (0, num_1.num)(final_tally_result.abstain_count).toFixed(),
                no_with_veto_count: (0, num_1.num)(final_tally_result.no_with_veto_count).toFixed(),
            },
            submit_time: submit_time.toISOString(),
            deposit_end_time: deposit_end_time.toISOString(),
            total_deposit: total_deposit.toAmino(),
            voting_start_time: voting_start_time.toISOString(),
            voting_end_time: voting_end_time.toISOString(),
            emergency_start_time: emergency_start_time.toISOString(),
            emergency_next_tally_time: emergency_next_tally_time.toISOString(),
            metadata,
            title,
            summary,
            proposer,
            expedited,
            emergency,
            failed_reason,
        };
    }
    static fromData(data) {
        var _a, _b, _c, _d;
        const { id, messages, status, final_tally_result, submit_time, deposit_end_time, total_deposit, voting_start_time, voting_end_time, emergency_start_time, emergency_next_tally_time, metadata, title, summary, proposer, expedited, emergency, failed_reason, } = data;
        return new Proposal(Number.parseInt(id), messages.map(Msg_1.Msg.fromData), (0, gov_1.proposalStatusFromJSON)(status), {
            yes_count: (0, num_1.num)((_a = final_tally_result.yes_count) !== null && _a !== void 0 ? _a : 0).toFixed(0),
            no_count: (0, num_1.num)((_b = final_tally_result.no_count) !== null && _b !== void 0 ? _b : 0).toFixed(0),
            abstain_count: (0, num_1.num)((_c = final_tally_result.abstain_count) !== null && _c !== void 0 ? _c : 0).toFixed(0),
            no_with_veto_count: (0, num_1.num)((_d = final_tally_result.no_with_veto_count) !== null && _d !== void 0 ? _d : 0).toFixed(0),
        }, new Date(submit_time), new Date(deposit_end_time), Coins_1.Coins.fromData(total_deposit), new Date(voting_start_time), new Date(voting_end_time), new Date(emergency_start_time), new Date(emergency_next_tally_time), metadata, title, summary, proposer, expedited, emergency, failed_reason);
    }
    toData() {
        const { id, messages, status, final_tally_result, submit_time, deposit_end_time, total_deposit, voting_start_time, voting_end_time, emergency_start_time, emergency_next_tally_time, metadata, title, summary, proposer, expedited, emergency, failed_reason, } = this;
        return {
            id: id.toString(),
            messages: messages.map(msg => msg.toData()),
            status: (0, gov_1.proposalStatusToJSON)(status),
            final_tally_result: {
                yes_count: (0, num_1.num)(final_tally_result.yes_count).toFixed(),
                no_count: (0, num_1.num)(final_tally_result.no_count).toFixed(),
                abstain_count: (0, num_1.num)(final_tally_result.abstain_count).toFixed(),
                no_with_veto_count: (0, num_1.num)(final_tally_result.no_with_veto_count).toFixed(),
            },
            submit_time: submit_time.toISOString(),
            deposit_end_time: deposit_end_time.toISOString(),
            total_deposit: total_deposit.toData(),
            voting_start_time: voting_start_time.toISOString(),
            voting_end_time: voting_end_time.toISOString(),
            emergency_start_time: emergency_start_time.toISOString(),
            emergency_next_tally_time: emergency_next_tally_time.toISOString(),
            metadata,
            title,
            summary,
            proposer,
            expedited,
            emergency,
            failed_reason,
        };
    }
    static fromProto(data) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        return new Proposal(data.id.toNumber(), data.messages.map(Msg_1.Msg.fromProto), data.status, {
            yes_count: (0, num_1.num)((_b = (_a = data.finalTallyResult) === null || _a === void 0 ? void 0 : _a.yesCount) !== null && _b !== void 0 ? _b : 0).toFixed(0),
            no_count: (0, num_1.num)((_d = (_c = data.finalTallyResult) === null || _c === void 0 ? void 0 : _c.noCount) !== null && _d !== void 0 ? _d : 0).toFixed(0),
            abstain_count: (0, num_1.num)((_f = (_e = data.finalTallyResult) === null || _e === void 0 ? void 0 : _e.abstainCount) !== null && _f !== void 0 ? _f : 0).toFixed(0),
            no_with_veto_count: (0, num_1.num)((_h = (_g = data.finalTallyResult) === null || _g === void 0 ? void 0 : _g.noWithVetoCount) !== null && _h !== void 0 ? _h : 0).toFixed(0),
        }, data.submitTime, data.depositEndTime, Coins_1.Coins.fromProto(data.totalDeposit), data.votingStartTime, data.votingEndTime, data.emergencyStartTime, data.emergencyNextTallyTime, data.metadata, data.title, data.summary, data.proposer, data.expedited, data.emergency, data.failedReason);
    }
    toProto() {
        const { id, messages, status, final_tally_result, submit_time, deposit_end_time, total_deposit, voting_start_time, voting_end_time, emergency_start_time, emergency_next_tally_time, metadata, title, summary, proposer, expedited, emergency, failed_reason, } = this;
        let ftr;
        if (final_tally_result) {
            ftr = gov_1.TallyResult.fromPartial({
                yesCount: final_tally_result.yes_count.toString(),
                noCount: final_tally_result.no_count.toString(),
                abstainCount: final_tally_result.abstain_count.toString(),
                noWithVetoCount: final_tally_result.no_with_veto_count.toString(),
            });
        }
        return gov_2.Proposal.fromPartial({
            id: long_1.default.fromNumber(id),
            messages: messages.map(msg => msg.packAny()),
            status,
            finalTallyResult: ftr,
            submitTime: submit_time,
            depositEndTime: deposit_end_time,
            totalDeposit: total_deposit.toProto(),
            votingStartTime: voting_start_time,
            votingEndTime: voting_end_time,
            emergencyStartTime: emergency_start_time,
            emergencyNextTallyTime: emergency_next_tally_time,
            metadata,
            title,
            summary,
            proposer,
            expedited,
            emergency,
            failedReason: failed_reason,
        });
    }
}
exports.Proposal = Proposal;
(function (Proposal) {
    Proposal.Status = gov_1.ProposalStatus;
})(Proposal || (exports.Proposal = Proposal = {}));
//# sourceMappingURL=Proposal.js.map