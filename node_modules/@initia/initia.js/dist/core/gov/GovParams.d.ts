import { JSONSerializable } from '../../util/json';
import { AccAddress } from '../bech32';
import { Coins } from '../Coins';
import { Duration } from '../Duration';
import { Params as Params_pb } from '@initia/initia.proto/initia/gov/v1/gov';
export declare class GovParams extends JSONSerializable<GovParams.Amino, GovParams.Data, GovParams.Proto> {
    max_deposit_period: Duration;
    voting_period: Duration;
    quorum: string;
    threshold: string;
    veto_threshold: string;
    min_initial_deposit_ratio: string;
    proposal_cancel_ratio: string;
    proposal_cancel_dest: AccAddress;
    expedited_voting_period: Duration;
    expedited_threshold: string;
    burn_vote_quorum: boolean;
    burn_proposal_deposit_prevote: boolean;
    burn_vote_veto: boolean;
    min_deposit_ratio: string;
    emergency_tally_interval: Duration;
    low_threshold_functions: string[];
    min_deposit: Coins;
    expedited_min_deposit: Coins;
    emergency_min_deposit: Coins;
    /**
     * @param min_deposit Minimum deposit for a proposal to enter voting period
     * @param max_deposit_period Maximum period for holders to deposit on a proposal. Initial value: 2 months
     * @param voting_period Duration of the voting period
     * @param quorum Minimum percentage of total stake needed to vote for a result to be considered valid
     * @param threshold Minimum proportion of Yes votes for proposal to pass. Default value: 0.5
     * @param veto_threshold Minimum value of Veto votes to Total votes ratio for proposal to be vetoed. Default value: 1/3
     * @param min_initial_deposit_ratio The ratio representing the proportion of the deposit value that must be paid at proposal submission
     * @param proposal_cancel_ratio The cancel ratio which will not be returned back to the depositors when a proposal is cancelled
     * @param proposal_cancel_dest The address which will receive (proposal_cancel_ratio * deposit) proposal deposits; If empty, the proposal deposits will be burned
     * @param expedited_voting_period Duration of the voting period of an expedited proposal
     * @param expedited_threshold Minimum proportion of Yes votes for proposal to pass. Default value: 0.67
     * @param expedited_min_deposit Minimum expedited deposit for a proposal to enter voting period
     * @param burn_vote_quorum burn deposits if a proposal does not meet quorum
     * @param burn_proposal_deposit_prevote burn deposits if the proposal does not enter voting period
     * @param burn_vote_veto burn deposits if quorum with vote type no_veto is met
     * @param min_deposit_ratio the proportion of the deposit value minimum that must be met when making a deposit. Default value: 0.01
     * @param emergency_min_deposit minimum deposit for a emergency proposal to enter voting period
     * @param emergency_tally_interval tally interval for emergency proposal
     * @param low_threshold_functions low threshold functions for emergency and expedited proposal
     */
    constructor(min_deposit: Coins.Input, max_deposit_period: Duration, voting_period: Duration, quorum: string, threshold: string, veto_threshold: string, min_initial_deposit_ratio: string, proposal_cancel_ratio: string, proposal_cancel_dest: AccAddress, expedited_voting_period: Duration, expedited_threshold: string, expedited_min_deposit: Coins.Input, burn_vote_quorum: boolean, burn_proposal_deposit_prevote: boolean, burn_vote_veto: boolean, min_deposit_ratio: string, emergency_min_deposit: Coins.Input, emergency_tally_interval: Duration, low_threshold_functions: string[]);
    static fromAmino(data: GovParams.Amino): GovParams;
    toAmino(): GovParams.Amino;
    static fromData(data: GovParams.Data): GovParams;
    toData(): GovParams.Data;
    static fromProto(data: GovParams.Proto): GovParams;
    toProto(): GovParams.Proto;
}
export declare namespace GovParams {
    interface Amino {
        min_deposit: Coins.Amino;
        max_deposit_period: Duration.Amino;
        voting_period: Duration.Amino;
        quorum: string;
        threshold: string;
        veto_threshold: string;
        min_initial_deposit_ratio: string;
        proposal_cancel_ratio: string;
        proposal_cancel_dest: AccAddress;
        expedited_voting_period: Duration.Amino;
        expedited_threshold: string;
        expedited_min_deposit: Coins.Amino;
        burn_vote_quorum: boolean;
        burn_proposal_deposit_prevote: boolean;
        burn_vote_veto: boolean;
        min_deposit_ratio: string;
        emergency_min_deposit: Coins.Amino;
        emergency_tally_interval: Duration.Amino;
        low_threshold_functions: string[];
    }
    interface Data {
        min_deposit: Coins.Data;
        max_deposit_period: Duration.Data;
        voting_period: Duration.Data;
        quorum: string;
        threshold: string;
        veto_threshold: string;
        min_initial_deposit_ratio: string;
        proposal_cancel_ratio: string;
        proposal_cancel_dest: AccAddress;
        expedited_voting_period: Duration.Data;
        expedited_threshold: string;
        expedited_min_deposit: Coins.Data;
        burn_vote_quorum: boolean;
        burn_proposal_deposit_prevote: boolean;
        burn_vote_veto: boolean;
        min_deposit_ratio: string;
        emergency_min_deposit: Coins.Data;
        emergency_tally_interval: Duration.Data;
        low_threshold_functions: string[];
    }
    type Proto = Params_pb;
}
