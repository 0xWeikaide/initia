"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GovParams = void 0;
const json_1 = require("../../util/json");
const Coins_1 = require("../Coins");
const Duration_1 = require("../Duration");
const gov_1 = require("@initia/initia.proto/initia/gov/v1/gov");
class GovParams extends json_1.JSONSerializable {
    /**
     * @param min_deposit Minimum deposit for a proposal to enter voting period
     * @param max_deposit_period Maximum period for holders to deposit on a proposal. Initial value: 2 months
     * @param voting_period Duration of the voting period
     * @param quorum Minimum percentage of total stake needed to vote for a result to be considered valid
     * @param threshold Minimum proportion of Yes votes for proposal to pass. Default value: 0.5
     * @param veto_threshold Minimum value of Veto votes to Total votes ratio for proposal to be vetoed. Default value: 1/3
     * @param min_initial_deposit_ratio The ratio representing the proportion of the deposit value that must be paid at proposal submission
     * @param proposal_cancel_ratio The cancel ratio which will not be returned back to the depositors when a proposal is cancelled
     * @param proposal_cancel_dest The address which will receive (proposal_cancel_ratio * deposit) proposal deposits; If empty, the proposal deposits will be burned
     * @param expedited_voting_period Duration of the voting period of an expedited proposal
     * @param expedited_threshold Minimum proportion of Yes votes for proposal to pass. Default value: 0.67
     * @param expedited_min_deposit Minimum expedited deposit for a proposal to enter voting period
     * @param burn_vote_quorum burn deposits if a proposal does not meet quorum
     * @param burn_proposal_deposit_prevote burn deposits if the proposal does not enter voting period
     * @param burn_vote_veto burn deposits if quorum with vote type no_veto is met
     * @param min_deposit_ratio the proportion of the deposit value minimum that must be met when making a deposit. Default value: 0.01
     * @param emergency_min_deposit minimum deposit for a emergency proposal to enter voting period
     * @param emergency_tally_interval tally interval for emergency proposal
     * @param low_threshold_functions low threshold functions for emergency and expedited proposal
     */
    constructor(min_deposit, max_deposit_period, voting_period, quorum, threshold, veto_threshold, min_initial_deposit_ratio, proposal_cancel_ratio, proposal_cancel_dest, expedited_voting_period, expedited_threshold, expedited_min_deposit, burn_vote_quorum, burn_proposal_deposit_prevote, burn_vote_veto, min_deposit_ratio, emergency_min_deposit, emergency_tally_interval, low_threshold_functions) {
        super();
        this.max_deposit_period = max_deposit_period;
        this.voting_period = voting_period;
        this.quorum = quorum;
        this.threshold = threshold;
        this.veto_threshold = veto_threshold;
        this.min_initial_deposit_ratio = min_initial_deposit_ratio;
        this.proposal_cancel_ratio = proposal_cancel_ratio;
        this.proposal_cancel_dest = proposal_cancel_dest;
        this.expedited_voting_period = expedited_voting_period;
        this.expedited_threshold = expedited_threshold;
        this.burn_vote_quorum = burn_vote_quorum;
        this.burn_proposal_deposit_prevote = burn_proposal_deposit_prevote;
        this.burn_vote_veto = burn_vote_veto;
        this.min_deposit_ratio = min_deposit_ratio;
        this.emergency_tally_interval = emergency_tally_interval;
        this.low_threshold_functions = low_threshold_functions;
        this.min_deposit = new Coins_1.Coins(min_deposit);
        this.expedited_min_deposit = new Coins_1.Coins(expedited_min_deposit);
        this.emergency_min_deposit = new Coins_1.Coins(emergency_min_deposit);
    }
    static fromAmino(data) {
        const { min_deposit, max_deposit_period, voting_period, quorum, threshold, veto_threshold, min_initial_deposit_ratio, proposal_cancel_ratio, proposal_cancel_dest, expedited_voting_period, expedited_threshold, expedited_min_deposit, burn_vote_quorum, burn_proposal_deposit_prevote, burn_vote_veto, min_deposit_ratio, emergency_min_deposit, emergency_tally_interval, low_threshold_functions, } = data;
        return new GovParams(Coins_1.Coins.fromAmino(min_deposit), Duration_1.Duration.fromAmino(max_deposit_period), Duration_1.Duration.fromAmino(voting_period), quorum, threshold, veto_threshold, min_initial_deposit_ratio, proposal_cancel_ratio, proposal_cancel_dest, Duration_1.Duration.fromAmino(expedited_voting_period), expedited_threshold, Coins_1.Coins.fromAmino(expedited_min_deposit), burn_vote_quorum, burn_proposal_deposit_prevote, burn_vote_veto, min_deposit_ratio, Coins_1.Coins.fromAmino(emergency_min_deposit), Duration_1.Duration.fromAmino(emergency_tally_interval), low_threshold_functions);
    }
    toAmino() {
        const { min_deposit, max_deposit_period, voting_period, quorum, threshold, veto_threshold, min_initial_deposit_ratio, proposal_cancel_ratio, proposal_cancel_dest, expedited_voting_period, expedited_threshold, expedited_min_deposit, burn_vote_quorum, burn_proposal_deposit_prevote, burn_vote_veto, min_deposit_ratio, emergency_min_deposit, emergency_tally_interval, low_threshold_functions, } = this;
        return {
            min_deposit: min_deposit.toAmino(),
            max_deposit_period: max_deposit_period.toAmino(),
            voting_period: voting_period.toAmino(),
            quorum,
            threshold,
            veto_threshold,
            min_initial_deposit_ratio,
            proposal_cancel_ratio,
            proposal_cancel_dest,
            expedited_voting_period: expedited_voting_period.toAmino(),
            expedited_threshold,
            expedited_min_deposit: expedited_min_deposit.toAmino(),
            burn_vote_quorum,
            burn_proposal_deposit_prevote,
            burn_vote_veto,
            min_deposit_ratio,
            emergency_min_deposit: emergency_min_deposit.toAmino(),
            emergency_tally_interval: emergency_tally_interval.toAmino(),
            low_threshold_functions,
        };
    }
    static fromData(data) {
        const { min_deposit, max_deposit_period, voting_period, quorum, threshold, veto_threshold, min_initial_deposit_ratio, proposal_cancel_ratio, proposal_cancel_dest, expedited_voting_period, expedited_threshold, expedited_min_deposit, burn_vote_quorum, burn_proposal_deposit_prevote, burn_vote_veto, min_deposit_ratio, emergency_min_deposit, emergency_tally_interval, low_threshold_functions, } = data;
        return new GovParams(Coins_1.Coins.fromData(min_deposit), Duration_1.Duration.fromData(max_deposit_period), Duration_1.Duration.fromData(voting_period), quorum, threshold, veto_threshold, min_initial_deposit_ratio, proposal_cancel_ratio, proposal_cancel_dest, Duration_1.Duration.fromData(expedited_voting_period), expedited_threshold, Coins_1.Coins.fromData(expedited_min_deposit), burn_vote_quorum, burn_proposal_deposit_prevote, burn_vote_veto, min_deposit_ratio, Coins_1.Coins.fromData(emergency_min_deposit), Duration_1.Duration.fromData(emergency_tally_interval), low_threshold_functions);
    }
    toData() {
        const { min_deposit, max_deposit_period, voting_period, quorum, threshold, veto_threshold, min_initial_deposit_ratio, proposal_cancel_ratio, proposal_cancel_dest, expedited_voting_period, expedited_threshold, expedited_min_deposit, burn_vote_quorum, burn_proposal_deposit_prevote, burn_vote_veto, min_deposit_ratio, emergency_min_deposit, emergency_tally_interval, low_threshold_functions, } = this;
        return {
            min_deposit: min_deposit.toData(),
            max_deposit_period: max_deposit_period.toData(),
            voting_period: voting_period.toData(),
            quorum,
            threshold,
            veto_threshold,
            min_initial_deposit_ratio,
            proposal_cancel_ratio,
            proposal_cancel_dest,
            expedited_voting_period: expedited_voting_period.toData(),
            expedited_threshold,
            expedited_min_deposit: expedited_min_deposit.toData(),
            burn_vote_quorum,
            burn_proposal_deposit_prevote,
            burn_vote_veto,
            min_deposit_ratio,
            emergency_min_deposit: emergency_min_deposit.toData(),
            emergency_tally_interval: emergency_tally_interval.toData(),
            low_threshold_functions,
        };
    }
    static fromProto(data) {
        return new GovParams(Coins_1.Coins.fromProto(data.minDeposit), Duration_1.Duration.fromProto(data.maxDepositPeriod), Duration_1.Duration.fromProto(data.votingPeriod), data.quorum, data.threshold, data.vetoThreshold, data.minInitialDepositRatio, data.proposalCancelRatio, data.proposalCancelDest, Duration_1.Duration.fromProto(data.expeditedVotingPeriod), data.expeditedThreshold, Coins_1.Coins.fromProto(data.expeditedMinDeposit), data.burnVoteQuorum, data.burnProposalDepositPrevote, data.burnVoteVeto, data.minDepositRatio, Coins_1.Coins.fromProto(data.emergencyMinDeposit), Duration_1.Duration.fromProto(data.emergencyTallyInterval), data.lowThresholdFunctions);
    }
    toProto() {
        const { min_deposit, max_deposit_period, voting_period, quorum, threshold, veto_threshold, min_initial_deposit_ratio, proposal_cancel_ratio, proposal_cancel_dest, expedited_voting_period, expedited_threshold, expedited_min_deposit, burn_vote_quorum, burn_proposal_deposit_prevote, burn_vote_veto, min_deposit_ratio, emergency_min_deposit, emergency_tally_interval, low_threshold_functions, } = this;
        return gov_1.Params.fromPartial({
            minDeposit: min_deposit.toProto(),
            maxDepositPeriod: max_deposit_period.toProto(),
            votingPeriod: voting_period.toProto(),
            quorum,
            threshold,
            vetoThreshold: veto_threshold,
            minInitialDepositRatio: min_initial_deposit_ratio,
            proposalCancelRatio: proposal_cancel_ratio,
            proposalCancelDest: proposal_cancel_dest,
            expeditedVotingPeriod: expedited_voting_period.toProto(),
            expeditedThreshold: expedited_threshold,
            expeditedMinDeposit: expedited_min_deposit.toProto(),
            burnVoteQuorum: burn_vote_quorum,
            burnProposalDepositPrevote: burn_proposal_deposit_prevote,
            burnVoteVeto: burn_vote_veto,
            minDepositRatio: min_deposit_ratio,
            emergencyMinDeposit: emergency_min_deposit.toProto(),
            emergencyTallyInterval: emergency_tally_interval.toProto(),
            lowThresholdFunctions: low_threshold_functions,
        });
    }
}
exports.GovParams = GovParams;
//# sourceMappingURL=GovParams.js.map