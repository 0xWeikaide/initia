"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModuleAccount = void 0;
const json_1 = require("../../util/json");
const BaseAccount_1 = require("./BaseAccount");
const auth_1 = require("@initia/initia.proto/cosmos/auth/v1beta1/auth");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
/**
 * Stores information about an account for modules that holds coins on a pool.
 */
class ModuleAccount extends json_1.JSONSerializable {
    /**
     *
     * @param base_account account information
     * @param name account's name
     * @param permissions account's permissions
     */
    constructor(base_account, name, permissions) {
        super();
        this.base_account = base_account;
        this.name = name;
        this.permissions = permissions;
    }
    getAccountNumber() {
        return this.base_account.account_number;
    }
    getSequenceNumber() {
        return this.base_account.sequence;
    }
    getPublicKey() {
        return this.base_account.public_key;
    }
    static fromAmino(data) {
        const { value: { base_account, name, permissions }, } = data;
        return new ModuleAccount(BaseAccount_1.BaseAccount.fromAmino({
            type: 'cosmos-sdk/BaseAccount',
            value: base_account,
        }), name, permissions);
    }
    toAmino() {
        const { base_account, name, permissions } = this;
        return {
            type: 'cosmos-sdk/ModuleAccount',
            value: {
                base_account: base_account.toAmino().value,
                name,
                permissions,
            },
        };
    }
    static fromData(data) {
        const { base_account, name, permissions } = data;
        return new ModuleAccount(BaseAccount_1.BaseAccount.fromData(Object.assign({ '@type': '/cosmos.auth.v1beta1.BaseAccount' }, base_account)), name, permissions);
    }
    toData() {
        const { base_account, name, permissions } = this;
        return {
            '@type': '/cosmos.auth.v1beta1.ModuleAccount',
            base_account: base_account.toData(),
            name,
            permissions,
        };
    }
    static fromProto(proto) {
        return new ModuleAccount(BaseAccount_1.BaseAccount.fromProto(proto.baseAccount), proto.name, proto.permissions);
    }
    toProto() {
        const { base_account, name, permissions } = this;
        return auth_1.ModuleAccount.fromPartial({
            baseAccount: base_account.toProto(),
            name,
            permissions,
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/cosmos.auth.v1beta1.ModuleAccount',
            value: auth_1.ModuleAccount.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(pubkeyAny) {
        return ModuleAccount.fromProto(auth_1.ModuleAccount.decode(pubkeyAny.value));
    }
}
exports.ModuleAccount = ModuleAccount;
//# sourceMappingURL=ModuleAccount.js.map