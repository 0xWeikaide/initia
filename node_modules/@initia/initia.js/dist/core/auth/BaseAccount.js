"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseAccount = void 0;
const PublicKey_1 = require("../PublicKey");
const json_1 = require("../../util/json");
const auth_1 = require("@initia/initia.proto/cosmos/auth/v1beta1/auth");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const long_1 = __importDefault(require("long"));
/**
 * Stores information about an account fetched from the blockchain.
 */
class BaseAccount extends json_1.JSONSerializable {
    /**
     * Creates a new Account object, holding information about a basic account.
     *
     * @param address account address
     * @param coins account's balance
     * @param public_key account's public key information
     * @param account_number account number on the blockchain
     * @param sequence sequence number, or number of transactions that have been posted
     */
    constructor(address, public_key, account_number, sequence) {
        super();
        this.address = address;
        this.public_key = public_key;
        this.account_number = account_number;
        this.sequence = sequence;
    }
    getAccountNumber() {
        return this.account_number;
    }
    getSequenceNumber() {
        return this.sequence;
    }
    getPublicKey() {
        return this.public_key;
    }
    toAmino() {
        const { address, public_key, account_number, sequence } = this;
        return {
            type: 'cosmos-sdk/BaseAccount',
            value: {
                address,
                public_key: public_key === null || public_key === void 0 ? void 0 : public_key.toAmino(),
                account_number: account_number.toFixed(),
                sequence: sequence.toFixed(),
            },
        };
    }
    static fromAmino(data) {
        var _a, _b;
        const { value: { address, public_key, account_number, sequence }, } = data;
        return new BaseAccount(address !== null && address !== void 0 ? address : '', public_key ? PublicKey_1.PublicKey.fromAmino(public_key) : undefined, (_a = Number.parseInt(account_number)) !== null && _a !== void 0 ? _a : 0, (_b = Number.parseInt(sequence)) !== null && _b !== void 0 ? _b : 0);
    }
    static fromData(data) {
        var _a, _b;
        const { address, pub_key, account_number, sequence } = data;
        return new BaseAccount(address !== null && address !== void 0 ? address : '', pub_key ? PublicKey_1.PublicKey.fromData(pub_key) : undefined, (_a = Number.parseInt(account_number)) !== null && _a !== void 0 ? _a : 0, (_b = Number.parseInt(sequence)) !== null && _b !== void 0 ? _b : 0);
    }
    toData() {
        const { address, public_key, account_number, sequence } = this;
        return {
            '@type': '/cosmos.auth.v1beta1.BaseAccount',
            address,
            pub_key: public_key === null || public_key === void 0 ? void 0 : public_key.toData(),
            account_number: account_number.toFixed(),
            sequence: sequence.toFixed(),
        };
    }
    toProto() {
        const { address, public_key, account_number, sequence } = this;
        return auth_1.BaseAccount.fromPartial({
            address,
            pubKey: public_key === null || public_key === void 0 ? void 0 : public_key.packAny(),
            accountNumber: long_1.default.fromNumber(account_number),
            sequence: long_1.default.fromNumber(sequence),
        });
    }
    static fromProto(baseAccountProto) {
        const pubkey = baseAccountProto.pubKey;
        return new BaseAccount(baseAccountProto.address, pubkey ? PublicKey_1.PublicKey.fromProto(pubkey) : undefined, baseAccountProto.accountNumber.toNumber(), baseAccountProto.sequence.toNumber());
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/cosmos.auth.v1beta1.BaseAccount',
            value: auth_1.BaseAccount.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(pubkeyAny) {
        return BaseAccount.fromProto(auth_1.BaseAccount.decode(pubkeyAny.value));
    }
}
exports.BaseAccount = BaseAccount;
//# sourceMappingURL=BaseAccount.js.map