"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Msg = void 0;
const auction_1 = require("./auction");
const auth_1 = require("./auth");
const authz_1 = require("./authz");
const bank_1 = require("./bank");
const celestia_1 = require("./celestia");
const consensus_1 = require("./consensus");
const crisis_1 = require("./crisis");
const distribution_1 = require("./distribution");
const evidence_1 = require("./evidence");
const evm_1 = require("./evm");
const feegrant_1 = require("./feegrant");
const forwarding_1 = require("./forwarding");
const gov_1 = require("./gov");
const group_1 = require("./group");
const fee_1 = require("./ibc/applications/fee");
const fetchprice_1 = require("./ibc/applications/fetchprice");
const ibchooks_1 = require("./ibchooks");
const nft_transfer_1 = require("./ibc/applications/nft-transfer");
const perm_1 = require("./ibc/applications/perm");
const transfer_1 = require("./ibc/applications/transfer");
const msgs_1 = require("./ibc/core/channel/msgs");
const msgs_2 = require("./ibc/core/client/msgs");
const msgs_3 = require("./ibc/core/connection/msgs");
const intertx_1 = require("./intertx");
const move_1 = require("./move");
const mstaking_1 = require("./mstaking");
const opchild_1 = require("./opchild");
const ophost_1 = require("./ophost");
const oracle_1 = require("./oracle");
const reward_1 = require("./reward");
const slashing_1 = require("./slashing");
const tokenfactory_1 = require("./tokenfactory");
const upgrade_1 = require("./upgrade");
const wasm_1 = require("./wasm");
var Msg;
(function (Msg) {
    function fromAmino(data) {
        switch (data.type) {
            // auction
            case 'block-sdk/x/auction/MsgAuctionBid':
                return auction_1.MsgAuctionBid.fromAmino(data);
            case 'block-sdk/x/auction/MsgUpdateParams':
                return auction_1.MsgUpdateAuctionParams.fromAmino(data);
            // auth
            case 'cosmos-sdk/x/auth/MsgUpdateParams':
                return auth_1.MsgUpdateAuthParams.fromAmino(data);
            // authz
            case 'cosmos-sdk/MsgGrant':
                return authz_1.MsgGrantAuthorization.fromAmino(data);
            case 'cosmos-sdk/MsgRevoke':
                return authz_1.MsgRevokeAuthorization.fromAmino(data);
            case 'cosmos-sdk/MsgExec':
                return authz_1.MsgExecAuthorized.fromAmino(data);
            // bank
            case 'cosmos-sdk/MsgSend':
                return bank_1.MsgSend.fromAmino(data);
            case 'cosmos-sdk/MsgMultiSend':
                return bank_1.MsgMultiSend.fromAmino(data);
            case 'cosmos-sdk/x/bank/MsgUpdateParams':
                return bank_1.MsgUpdateBankParams.fromAmino(data);
            case 'cosmos-sdk/MsgSetSendEnabled':
                return bank_1.MsgSetSendEnabled.fromAmino(data);
            case 'bank/MsgSetDenomMetadata':
                return bank_1.MsgSetDenomMetadata.fromAmino(data);
            // crisis
            case 'cosmos-sdk/MsgVerifyInvariant':
                return crisis_1.MsgVerifyInvariant.fromAmino(data);
            case 'cosmos-sdk/x/crisis/MsgUpdateParams':
                return crisis_1.MsgUpdateCrisisParams.fromAmino(data);
            // consensus
            case 'cosmos-sdk/x/consensus/MsgUpdateParams':
                return consensus_1.MsgUpdateConsensusParams.fromAmino(data);
            // distribution
            case 'cosmos-sdk/MsgModifyWithdrawAddress':
                return distribution_1.MsgSetWithdrawAddress.fromAmino(data);
            case 'cosmos-sdk/MsgWithdrawDelegationReward':
                return distribution_1.MsgWithdrawDelegatorReward.fromAmino(data);
            case 'cosmos-sdk/MsgWithdrawValidatorCommission':
                return distribution_1.MsgWithdrawValidatorCommission.fromAmino(data);
            case 'cosmos-sdk/MsgFundCommunityPool':
                return distribution_1.MsgFundCommunityPool.fromAmino(data);
            case 'distribution/MsgUpdateParams':
                return distribution_1.MsgUpdateDistrParams.fromAmino(data);
            case 'cosmos-sdk/distr/MsgCommunityPoolSpend':
                return distribution_1.MsgCommunityPoolSpend.fromAmino(data);
            case 'cosmos-sdk/distr/MsgDepositValRewards':
                return distribution_1.MsgDepositValidatorRewardsPool.fromAmino(data);
            // evidence
            case 'cosmos-sdk/MsgSubmitEvidence':
                return evidence_1.MsgSubmitEvidence.fromAmino(data);
            // evm
            case 'evm/MsgCreate':
                return evm_1.MsgCreate.fromAmino(data);
            case 'evm/MsgCall':
                return evm_1.MsgCall.fromAmino(data);
            case 'evm/MsgUpdateParams':
                return evm_1.MsgUpdateEvmParams.fromAmino(data);
            // feegrant
            case 'cosmos-sdk/MsgGrantAllowance':
                return feegrant_1.MsgGrantAllowance.fromAmino(data);
            case 'cosmos-sdk/MsgRevokeAllowance':
                return feegrant_1.MsgRevokeAllowance.fromAmino(data);
            // forwarding
            case 'noble/forwarding/RegisterAccount':
                return forwarding_1.MsgRegisterForwardingAccount.fromAmino(data);
            case 'noble/forwarding/ClearAccount':
                return forwarding_1.MsgClearForwardingAccount.fromAmino(data);
            // gov
            case 'cosmos-sdk/v1/MsgCancelProposal':
                return gov_1.MsgCancelProposal.fromAmino(data);
            case 'cosmos-sdk/MsgDeposit':
                return gov_1.MsgDepositLegacy.fromAmino(data);
            case 'cosmos-sdk/v1/MsgDeposit':
                return gov_1.MsgDeposit.fromAmino(data);
            case 'cosmos-sdk/MsgSubmitProposal':
                return gov_1.MsgSubmitProposalLegacy.fromAmino(data);
            case 'cosmos-sdk/v1/MsgSubmitProposal':
                return gov_1.MsgSubmitProposal.fromAmino(data);
            case 'cosmos-sdk/MsgVote':
                return gov_1.MsgVoteLegacy.fromAmino(data);
            case 'cosmos-sdk/v1/MsgVote':
                return gov_1.MsgVote.fromAmino(data);
            case 'cosmos-sdk/MsgVoteWeighted':
                return gov_1.MsgVoteWeightedLegacy.fromAmino(data);
            case 'cosmos-sdk/v1/MsgVoteWeighted':
                return gov_1.MsgVoteWeighted.fromAmino(data);
            case 'gov/MsgUpdateParams':
                return gov_1.MsgUpdateGovParams.fromAmino(data);
            // group
            case 'cosmos-sdk/MsgCreateGroup':
                return group_1.MsgCreateGroup.fromAmino(data);
            case 'cosmos-sdk/MsgCreateGroupPolicy':
                return group_1.MsgCreateGroupPolicy.fromAmino(data);
            case 'cosmos-sdk/MsgCreateGroupWithPolicy':
                return group_1.MsgCreateGroupWithPolicy.fromAmino(data);
            case 'cosmos-sdk/MsgUpdateGroupAdmin':
                return group_1.MsgUpdateGroupAdmin.fromAmino(data);
            case 'cosmos-sdk/MsgUpdateGroupDecisionPolicy':
                return group_1.MsgUpdateGroupDecisionPolicy.fromAmino(data);
            case 'cosmos-sdk/MsgUpdateGroupMembers':
                return group_1.MsgUpdateGroupMembers.fromAmino(data);
            case 'cosmos-sdk/MsgUpdateGroupMetadata':
                return group_1.MsgUpdateGroupMetadata.fromAmino(data);
            case 'cosmos-sdk/MsgUpdateGroupPolicyAdmin':
                return group_1.MsgUpdateGroupPolicyAdmin.fromAmino(data);
            case 'cosmos-sdk/MsgUpdateGroupPolicyMetadata':
                return group_1.MsgUpdateGroupPolicyMetadata.fromAmino(data);
            case 'cosmos-sdk/group/MsgExec':
                return group_1.MsgGroupExec.fromAmino(data);
            case 'cosmos-sdk/group/MsgLeaveGroup':
                return group_1.MsgLeaveGroup.fromAmino(data);
            case 'cosmos-sdk/group/MsgSubmitProposal':
                return group_1.MsgSubmitGroupProposal.fromAmino(data);
            case 'cosmos-sdk/group/MsgVote':
                return group_1.MsgGroupVote.fromAmino(data);
            // ibc-fetchprice
            case 'fetchprice/MsgActivate':
                return fetchprice_1.MsgActivate.fromAmino(data);
            case 'fetchprice/MsgDeactivate':
                return fetchprice_1.MsgDeactivate.fromAmino(data);
            case 'fetchprice/MsgUpdateParams':
                return fetchprice_1.MsgUpdateIbcFetchpriceParams.fromAmino(data);
            // ibc-hooks
            case 'ibchooks/MsgUpdateACL':
                return ibchooks_1.MsgUpdateACL.fromAmino(data);
            case 'ibchooks/MsgUpdateParams':
                return ibchooks_1.MsgUpdateIbcHooksParams.fromAmino(data);
            // ibc-nft-transfer
            case 'nft-transfer/MsgTransfer':
                return nft_transfer_1.MsgNftTransfer.fromAmino(data);
            case 'nft-transfer/MsgUpdateParams':
                return nft_transfer_1.MsgUpdateIbcNftParams.fromAmino(data);
            // ibc-perm
            case 'perm/MsgSetPermissionedRelayer':
                return perm_1.MsgSetPermissionedRelayer.fromAmino(data);
            // ibc-transfer
            case 'cosmos-sdk/MsgTransfer':
                return transfer_1.MsgTransfer.fromAmino(data);
            // intertx
            case 'intertx/MsgRegisterAccount':
                return intertx_1.MsgRegisterAccount.fromAmino(data);
            case 'intertx/MsgSubmitTx':
                return intertx_1.MsgSubmitTx.fromAmino(data);
            // move
            case 'move/MsgPublish':
                return move_1.MsgPublish.fromAmino(data);
            case 'move/MsgExecute':
                return move_1.MsgExecute.fromAmino(data);
            case 'move/MsgExecuteJSON':
                return move_1.MsgExecuteJSON.fromAmino(data);
            case 'move/MsgScript':
                return move_1.MsgScript.fromAmino(data);
            case 'move/MsgScriptJSON':
                return move_1.MsgScriptJSON.fromAmino(data);
            case 'move/MsgUpdateParams':
                return move_1.MsgUpdateMoveParams.fromAmino(data);
            case 'move/MsgWhitelist':
                return move_1.MsgWhitelist.fromAmino(data);
            case 'move/MsgDelist':
                return move_1.MsgDelist.fromAmino(data);
            case 'move/MsgGovExecute':
                return move_1.MsgGovExecute.fromAmino(data);
            case 'move/MsgGovExecuteJSON':
                return move_1.MsgGovExecuteJSON.fromAmino(data);
            case 'move/MsgGovPublish':
                return move_1.MsgGovPublish.fromAmino(data);
            case 'move/MsgGovScript':
                return move_1.MsgGovScript.fromAmino(data);
            case 'move/MsgGovScriptJSON':
                return move_1.MsgGovScriptJSON.fromAmino(data);
            // mstaking
            case 'mstaking/MsgDelegate':
                return mstaking_1.MsgDelegate.fromAmino(data);
            case 'mstaking/MsgUndelegate':
                return mstaking_1.MsgUndelegate.fromAmino(data);
            case 'mstaking/MsgBeginRedelegate':
                return mstaking_1.MsgBeginRedelegate.fromAmino(data);
            case 'mstaking/MsgCreateValidator':
                return mstaking_1.MsgCreateValidator.fromAmino(data);
            case 'mstaking/MsgEditValidator':
                return mstaking_1.MsgEditValidator.fromAmino(data);
            case 'mstaking/MsgUpdateParams':
                return mstaking_1.MsgUpdateMstakingParams.fromAmino(data);
            // opchild
            case 'opchild/MsgAddValidator':
                return opchild_1.MsgAddValidator.fromAmino(data);
            case 'opchild/MsgRemoveValidator':
                return opchild_1.MsgRemoveValidator.fromAmino(data);
            case 'opchild/MsgFinalizeTokenDeposit':
                return opchild_1.MsgFinalizeTokenDeposit.fromAmino(data);
            case 'opchild/MsgInitiateTokenWithdrawal':
                return opchild_1.MsgInitiateTokenWithdrawal.fromAmino(data);
            case 'opchild/MsgExecuteMessages':
                return opchild_1.MsgExecuteMessages.fromAmino(data);
            case 'opchild/MsgSpendFeePool':
                return opchild_1.MsgSpendFeePool.fromAmino(data);
            case 'opchild/MsgSetBridgeInfo':
                return opchild_1.MsgSetBridgeInfo.fromAmino(data);
            case 'opchild/MsgUpdateOracle':
                return opchild_1.MsgUpdateOracle.fromAmino(data);
            case 'opchild/MsgUpdateParams':
                return opchild_1.MsgUpdateOpchildParams.fromAmino(data);
            // ophost
            case 'ophost/MsgRecordBatch':
                return ophost_1.MsgRecordBatch.fromAmino(data);
            case 'ophost/MsgCreateBridge':
                return ophost_1.MsgCreateBridge.fromAmino(data);
            case 'ophost/MsgProposeOutput':
                return ophost_1.MsgProposeOutput.fromAmino(data);
            case 'ophost/MsgDeleteOutput':
                return ophost_1.MsgDeleteOutput.fromAmino(data);
            case 'ophost/MsgInitiateTokenDeposit':
                return ophost_1.MsgInitiateTokenDeposit.fromAmino(data);
            case 'ophost/MsgFinalizeTokenWithdrawal':
                return ophost_1.MsgFinalizeTokenWithdrawal.fromAmino(data);
            case 'ophost/MsgUpdateProposer':
                return ophost_1.MsgUpdateProposer.fromAmino(data);
            case 'ophost/MsgUpdateChallenger':
                return ophost_1.MsgUpdateChallenger.fromAmino(data);
            case 'ophost/MsgUpdateBatchInfo':
                return ophost_1.MsgUpdateBatchInfo.fromAmino(data);
            case 'ophost/MsgUpdateMetadata':
                return ophost_1.MsgUpdateMetadata.fromAmino(data);
            case 'ophost/MsgUpdateParams':
                return ophost_1.MsgUpdateOphostParams.fromAmino(data);
            // oracle
            case 'slinky/x/oracle/MsgAddCurrencyPairs':
                return oracle_1.MsgAddCurrencyPairs.fromAmino(data);
            case 'slinky/x/oracle/MsgSetCurrencyPairs':
                return oracle_1.MsgRemoveCurrencyPairs.fromAmino(data);
            // reward
            case 'reward/MsgUpdateParams':
                return reward_1.MsgUpdateRewardParams.fromAmino(data);
            // slashing
            case 'cosmos-sdk/MsgUnjail':
                return slashing_1.MsgUnjail.fromAmino(data);
            case 'cosmos-sdk/x/slashing/MsgUpdateParams':
                return slashing_1.MsgUpdateSlashingParams.fromAmino(data);
            // tokenfactory
            case 'tokenfactory/MsgCreateDenom':
                return tokenfactory_1.MsgCreateDenom.fromAmino(data);
            case 'tokenfactory/MsgMint':
                return tokenfactory_1.MsgMint.fromAmino(data);
            case 'tokenfactory/MsgBurn':
                return tokenfactory_1.MsgBurn.fromAmino(data);
            case 'tokenfactory/MsgChangeAdmin':
                return tokenfactory_1.MsgChangeAdmin.fromAmino(data);
            case 'tokenfactory/MsgSetDenomMetadata':
                return tokenfactory_1.MsgSetDenomMetadataWasm.fromAmino(data);
            case 'tokenfactory/MsgSetBeforeSendHook':
                return tokenfactory_1.MsgSetBeforeSendHook.fromAmino(data);
            case 'tokenfactory/MsgForceTransfer':
                return tokenfactory_1.MsgForceTransfer.fromAmino(data);
            case 'tokenfactory/MsgUpdateParams':
                return tokenfactory_1.MsgUpdateTokenfactoryParams.fromAmino(data);
            // upgrade
            case 'cosmos-sdk/MsgSoftwareUpgrade':
                return upgrade_1.MsgSoftwareUpgrade.fromAmino(data);
            case 'cosmos-sdk/MsgCancelUpgrade':
                return upgrade_1.MsgCancelUpgrade.fromAmino(data);
            // wasm
            case 'wasm/MsgStoreCode':
                return wasm_1.MsgStoreCode.fromAmino(data);
            case 'wasm/MsgInstantiateContract':
                return wasm_1.MsgInstantiateContract.fromAmino(data);
            case 'wasm/MsgInstantiateContract2':
                return wasm_1.MsgInstantiateContractV2.fromAmino(data);
            case 'wasm/MsgExecuteContract':
                return wasm_1.MsgExecuteContract.fromAmino(data);
            case 'wasm/MsgMigrateContract':
                return wasm_1.MsgMigrateContract.fromAmino(data);
            case 'wasm/MsgUpdateAdmin':
                return wasm_1.MsgUpdateAdmin.fromAmino(data);
            case 'wasm/MsgClearAdmin':
                return wasm_1.MsgClearAdmin.fromAmino(data);
            case 'wasm/MsgUpdateInstantiateConfig':
                return wasm_1.MsgUpdateInstantiateConfig.fromAmino(data);
            case 'wasm/MsgUpdateParams':
                return wasm_1.MsgUpdateWasmParams.fromAmino(data);
            case 'wasm/MsgSudoContract':
                return wasm_1.MsgSudoContract.fromAmino(data);
            case 'wasm/MsgPinCodes':
                return wasm_1.MsgPinCodes.fromAmino(data);
            case 'wasm/MsgUnpinCodes':
                return wasm_1.MsgUnpinCodes.fromAmino(data);
            case 'wasm/MsgStoreAndInstantiateContract':
                return wasm_1.MsgStoreAndInstantiateContract.fromAmino(data);
            case 'wasm/MsgStoreAndMigrateContract':
                return wasm_1.MsgStoreAndMigrateContract.fromAmino(data);
            case 'wasm/MsgAddCodeUploadParamsAddresses':
                return wasm_1.MsgAddCodeUploadParamsAddresses.fromAmino(data);
            case 'wasm/MsgRemoveCodeUploadParamsAddresses':
                return wasm_1.MsgRemoveCodeUploadParamsAddresses.fromAmino(data);
            case 'wasm/MsgUpdateContractLabel':
                return wasm_1.MsgUpdateContractLabel.fromAmino(data);
        }
    }
    Msg.fromAmino = fromAmino;
    function fromData(data) {
        switch (data['@type']) {
            // auction
            case '/sdk.auction.v1.MsgAuctionBid':
                return auction_1.MsgAuctionBid.fromData(data);
            case '/sdk.auction.v1.MsgUpdateParams':
                return auction_1.MsgUpdateAuctionParams.fromData(data);
            //auth
            case '/cosmos.auth.v1beta1.MsgUpdateParams':
                return auth_1.MsgUpdateAuthParams.fromData(data);
            // authz
            case '/cosmos.authz.v1beta1.MsgGrant':
                return authz_1.MsgGrantAuthorization.fromData(data);
            case '/cosmos.authz.v1beta1.MsgRevoke':
                return authz_1.MsgRevokeAuthorization.fromData(data);
            case '/cosmos.authz.v1beta1.MsgExec':
                return authz_1.MsgExecAuthorized.fromData(data);
            // bank
            case '/cosmos.bank.v1beta1.MsgSend':
                return bank_1.MsgSend.fromData(data);
            case '/cosmos.bank.v1beta1.MsgMultiSend':
                return bank_1.MsgMultiSend.fromData(data);
            case '/cosmos.bank.v1beta1.MsgUpdateParams':
                return bank_1.MsgUpdateBankParams.fromData(data);
            case '/cosmos.bank.v1beta1.MsgSetSendEnabled':
                return bank_1.MsgSetSendEnabled.fromData(data);
            case '/initia.bank.v1.MsgSetDenomMetadata':
                return bank_1.MsgSetDenomMetadata.fromData(data);
            // celestia
            case '/celestia.blob.v1.MsgPayForBlobs':
                return celestia_1.MsgPayForBlobs.fromData(data);
            // consensus
            case '/cosmos.consensus.v1.MsgUpdateParams':
                return consensus_1.MsgUpdateConsensusParams.fromData(data);
            // crisis
            case '/cosmos.crisis.v1beta1.MsgVerifyInvariant':
                return crisis_1.MsgVerifyInvariant.fromData(data);
            case '/cosmos.crisis.v1beta1.MsgUpdateParams':
                return crisis_1.MsgUpdateCrisisParams.fromData(data);
            // distribution
            case '/cosmos.distribution.v1beta1.MsgSetWithdrawAddress':
                return distribution_1.MsgSetWithdrawAddress.fromData(data);
            case '/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward':
                return distribution_1.MsgWithdrawDelegatorReward.fromData(data);
            case '/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission':
                return distribution_1.MsgWithdrawValidatorCommission.fromData(data);
            case '/cosmos.distribution.v1beta1.MsgFundCommunityPool':
                return distribution_1.MsgFundCommunityPool.fromData(data);
            case '/initia.distribution.v1.MsgUpdateParams':
                return distribution_1.MsgUpdateDistrParams.fromData(data);
            case '/cosmos.distribution.v1beta1.MsgCommunityPoolSpend':
                return distribution_1.MsgCommunityPoolSpend.fromData(data);
            case '/initia.distribution.v1.MsgDepositValidatorRewardsPool':
                return distribution_1.MsgDepositValidatorRewardsPool.fromData(data);
            // evidence
            case '/cosmos.evidence.v1beta1.MsgSubmitEvidence':
                return evidence_1.MsgSubmitEvidence.fromData(data);
            // evm
            case '/minievm.evm.v1.MsgCreate':
                return evm_1.MsgCreate.fromData(data);
            case '/minievm.evm.v1.MsgCall':
                return evm_1.MsgCall.fromData(data);
            case '/minievm.evm.v1.MsgUpdateParams':
                return evm_1.MsgUpdateEvmParams.fromData(data);
            // feegrant
            case '/cosmos.feegrant.v1beta1.MsgGrantAllowance':
                return feegrant_1.MsgGrantAllowance.fromData(data);
            case '/cosmos.feegrant.v1beta1.MsgRevokeAllowance':
                return feegrant_1.MsgRevokeAllowance.fromData(data);
            // forwarding
            case '/noble.forwarding.v1.MsgRegisterAccount':
                return forwarding_1.MsgRegisterForwardingAccount.fromData(data);
            case '/noble.forwarding.v1.MsgClearAccount':
                return forwarding_1.MsgClearForwardingAccount.fromData(data);
            // gov
            case '/cosmos.gov.v1.MsgCancelProposal':
                return gov_1.MsgCancelProposal.fromData(data);
            case '/cosmos.gov.v1beta1.MsgDeposit':
                return gov_1.MsgDepositLegacy.fromData(data);
            case '/cosmos.gov.v1.MsgDeposit':
                return gov_1.MsgDeposit.fromData(data);
            case '/cosmos.gov.v1beta1.MsgSubmitProposal':
                return gov_1.MsgSubmitProposalLegacy.fromData(data);
            case '/cosmos.gov.v1.MsgSubmitProposal':
                return gov_1.MsgSubmitProposal.fromData(data);
            case '/cosmos.gov.v1beta1.MsgVote':
                return gov_1.MsgVoteLegacy.fromData(data);
            case '/cosmos.gov.v1.MsgVote':
                return gov_1.MsgVote.fromData(data);
            case '/cosmos.gov.v1beta1.MsgVoteWeighted':
                return gov_1.MsgVoteWeightedLegacy.fromData(data);
            case '/cosmos.gov.v1.MsgVoteWeighted':
                return gov_1.MsgVoteWeighted.fromData(data);
            case '/initia.gov.v1.MsgUpdateParams':
                return gov_1.MsgUpdateGovParams.fromData(data);
            // group
            case '/cosmos.group.v1.MsgCreateGroup':
                return group_1.MsgCreateGroup.fromData(data);
            case '/cosmos.group.v1.MsgCreateGroupPolicy':
                return group_1.MsgCreateGroupPolicy.fromData(data);
            case '/cosmos.group.v1.MsgCreateGroupWithPolicy':
                return group_1.MsgCreateGroupWithPolicy.fromData(data);
            case '/cosmos.group.v1.MsgExec':
                return group_1.MsgGroupExec.fromData(data);
            case '/cosmos.group.v1.MsgLeaveGroup':
                return group_1.MsgLeaveGroup.fromData(data);
            case '/cosmos.group.v1.MsgSubmitProposal':
                return group_1.MsgSubmitGroupProposal.fromData(data);
            case '/cosmos.group.v1.MsgUpdateGroupAdmin':
                return group_1.MsgUpdateGroupAdmin.fromData(data);
            case '/cosmos.group.v1.MsgUpdateGroupMembers':
                return group_1.MsgUpdateGroupMembers.fromData(data);
            case '/cosmos.group.v1.MsgUpdateGroupMetadata':
                return group_1.MsgUpdateGroupMetadata.fromData(data);
            case '/cosmos.group.v1.MsgUpdateGroupPolicyAdmin':
                return group_1.MsgUpdateGroupPolicyAdmin.fromData(data);
            case '/cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy':
                return group_1.MsgUpdateGroupDecisionPolicy.fromData(data);
            case '/cosmos.group.v1.MsgUpdateGroupPolicyMetadata':
                return group_1.MsgUpdateGroupPolicyMetadata.fromData(data);
            case '/cosmos.group.v1.MsgVote':
                return group_1.MsgGroupVote.fromData(data);
            // ibc-fee
            case '/ibc.applications.fee.v1.MsgPayPacketFee':
                return fee_1.MsgPayPacketFee.fromData(data);
            case '/ibc.applications.fee.v1.MsgPayPacketFeeAsync':
                return fee_1.MsgPayPacketFeeAsync.fromData(data);
            case '/ibc.applications.fee.v1.MsgRegisterCounterpartyPayee':
                return fee_1.MsgRegisterCounterpartyPayee.fromData(data);
            case '/ibc.applications.fee.v1.MsgRegisterPayee':
                return fee_1.MsgRegisterPayee.fromData(data);
            // ibc-fetchprice
            case '/ibc.applications.fetchprice.v1.MsgActivate':
                return fetchprice_1.MsgActivate.fromData(data);
            case '/ibc.applications.fetchprice.v1.MsgDeactivate':
                return fetchprice_1.MsgDeactivate.fromData(data);
            case '/ibc.applications.fetchprice.v1.MsgUpdateParams':
                return fetchprice_1.MsgUpdateIbcFetchpriceParams.fromData(data);
            // ibc-hooks
            case '/initia.ibchooks.v1.MsgUpdateACL':
                return ibchooks_1.MsgUpdateACL.fromData(data);
            case '/initia.ibchooks.v1.MsgUpdateParams':
                return ibchooks_1.MsgUpdateIbcHooksParams.fromData(data);
            // ibc-nft-transfer
            case '/ibc.applications.nft_transfer.v1.MsgTransfer':
                return nft_transfer_1.MsgNftTransfer.fromData(data);
            case '/ibc.applications.nft_transfer.v1.MsgUpdateParams':
                return nft_transfer_1.MsgUpdateIbcNftParams.fromData(data);
            // ibc-perm
            case '/ibc.applications.perm.v1.MsgSetPermissionedRelayer':
                return perm_1.MsgSetPermissionedRelayer.fromData(data);
            // ibc-transfer
            case '/ibc.applications.transfer.v1.MsgTransfer':
                return transfer_1.MsgTransfer.fromData(data);
            case '/ibc.applications.transfer.v1.MsgUpdateParams':
                return transfer_1.MsgUpdateIbcTransferParams.fromData(data);
            // ibc-channel
            case '/ibc.core.channel.v1.MsgChannelOpenInit':
                return msgs_1.MsgChannelOpenInit.fromData(data);
            case '/ibc.core.channel.v1.MsgChannelOpenTry':
                return msgs_1.MsgChannelOpenTry.fromData(data);
            case '/ibc.core.channel.v1.MsgChannelOpenConfirm':
                return msgs_1.MsgChannelOpenConfirm.fromData(data);
            case '/ibc.core.channel.v1.MsgChannelOpenAck':
                return msgs_1.MsgChannelOpenAck.fromData(data);
            case '/ibc.core.channel.v1.MsgChannelCloseInit':
                return msgs_1.MsgChannelCloseInit.fromData(data);
            case '/ibc.core.channel.v1.MsgChannelCloseConfirm':
                return msgs_1.MsgChannelCloseConfirm.fromData(data);
            case '/ibc.core.channel.v1.MsgRecvPacket':
                return msgs_1.MsgRecvPacket.fromData(data);
            case '/ibc.core.channel.v1.MsgAcknowledgement':
                return msgs_1.MsgAcknowledgement.fromData(data);
            case '/ibc.core.channel.v1.MsgTimeout':
                return msgs_1.MsgTimeout.fromData(data);
            case '/ibc.core.channel.v1.MsgTimeoutOnClose':
                return msgs_1.MsgTimeoutOnClose.fromData(data);
            case '/ibc.core.channel.v1.MsgUpdateParams':
                return msgs_1.MsgUpdateIbcChannelParams.fromData(data);
            // ibc-client
            case '/ibc.core.client.v1.MsgCreateClient':
                return msgs_2.MsgCreateClient.fromData(data);
            case '/ibc.core.client.v1.MsgUpdateClient':
                return msgs_2.MsgUpdateClient.fromData(data);
            case '/ibc.core.client.v1.MsgUpgradeClient':
                return msgs_2.MsgUpgradeClient.fromData(data);
            case '/ibc.core.client.v1.MsgSubmitMisbehaviour':
                return msgs_2.MsgSubmitMisbehaviour.fromData(data);
            case '/ibc.core.client.v1.MsgRecoverClient':
                return msgs_2.MsgRecoverClient.fromData(data);
            case '/ibc.core.client.v1.MsgIBCSoftwareUpgrade':
                return msgs_2.MsgIBCSoftwareUpgrade.fromData(data);
            case '/ibc.core.client.v1.MsgUpdateParams':
                return msgs_2.MsgUpdateIbcClientParams.fromData(data);
            // ibc-connection
            case '/ibc.core.connection.v1.MsgConnectionOpenInit':
                return msgs_3.MsgConnectionOpenInit.fromData(data);
            case '/ibc.core.connection.v1.MsgConnectionOpenTry':
                return msgs_3.MsgConnectionOpenTry.fromData(data);
            case '/ibc.core.connection.v1.MsgConnectionOpenConfirm':
                return msgs_3.MsgConnectionOpenConfirm.fromData(data);
            case '/ibc.core.connection.v1.MsgConnectionOpenAck':
                return msgs_3.MsgConnectionOpenAck.fromData(data);
            case '/ibc.core.connection.v1.MsgUpdateParams':
                return msgs_3.MsgUpdateIbcConnectionParams.fromData(data);
            // intertx
            case '/initia.intertx.v1.MsgRegisterAccount':
                return intertx_1.MsgRegisterAccount.fromData(data);
            case '/initia.intertx.v1.MsgSubmitTx':
                return intertx_1.MsgSubmitTx.fromData(data);
            // move
            case '/initia.move.v1.MsgPublish':
                return move_1.MsgPublish.fromData(data);
            case '/initia.move.v1.MsgExecute':
                return move_1.MsgExecute.fromData(data);
            case '/initia.move.v1.MsgExecuteJSON':
                return move_1.MsgExecuteJSON.fromData(data);
            case '/initia.move.v1.MsgScript':
                return move_1.MsgScript.fromData(data);
            case '/initia.move.v1.MsgScriptJSON':
                return move_1.MsgScriptJSON.fromData(data);
            case '/initia.move.v1.MsgUpdateParams':
                return move_1.MsgUpdateMoveParams.fromData(data);
            case '/initia.move.v1.MsgWhitelist':
                return move_1.MsgWhitelist.fromData(data);
            case '/initia.move.v1.MsgDelist':
                return move_1.MsgDelist.fromData(data);
            case '/initia.move.v1.MsgGovExecute':
                return move_1.MsgGovExecute.fromData(data);
            case '/initia.move.v1.MsgGovExecuteJSON':
                return move_1.MsgGovExecuteJSON.fromData(data);
            case '/initia.move.v1.MsgGovPublish':
                return move_1.MsgGovPublish.fromData(data);
            case '/initia.move.v1.MsgGovScript':
                return move_1.MsgGovScript.fromData(data);
            case '/initia.move.v1.MsgGovScriptJSON':
                return move_1.MsgGovScriptJSON.fromData(data);
            // mstaking
            case '/initia.mstaking.v1.MsgDelegate':
                return mstaking_1.MsgDelegate.fromData(data);
            case '/initia.mstaking.v1.MsgUndelegate':
                return mstaking_1.MsgUndelegate.fromData(data);
            case '/initia.mstaking.v1.MsgBeginRedelegate':
                return mstaking_1.MsgBeginRedelegate.fromData(data);
            case '/initia.mstaking.v1.MsgCreateValidator':
                return mstaking_1.MsgCreateValidator.fromData(data);
            case '/initia.mstaking.v1.MsgEditValidator':
                return mstaking_1.MsgEditValidator.fromData(data);
            case '/initia.mstaking.v1.MsgUpdateParams':
                return mstaking_1.MsgUpdateMstakingParams.fromData(data);
            // opchild
            case '/opinit.opchild.v1.MsgAddValidator':
                return opchild_1.MsgAddValidator.fromData(data);
            case '/opinit.opchild.v1.MsgRemoveValidator':
                return opchild_1.MsgRemoveValidator.fromData(data);
            case '/opinit.opchild.v1.MsgFinalizeTokenDeposit':
                return opchild_1.MsgFinalizeTokenDeposit.fromData(data);
            case '/opinit.opchild.v1.MsgInitiateTokenWithdrawal':
                return opchild_1.MsgInitiateTokenWithdrawal.fromData(data);
            case '/opinit.opchild.v1.MsgExecuteMessages':
                return opchild_1.MsgExecuteMessages.fromData(data);
            case '/opinit.opchild.v1.MsgSpendFeePool':
                return opchild_1.MsgSpendFeePool.fromData(data);
            case '/opinit.opchild.v1.MsgSetBridgeInfo':
                return opchild_1.MsgSetBridgeInfo.fromData(data);
            case '/opinit.opchild.v1.MsgUpdateOracle':
                return opchild_1.MsgUpdateOracle.fromData(data);
            case '/opinit.opchild.v1.MsgUpdateParams':
                return opchild_1.MsgUpdateOpchildParams.fromData(data);
            // ophost
            case '/opinit.ophost.v1.MsgRecordBatch':
                return ophost_1.MsgRecordBatch.fromData(data);
            case '/opinit.ophost.v1.MsgCreateBridge':
                return ophost_1.MsgCreateBridge.fromData(data);
            case '/opinit.ophost.v1.MsgProposeOutput':
                return ophost_1.MsgProposeOutput.fromData(data);
            case '/opinit.ophost.v1.MsgDeleteOutput':
                return ophost_1.MsgDeleteOutput.fromData(data);
            case '/opinit.ophost.v1.MsgInitiateTokenDeposit':
                return ophost_1.MsgInitiateTokenDeposit.fromData(data);
            case '/opinit.ophost.v1.MsgFinalizeTokenWithdrawal':
                return ophost_1.MsgFinalizeTokenWithdrawal.fromData(data);
            case '/opinit.ophost.v1.MsgUpdateProposer':
                return ophost_1.MsgUpdateProposer.fromData(data);
            case '/opinit.ophost.v1.MsgUpdateChallenger':
                return ophost_1.MsgUpdateChallenger.fromData(data);
            case '/opinit.ophost.v1.MsgUpdateBatchInfo':
                return ophost_1.MsgUpdateBatchInfo.fromData(data);
            case '/opinit.ophost.v1.MsgUpdateMetadata':
                return ophost_1.MsgUpdateMetadata.fromData(data);
            case '/opinit.ophost.v1.MsgUpdateParams':
                return ophost_1.MsgUpdateOphostParams.fromData(data);
            // oracle
            case '/slinky.oracle.v1.MsgAddCurrencyPairs':
                return oracle_1.MsgAddCurrencyPairs.fromData(data);
            case '/slinky.oracle.v1.MsgRemoveCurrencyPairs':
                return oracle_1.MsgRemoveCurrencyPairs.fromData(data);
            // reward
            case '/initia.reward.v1.MsgUpdateParams':
                return reward_1.MsgUpdateRewardParams.fromData(data);
            // slashing
            case '/cosmos.slashing.v1beta1.MsgUnjail':
                return slashing_1.MsgUnjail.fromData(data);
            case '/cosmos.slashing.v1beta1.MsgUpdateParams':
                return slashing_1.MsgUpdateSlashingParams.fromData(data);
            // tokenfactory
            case '/miniwasm.tokenfactory.v1.MsgCreateDenom':
                return tokenfactory_1.MsgCreateDenom.fromData(data);
            case '/miniwasm.tokenfactory.v1.MsgMint':
                return tokenfactory_1.MsgMint.fromData(data);
            case '/miniwasm.tokenfactory.v1.MsgBurn':
                return tokenfactory_1.MsgBurn.fromData(data);
            case '/miniwasm.tokenfactory.v1.MsgChangeAdmin':
                return tokenfactory_1.MsgChangeAdmin.fromData(data);
            case '/miniwasm.tokenfactory.v1.MsgSetDenomMetadata':
                return tokenfactory_1.MsgSetDenomMetadataWasm.fromData(data);
            case '/miniwasm.tokenfactory.v1.MsgSetBeforeSendHook':
                return tokenfactory_1.MsgSetBeforeSendHook.fromData(data);
            case '/miniwasm.tokenfactory.v1.MsgForceTransfer':
                return tokenfactory_1.MsgForceTransfer.fromData(data);
            case '/miniwasm.tokenfactory.v1.MsgUpdateParams':
                return tokenfactory_1.MsgUpdateTokenfactoryParams.fromData(data);
            // upgrade
            case '/cosmos.upgrade.v1beta1.MsgSoftwareUpgrade':
                return upgrade_1.MsgSoftwareUpgrade.fromData(data);
            case '/cosmos.upgrade.v1beta1.MsgCancelUpgrade':
                return upgrade_1.MsgCancelUpgrade.fromData(data);
            // wasm
            case '/cosmwasm.wasm.v1.MsgStoreCode':
                return wasm_1.MsgStoreCode.fromData(data);
            case '/cosmwasm.wasm.v1.MsgInstantiateContract':
                return wasm_1.MsgInstantiateContract.fromData(data);
            case '/cosmwasm.wasm.v1.MsgInstantiateContract2':
                return wasm_1.MsgInstantiateContractV2.fromData(data);
            case '/cosmwasm.wasm.v1.MsgExecuteContract':
                return wasm_1.MsgExecuteContract.fromData(data);
            case '/cosmwasm.wasm.v1.MsgMigrateContract':
                return wasm_1.MsgMigrateContract.fromData(data);
            case '/cosmwasm.wasm.v1.MsgUpdateAdmin':
                return wasm_1.MsgUpdateAdmin.fromData(data);
            case '/cosmwasm.wasm.v1.MsgClearAdmin':
                return wasm_1.MsgClearAdmin.fromData(data);
            case '/cosmwasm.wasm.v1.MsgUpdateInstantiateConfig':
                return wasm_1.MsgUpdateInstantiateConfig.fromData(data);
            case '/cosmwasm.wasm.v1.MsgUpdateParams':
                return wasm_1.MsgUpdateWasmParams.fromData(data);
            case '/cosmwasm.wasm.v1.MsgSudoContract':
                return wasm_1.MsgSudoContract.fromData(data);
            case '/cosmwasm.wasm.v1.MsgPinCodes':
                return wasm_1.MsgPinCodes.fromData(data);
            case '/cosmwasm.wasm.v1.MsgUnpinCodes':
                return wasm_1.MsgUnpinCodes.fromData(data);
            case '/cosmwasm.wasm.v1.MsgStoreAndInstantiateContract':
                return wasm_1.MsgStoreAndInstantiateContract.fromData(data);
            case '/cosmwasm.wasm.v1.MsgStoreAndMigrateContract':
                return wasm_1.MsgStoreAndMigrateContract.fromData(data);
            case '/cosmwasm.wasm.v1.MsgAddCodeUploadParamsAddresses':
                return wasm_1.MsgAddCodeUploadParamsAddresses.fromData(data);
            case '/cosmwasm.wasm.v1.MsgRemoveCodeUploadParamsAddresses':
                return wasm_1.MsgRemoveCodeUploadParamsAddresses.fromData(data);
            case '/cosmwasm.wasm.v1.MsgUpdateContractLabel':
                return wasm_1.MsgUpdateContractLabel.fromData(data);
            default:
                throw new Error(`not supported msg ${data['@type']}`);
        }
    }
    Msg.fromData = fromData;
    function fromProto(proto) {
        switch (proto.typeUrl) {
            // auction
            case '/sdk.auction.v1.MsgAuctionBid':
                return auction_1.MsgAuctionBid.unpackAny(proto);
            case '/sdk.auction.v1.MsgUpdateParams':
                return auction_1.MsgUpdateAuctionParams.unpackAny(proto);
            // auth
            case '/cosmos.auth.v1beta1.MsgUpdateParams':
                return auth_1.MsgUpdateAuthParams.unpackAny(proto);
            // authz
            case '/cosmos.authz.v1beta1.MsgGrant':
                return authz_1.MsgGrantAuthorization.unpackAny(proto);
            case '/cosmos.authz.v1beta1.MsgRevoke':
                return authz_1.MsgRevokeAuthorization.unpackAny(proto);
            case '/cosmos.authz.v1beta1.MsgExec':
                return authz_1.MsgExecAuthorized.unpackAny(proto);
            // bank
            case '/cosmos.bank.v1beta1.MsgSend':
                return bank_1.MsgSend.unpackAny(proto);
            case '/cosmos.bank.v1beta1.MsgMultiSend':
                return bank_1.MsgMultiSend.unpackAny(proto);
            case '/cosmos.bank.v1beta1.MsgUpdateParams':
                return bank_1.MsgUpdateBankParams.unpackAny(proto);
            case '/cosmos.bank.v1beta1.MsgSetSendEnabled':
                return bank_1.MsgSetSendEnabled.unpackAny(proto);
            case '/initia.bank.v1.MsgSetDenomMetadata':
                return bank_1.MsgSetDenomMetadata.unpackAny(proto);
            // celestia
            case '/celestia.blob.v1.MsgPayForBlobs':
                return celestia_1.MsgPayForBlobs.unpackAny(proto);
            // consensus
            case '/cosmos.consensus.v1.MsgUpdateParams':
                return consensus_1.MsgUpdateConsensusParams.unpackAny(proto);
            // crisis
            case '/cosmos.crisis.v1beta1.MsgVerifyInvariant':
                return crisis_1.MsgVerifyInvariant.unpackAny(proto);
            case '/cosmos.crisis.v1beta1.MsgUpdateParams':
                return crisis_1.MsgUpdateCrisisParams.unpackAny(proto);
            // distribution
            case '/cosmos.distribution.v1beta1.MsgSetWithdrawAddress':
                return distribution_1.MsgSetWithdrawAddress.unpackAny(proto);
            case '/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward':
                return distribution_1.MsgWithdrawDelegatorReward.unpackAny(proto);
            case '/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission':
                return distribution_1.MsgWithdrawValidatorCommission.unpackAny(proto);
            case '/cosmos.distribution.v1beta1.MsgFundCommunityPool':
                return distribution_1.MsgFundCommunityPool.unpackAny(proto);
            case '/initia.distribution.v1.MsgUpdateParams':
                return distribution_1.MsgUpdateDistrParams.unpackAny(proto);
            case '/cosmos.distribution.v1beta1.MsgCommunityPoolSpend':
                return distribution_1.MsgCommunityPoolSpend.unpackAny(proto);
            case '/initia.distribution.v1.MsgDepositValidatorRewardsPool':
                return distribution_1.MsgDepositValidatorRewardsPool.unpackAny(proto);
            // evidence
            case '/cosmos.evidence.v1beta1.MsgSubmitEvidence':
                return evidence_1.MsgSubmitEvidence.unpackAny(proto);
            // evm
            case '/minievm.evm.v1.MsgCreate':
                return evm_1.MsgCreate.unpackAny(proto);
            case '/minievm.evm.v1.MsgCall':
                return evm_1.MsgCall.unpackAny(proto);
            case '/minievm.evm.v1.MsgUpdateParams':
                return evm_1.MsgUpdateEvmParams.unpackAny(proto);
            // feegrant
            case '/cosmos.feegrant.v1beta1.MsgGrantAllowance':
                return feegrant_1.MsgGrantAllowance.unpackAny(proto);
            case '/cosmos.feegrant.v1beta1.MsgRevokeAllowance':
                return feegrant_1.MsgRevokeAllowance.unpackAny(proto);
            // forwarding
            case '/noble.forwarding.v1.MsgRegisterAccount':
                return forwarding_1.MsgRegisterForwardingAccount.unpackAny(proto);
            case '/noble.forwarding.v1.MsgClearAccount':
                return forwarding_1.MsgClearForwardingAccount.unpackAny(proto);
            // gov
            case '/cosmos.gov.v1.MsgCancelProposal':
                return gov_1.MsgCancelProposal.unpackAny(proto);
            case '/cosmos.gov.v1beta1.MsgDeposit':
                return gov_1.MsgDepositLegacy.unpackAny(proto);
            case '/cosmos.gov.v1.MsgDeposit':
                return gov_1.MsgDeposit.unpackAny(proto);
            case '/cosmos.gov.v1beta1.MsgSubmitProposal':
                return gov_1.MsgSubmitProposalLegacy.unpackAny(proto);
            case '/cosmos.gov.v1.MsgSubmitProposal':
                return gov_1.MsgSubmitProposal.unpackAny(proto);
            case '/cosmos.gov.v1beta1.MsgVote':
                return gov_1.MsgVoteLegacy.unpackAny(proto);
            case '/cosmos.gov.v1.MsgVote':
                return gov_1.MsgVote.unpackAny(proto);
            case '/cosmos.gov.v1beta1.MsgVoteWeighted':
                return gov_1.MsgVoteWeightedLegacy.unpackAny(proto);
            case '/cosmos.gov.v1.MsgVoteWeighted':
                return gov_1.MsgVoteWeighted.unpackAny(proto);
            case '/initia.gov.v1.MsgUpdateParams':
                return gov_1.MsgUpdateGovParams.unpackAny(proto);
            // group
            case '/cosmos.group.v1.MsgCreateGroup':
                return group_1.MsgCreateGroup.unpackAny(proto);
            case '/cosmos.group.v1.MsgCreateGroupPolicy':
                return group_1.MsgCreateGroupPolicy.unpackAny(proto);
            case '/cosmos.group.v1.MsgCreateGroupWithPolicy':
                return group_1.MsgCreateGroupWithPolicy.unpackAny(proto);
            case '/cosmos.group.v1.MsgExec':
                return group_1.MsgGroupExec.unpackAny(proto);
            case '/cosmos.group.v1.MsgLeaveGroup':
                return group_1.MsgLeaveGroup.unpackAny(proto);
            case '/cosmos.group.v1.MsgSubmitProposal':
                return group_1.MsgSubmitGroupProposal.unpackAny(proto);
            case '/cosmos.group.v1.MsgUpdateGroupAdmin':
                return group_1.MsgUpdateGroupAdmin.unpackAny(proto);
            case '/cosmos.group.v1.MsgUpdateGroupMembers':
                return group_1.MsgUpdateGroupMembers.unpackAny(proto);
            case '/cosmos.group.v1.MsgUpdateGroupMetadata':
                return group_1.MsgUpdateGroupMetadata.unpackAny(proto);
            case '/cosmos.group.v1.MsgUpdateGroupPolicyAdmin':
                return group_1.MsgUpdateGroupPolicyAdmin.unpackAny(proto);
            case '/cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy':
                return group_1.MsgUpdateGroupDecisionPolicy.unpackAny(proto);
            case '/cosmos.group.v1.MsgUpdateGroupPolicyMetadata':
                return group_1.MsgUpdateGroupPolicyMetadata.unpackAny(proto);
            case '/cosmos.group.v1.MsgVote':
                return group_1.MsgGroupVote.unpackAny(proto);
            // ibc-fee
            case '/ibc.applications.fee.v1.MsgPayPacketFee':
                return fee_1.MsgPayPacketFee.unpackAny(proto);
            case '/ibc.applications.fee.v1.MsgPayPacketFeeAsync':
                return fee_1.MsgPayPacketFeeAsync.unpackAny(proto);
            case '/ibc.applications.fee.v1.MsgRegisterCounterpartyPayee':
                return fee_1.MsgRegisterCounterpartyPayee.unpackAny(proto);
            case '/ibc.applications.fee.v1.MsgRegisterPayee':
                return fee_1.MsgRegisterPayee.unpackAny(proto);
            // ibc-fetchprice
            case '/ibc.applications.fetchprice.v1.MsgActivate':
                return fetchprice_1.MsgActivate.unpackAny(proto);
            case '/ibc.applications.fetchprice.v1.MsgDeactivate':
                return fetchprice_1.MsgDeactivate.unpackAny(proto);
            case '/ibc.applications.fetchprice.v1.MsgUpdateParams':
                return fetchprice_1.MsgUpdateIbcFetchpriceParams.unpackAny(proto);
            // ibc-hooks
            case '/initia.ibchooks.v1.MsgUpdateACL':
                return ibchooks_1.MsgUpdateACL.unpackAny(proto);
            case '/initia.ibchooks.v1.MsgUpdateParams':
                return ibchooks_1.MsgUpdateIbcHooksParams.unpackAny(proto);
            // ibc-nft-transfer
            case '/ibc.applications.nft_transfer.v1.MsgTransfer':
                return nft_transfer_1.MsgNftTransfer.unpackAny(proto);
            case '/ibc.applications.nft_transfer.v1.MsgUpdateParams':
                return nft_transfer_1.MsgUpdateIbcNftParams.unpackAny(proto);
            // ibc-perm
            case '/ibc.applications.perm.v1.MsgSetPermissionedRelayer':
                return perm_1.MsgSetPermissionedRelayer.unpackAny(proto);
            // ibc-transfer
            case '/ibc.applications.transfer.v1.MsgTransfer':
                return transfer_1.MsgTransfer.unpackAny(proto);
            case '/ibc.applications.transfer.v1.MsgUpdateParams':
                return transfer_1.MsgUpdateIbcTransferParams.unpackAny(proto);
            // ibc-channel
            case '/ibc.core.channel.v1.MsgChannelOpenInit':
                return msgs_1.MsgChannelOpenInit.unpackAny(proto);
            case '/ibc.core.channel.v1.MsgChannelOpenTry':
                return msgs_1.MsgChannelOpenTry.unpackAny(proto);
            case '/ibc.core.channel.v1.MsgChannelOpenConfirm':
                return msgs_1.MsgChannelOpenConfirm.unpackAny(proto);
            case '/ibc.core.channel.v1.MsgChannelOpenAck':
                return msgs_1.MsgChannelOpenAck.unpackAny(proto);
            case '/ibc.core.channel.v1.MsgChannelCloseInit':
                return msgs_1.MsgChannelCloseInit.unpackAny(proto);
            case '/ibc.core.channel.v1.MsgChannelCloseConfirm':
                return msgs_1.MsgChannelCloseConfirm.unpackAny(proto);
            case '/ibc.core.channel.v1.MsgRecvPacket':
                return msgs_1.MsgRecvPacket.unpackAny(proto);
            case '/ibc.core.channel.v1.MsgAcknowledgement':
                return msgs_1.MsgAcknowledgement.unpackAny(proto);
            case '/ibc.core.channel.v1.MsgTimeout':
                return msgs_1.MsgTimeout.unpackAny(proto);
            case '/ibc.core.channel.v1.MsgTimeoutOnClose':
                return msgs_1.MsgTimeoutOnClose.unpackAny(proto);
            case '/ibc.core.channel.v1.MsgUpdateParams':
                return msgs_1.MsgUpdateIbcChannelParams.unpackAny(proto);
            // ibc-client
            case '/ibc.core.client.v1.MsgCreateClient':
                return msgs_2.MsgCreateClient.unpackAny(proto);
            case '/ibc.core.client.v1.MsgUpdateClient':
                return msgs_2.MsgUpdateClient.unpackAny(proto);
            case '/ibc.core.client.v1.MsgUpgradeClient':
                return msgs_2.MsgUpgradeClient.unpackAny(proto);
            case '/ibc.core.client.v1.MsgSubmitMisbehaviour':
                return msgs_2.MsgSubmitMisbehaviour.unpackAny(proto);
            case '/ibc.core.client.v1.MsgRecoverClient':
                return msgs_2.MsgRecoverClient.unpackAny(proto);
            case '/ibc.core.client.v1.MsgIBCSoftwareUpgrade':
                return msgs_2.MsgIBCSoftwareUpgrade.unpackAny(proto);
            case '/ibc.core.client.v1.MsgUpdateParams':
                return msgs_2.MsgUpdateIbcClientParams.unpackAny(proto);
            // ibc-connection
            case '/ibc.core.connection.v1.MsgConnectionOpenInit':
                return msgs_3.MsgConnectionOpenInit.unpackAny(proto);
            case '/ibc.core.connection.v1.MsgConnectionOpenTry':
                return msgs_3.MsgConnectionOpenTry.unpackAny(proto);
            case '/ibc.core.connection.v1.MsgConnectionOpenConfirm':
                return msgs_3.MsgConnectionOpenConfirm.unpackAny(proto);
            case '/ibc.core.connection.v1.MsgConnectionOpenAck':
                return msgs_3.MsgConnectionOpenAck.unpackAny(proto);
            case '/ibc.core.connection.v1.MsgUpdateParams':
                return msgs_3.MsgUpdateIbcConnectionParams.unpackAny(proto);
            // intertx
            case '/initia.intertx.v1.MsgRegisterAccount':
                return intertx_1.MsgRegisterAccount.unpackAny(proto);
            case '/initia.intertx.v1.MsgSubmitTx':
                return intertx_1.MsgSubmitTx.unpackAny(proto);
            // move
            case '/initia.move.v1.MsgPublish':
                return move_1.MsgPublish.unpackAny(proto);
            case '/initia.move.v1.MsgExecute':
                return move_1.MsgExecute.unpackAny(proto);
            case '/initia.move.v1.MsgExecuteJSON':
                return move_1.MsgExecuteJSON.unpackAny(proto);
            case '/initia.move.v1.MsgScript':
                return move_1.MsgScript.unpackAny(proto);
            case '/initia.move.v1.MsgScriptJSON':
                return move_1.MsgScriptJSON.unpackAny(proto);
            case '/initia.move.v1.MsgUpdateParams':
                return move_1.MsgUpdateMoveParams.unpackAny(proto);
            case '/initia.move.v1.MsgWhitelist':
                return move_1.MsgWhitelist.unpackAny(proto);
            case '/initia.move.v1.MsgDelist':
                return move_1.MsgDelist.unpackAny(proto);
            case '/initia.move.v1.MsgGovExecute':
                return move_1.MsgGovExecute.unpackAny(proto);
            case '/initia.move.v1.MsgGovExecuteJSON':
                return move_1.MsgGovExecuteJSON.unpackAny(proto);
            case '/initia.move.v1.MsgGovPublish':
                return move_1.MsgGovPublish.unpackAny(proto);
            case '/initia.move.v1.MsgGovScript':
                return move_1.MsgGovScript.unpackAny(proto);
            case '/initia.move.v1.MsgGovScriptJSON':
                return move_1.MsgGovScriptJSON.unpackAny(proto);
            // mstaking
            case '/initia.mstaking.v1.MsgDelegate':
                return mstaking_1.MsgDelegate.unpackAny(proto);
            case '/initia.mstaking.v1.MsgUndelegate':
                return mstaking_1.MsgUndelegate.unpackAny(proto);
            case '/initia.mstaking.v1.MsgBeginRedelegate':
                return mstaking_1.MsgBeginRedelegate.unpackAny(proto);
            case '/initia.mstaking.v1.MsgCreateValidator':
                return mstaking_1.MsgCreateValidator.unpackAny(proto);
            case '/initia.mstaking.v1.MsgEditValidator':
                return mstaking_1.MsgEditValidator.unpackAny(proto);
            case '/initia.mstaking.v1.MsgUpdateParams':
                return mstaking_1.MsgUpdateMstakingParams.unpackAny(proto);
            // opchild
            case '/opinit.opchild.v1.MsgAddValidator':
                return opchild_1.MsgAddValidator.unpackAny(proto);
            case '/opinit.opchild.v1.MsgRemoveValidator':
                return opchild_1.MsgRemoveValidator.unpackAny(proto);
            case '/opinit.opchild.v1.MsgFinalizeTokenDeposit':
                return opchild_1.MsgFinalizeTokenDeposit.unpackAny(proto);
            case '/opinit.opchild.v1.MsgInitiateTokenWithdrawal':
                return opchild_1.MsgInitiateTokenWithdrawal.unpackAny(proto);
            case '/opinit.opchild.v1.MsgExecuteMessages':
                return opchild_1.MsgExecuteMessages.unpackAny(proto);
            case '/opinit.opchild.v1.MsgSpendFeePool':
                return opchild_1.MsgSpendFeePool.unpackAny(proto);
            case '/opinit.opchild.v1.MsgSetBridgeInfo':
                return opchild_1.MsgSetBridgeInfo.unpackAny(proto);
            case '/opinit.opchild.v1.MsgUpdateOracle':
                return opchild_1.MsgUpdateOracle.unpackAny(proto);
            case '/opinit.opchild.v1.MsgUpdateParams':
                return opchild_1.MsgUpdateOpchildParams.unpackAny(proto);
            // ophost
            case '/opinit.ophost.v1.MsgRecordBatch':
                return ophost_1.MsgRecordBatch.unpackAny(proto);
            case '/opinit.ophost.v1.MsgCreateBridge':
                return ophost_1.MsgCreateBridge.unpackAny(proto);
            case '/opinit.ophost.v1.MsgProposeOutput':
                return ophost_1.MsgProposeOutput.unpackAny(proto);
            case '/opinit.ophost.v1.MsgDeleteOutput':
                return ophost_1.MsgDeleteOutput.unpackAny(proto);
            case '/opinit.ophost.v1.MsgInitiateTokenDeposit':
                return ophost_1.MsgInitiateTokenDeposit.unpackAny(proto);
            case '/opinit.ophost.v1.MsgFinalizeTokenWithdrawal':
                return ophost_1.MsgFinalizeTokenWithdrawal.unpackAny(proto);
            case '/opinit.ophost.v1.MsgUpdateProposer':
                return ophost_1.MsgUpdateProposer.unpackAny(proto);
            case '/opinit.ophost.v1.MsgUpdateChallenger':
                return ophost_1.MsgUpdateChallenger.unpackAny(proto);
            case '/opinit.ophost.v1.MsgUpdateBatchInfo':
                return ophost_1.MsgUpdateBatchInfo.unpackAny(proto);
            case '/opinit.ophost.v1.MsgUpdateMetadata':
                return ophost_1.MsgUpdateMetadata.unpackAny(proto);
            case '/opinit.ophost.v1.MsgUpdateParams':
                return ophost_1.MsgUpdateOphostParams.unpackAny(proto);
            // oracle
            case '/slinky.oracle.v1.MsgAddCurrencyPairs':
                return oracle_1.MsgAddCurrencyPairs.unpackAny(proto);
            case '/slinky.oracle.v1.MsgRemoveCurrencyPairs':
                return oracle_1.MsgRemoveCurrencyPairs.unpackAny(proto);
            // reward
            case '/initia.reward.v1.MsgUpdateParams':
                return reward_1.MsgUpdateRewardParams.unpackAny(proto);
            // slashing
            case '/cosmos.slashing.v1beta1.MsgUnjail':
                return slashing_1.MsgUnjail.unpackAny(proto);
            case '/cosmos.slashing.v1beta1.MsgUpdateParams':
                return slashing_1.MsgUpdateSlashingParams.unpackAny(proto);
            // tokenfactory
            case '/miniwasm.tokenfactory.v1.MsgCreateDenom':
                return tokenfactory_1.MsgCreateDenom.unpackAny(proto);
            case '/miniwasm.tokenfactory.v1.MsgMint':
                return tokenfactory_1.MsgMint.unpackAny(proto);
            case '/miniwasm.tokenfactory.v1.MsgBurn':
                return tokenfactory_1.MsgBurn.unpackAny(proto);
            case '/miniwasm.tokenfactory.v1.MsgChangeAdmin':
                return tokenfactory_1.MsgChangeAdmin.unpackAny(proto);
            case '/miniwasm.tokenfactory.v1.MsgSetDenomMetadata':
                return tokenfactory_1.MsgSetDenomMetadataWasm.unpackAny(proto);
            case '/miniwasm.tokenfactory.v1.MsgSetBeforeSendHook':
                return tokenfactory_1.MsgSetBeforeSendHook.unpackAny(proto);
            case '/miniwasm.tokenfactory.v1.MsgForceTransfer':
                return tokenfactory_1.MsgForceTransfer.unpackAny(proto);
            case '/miniwasm.tokenfactory.v1.MsgUpdateParams':
                return tokenfactory_1.MsgUpdateTokenfactoryParams.unpackAny(proto);
            // upgrade
            case '/cosmos.upgrade.v1beta1.MsgSoftwareUpgrade':
                return upgrade_1.MsgSoftwareUpgrade.unpackAny(proto);
            case '/cosmos.upgrade.v1beta1.MsgCancelUpgrade':
                return upgrade_1.MsgCancelUpgrade.unpackAny(proto);
            // wasm
            case '/cosmwasm.wasm.v1.MsgStoreCode':
                return wasm_1.MsgStoreCode.unpackAny(proto);
            case '/cosmwasm.wasm.v1.MsgInstantiateContract':
                return wasm_1.MsgInstantiateContract.unpackAny(proto);
            case '/cosmwasm.wasm.v1.MsgInstantiateContract2':
                return wasm_1.MsgInstantiateContractV2.unpackAny(proto);
            case '/cosmwasm.wasm.v1.MsgExecuteContract':
                return wasm_1.MsgExecuteContract.unpackAny(proto);
            case '/cosmwasm.wasm.v1.MsgMigrateContract':
                return wasm_1.MsgMigrateContract.unpackAny(proto);
            case '/cosmwasm.wasm.v1.MsgUpdateAdmin':
                return wasm_1.MsgUpdateAdmin.unpackAny(proto);
            case '/cosmwasm.wasm.v1.MsgClearAdmin':
                return wasm_1.MsgClearAdmin.unpackAny(proto);
            case '/cosmwasm.wasm.v1.MsgUpdateInstantiateConfig':
                return wasm_1.MsgUpdateInstantiateConfig.unpackAny(proto);
            case '/cosmwasm.wasm.v1.MsgUpdateParams':
                return wasm_1.MsgUpdateWasmParams.unpackAny(proto);
            case '/cosmwasm.wasm.v1.MsgSudoContract':
                return wasm_1.MsgSudoContract.unpackAny(proto);
            case '/cosmwasm.wasm.v1.MsgPinCodes':
                return wasm_1.MsgPinCodes.unpackAny(proto);
            case '/cosmwasm.wasm.v1.MsgUnpinCodes':
                return wasm_1.MsgUnpinCodes.unpackAny(proto);
            case '/cosmwasm.wasm.v1.MsgStoreAndInstantiateContract':
                return wasm_1.MsgStoreAndInstantiateContract.unpackAny(proto);
            case '/cosmwasm.wasm.v1.MsgStoreAndMigrateContract':
                return wasm_1.MsgStoreAndMigrateContract.unpackAny(proto);
            case '/cosmwasm.wasm.v1.MsgAddCodeUploadParamsAddresses':
                return wasm_1.MsgAddCodeUploadParamsAddresses.unpackAny(proto);
            case '/cosmwasm.wasm.v1.MsgRemoveCodeUploadParamsAddresses':
                return wasm_1.MsgRemoveCodeUploadParamsAddresses.unpackAny(proto);
            case '/cosmwasm.wasm.v1.MsgUpdateContractLabel':
                return wasm_1.MsgUpdateContractLabel.unpackAny(proto);
            default:
                throw new Error(`not supported msg ${proto.typeUrl}`);
        }
    }
    Msg.fromProto = fromProto;
})(Msg || (exports.Msg = Msg = {}));
//# sourceMappingURL=Msg.js.map