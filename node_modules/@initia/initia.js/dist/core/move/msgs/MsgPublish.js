"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgPublish = void 0;
const json_1 = require("../../../util/json");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/initia/move/v1/tx");
const types_1 = require("@initia/initia.proto/initia/move/v1/types");
class MsgPublish extends json_1.JSONSerializable {
    /**
     * @param sender the actor that signed the messages
     * @param code_bytes raw move module bytes code
     * @param upgrade_policy arbitrary `0`, compatible `1`, immutable `2`
     */
    constructor(sender, code_bytes, upgrade_policy) {
        super();
        this.sender = sender;
        this.code_bytes = code_bytes;
        this.upgrade_policy = upgrade_policy;
    }
    static fromAmino(data) {
        const { value: { sender, code_bytes, upgrade_policy }, } = data;
        return new MsgPublish(sender, code_bytes, upgrade_policy ? upgrade_policy : 0);
    }
    toAmino() {
        const { sender, code_bytes, upgrade_policy } = this;
        return {
            type: 'move/MsgPublish',
            value: {
                sender,
                code_bytes,
                upgrade_policy: upgrade_policy === 0 ? undefined : upgrade_policy,
            },
        };
    }
    static fromProto(proto) {
        return new MsgPublish(proto.sender, proto.codeBytes.map(code => Buffer.from(code).toString('base64')), proto.upgradePolicy);
    }
    toProto() {
        const { sender, code_bytes, upgrade_policy } = this;
        return tx_1.MsgPublish.fromPartial({
            sender,
            codeBytes: code_bytes.map(code => Buffer.from(code, 'base64')),
            upgradePolicy: upgrade_policy,
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/initia.move.v1.MsgPublish',
            value: tx_1.MsgPublish.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgPublish.fromProto(tx_1.MsgPublish.decode(msgAny.value));
    }
    static fromData(data) {
        const { sender, code_bytes, upgrade_policy } = data;
        return new MsgPublish(sender, code_bytes, upgrade_policy);
    }
    toData() {
        const { sender, code_bytes, upgrade_policy } = this;
        return {
            '@type': '/initia.move.v1.MsgPublish',
            sender,
            code_bytes,
            upgrade_policy,
        };
    }
}
exports.MsgPublish = MsgPublish;
(function (MsgPublish) {
    MsgPublish.Policy = types_1.UpgradePolicy;
})(MsgPublish || (exports.MsgPublish = MsgPublish = {}));
//# sourceMappingURL=MsgPublish.js.map