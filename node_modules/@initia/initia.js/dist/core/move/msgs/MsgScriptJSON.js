"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgScriptJSON = void 0;
const json_1 = require("../../../util/json");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/initia/move/v1/tx");
class MsgScriptJSON extends json_1.JSONSerializable {
    /**
     * @param sender the actor that signed the messages
     * @param code_bytes the script bytes code to execute
     * @param type_args the type arguments of a function to execute
     * @param args the arguments of a function to execute in json stringify format
     */
    constructor(sender, code_bytes, type_args = [], args = []) {
        super();
        this.sender = sender;
        this.code_bytes = code_bytes;
        this.type_args = type_args;
        this.args = args;
    }
    static fromAmino(data) {
        const { value: { sender, code_bytes, type_args, args }, } = data;
        return new MsgScriptJSON(sender, code_bytes, type_args !== null && type_args !== void 0 ? type_args : [], args !== null && args !== void 0 ? args : []);
    }
    toAmino() {
        const { sender, code_bytes, type_args, args } = this;
        return {
            type: 'move/MsgScriptJSON',
            value: {
                sender,
                code_bytes,
                type_args: type_args.length === 0 ? undefined : type_args,
                args: args.length === 0 ? undefined : args,
            },
        };
    }
    static fromData(data) {
        const { sender, code_bytes, type_args, args } = data;
        return new MsgScriptJSON(sender, code_bytes, type_args, args);
    }
    toData() {
        const { sender, code_bytes, type_args, args } = this;
        return {
            '@type': '/initia.move.v1.MsgScriptJSON',
            sender,
            code_bytes,
            type_args,
            args,
        };
    }
    static fromProto(data) {
        return new MsgScriptJSON(data.sender, Buffer.from(data.codeBytes).toString('base64'), data.typeArgs, data.args);
    }
    toProto() {
        const { sender, code_bytes, type_args, args } = this;
        return tx_1.MsgScriptJSON.fromPartial({
            sender,
            codeBytes: Buffer.from(code_bytes, 'base64'),
            typeArgs: type_args,
            args,
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/initia.move.v1.MsgScriptJSON',
            value: tx_1.MsgScriptJSON.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgScriptJSON.fromProto(tx_1.MsgScriptJSON.decode(msgAny.value));
    }
}
exports.MsgScriptJSON = MsgScriptJSON;
//# sourceMappingURL=MsgScriptJSON.js.map