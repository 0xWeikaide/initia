"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgScript = void 0;
const json_1 = require("../../../util/json");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/initia/move/v1/tx");
const util_1 = require("../../../util");
class MsgScript extends json_1.JSONSerializable {
    /**
     * @param sender the actor that signed the messages
     * @param code_bytes the script bytes code to execute
     * @param type_args type arguments of function to execute
     * @param args arguments of function to execute
     */
    constructor(sender, code_bytes, type_args = [], args = []) {
        super();
        this.sender = sender;
        this.code_bytes = code_bytes;
        this.type_args = type_args;
        this.args = args;
    }
    static fromAmino(data) {
        const { value: { sender, code_bytes, type_args, args }, } = data;
        return new MsgScript(sender, code_bytes, type_args !== null && type_args !== void 0 ? type_args : [], args !== null && args !== void 0 ? args : []);
    }
    toAmino() {
        const { sender, code_bytes, type_args, args } = this;
        return {
            type: 'move/MsgScript',
            value: {
                sender,
                code_bytes,
                type_args: type_args.length === 0 ? undefined : type_args,
                args: args.length === 0 ? undefined : args,
            },
        };
    }
    static fromProto(data) {
        return new MsgScript(data.sender, Buffer.from(data.codeBytes).toString('base64'), data.typeArgs, data.args.map(arg => Buffer.from(arg).toString('base64')));
    }
    toProto() {
        const { sender, code_bytes, type_args, args } = this;
        return tx_1.MsgScript.fromPartial({
            sender,
            codeBytes: Buffer.from(code_bytes, 'base64'),
            typeArgs: type_args,
            args: args.map(arg => Buffer.from(arg, 'base64')),
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/initia.move.v1.MsgScript',
            value: tx_1.MsgScript.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgScript.fromProto(tx_1.MsgScript.decode(msgAny.value));
    }
    static fromData(data) {
        const { sender, code_bytes, type_args, args } = data;
        return new MsgScript(sender, code_bytes, type_args, args);
    }
    toData() {
        const { sender, code_bytes, type_args, args } = this;
        return {
            '@type': '/initia.move.v1.MsgScript',
            sender,
            code_bytes,
            type_args,
            args,
        };
    }
    /**
     * Generate `MsgScript` from plain arguments(not bcs encoded)
     *
     * @example
     * // In case of the types of arguments are ['u64', 'u64']
     * const abi = await lcd.move.scriptABI(script).then(res => res.abi)
     *
     * // msg that was generated with not encoded arguments
     * consg msg1 = MsgScript.fromPlainArgs(
     *   'init1abc...', // sender
     *   script, // code bytes
     *   [],
     *   [1000000000000, 2000000000000],
     *   abi
     * );
     *
     * // msg that was generated with the constructor
     * const msg2 = new MsgScript(
     *   'init1abc...', // sender
     *   script, // code bytes
     *   [],
     *   [
     *     bcs.serialize('u64', 1000000000000),
     *     bcs.serialize('u64', 2000000000000),
     *   ]
     * );
     *
     * console.assert(msg1.toJSON(), msg2.toJSON()
     *
     * @param sender
     * @param code_bytes
     * @param type_args
     * @param args
     * @param abi // base64 encoded script abi
     * @returns
     */
    static fromPlainArgs(sender, code_bytes, type_args, args, abi) {
        const functionAbi = JSON.parse(abi);
        return new MsgScript(sender, code_bytes, type_args, (0, util_1.argsEncodeWithABI)(args, functionAbi));
    }
}
exports.MsgScript = MsgScript;
//# sourceMappingURL=MsgScript.js.map