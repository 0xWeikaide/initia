import { JSONSerializable } from '../../../util/json';
import { AccAddress } from '../../bech32';
import { Any } from '@initia/initia.proto/google/protobuf/any';
import { MsgScript as MsgScript_pb } from '@initia/initia.proto/initia/move/v1/tx';
export declare class MsgScript extends JSONSerializable<MsgScript.Amino, MsgScript.Data, MsgScript.Proto> {
    sender: AccAddress;
    code_bytes: string;
    type_args: string[];
    args: string[];
    /**
     * @param sender the actor that signed the messages
     * @param code_bytes the script bytes code to execute
     * @param type_args type arguments of function to execute
     * @param args arguments of function to execute
     */
    constructor(sender: AccAddress, code_bytes: string, type_args?: string[], args?: string[]);
    static fromAmino(data: MsgScript.Amino): MsgScript;
    toAmino(): MsgScript.Amino;
    static fromProto(data: MsgScript.Proto): MsgScript;
    toProto(): MsgScript.Proto;
    packAny(): Any;
    static unpackAny(msgAny: Any): MsgScript;
    static fromData(data: MsgScript.Data): MsgScript;
    toData(): MsgScript.Data;
    /**
     * Generate `MsgScript` from plain arguments(not bcs encoded)
     *
     * @example
     * // In case of the types of arguments are ['u64', 'u64']
     * const abi = await lcd.move.scriptABI(script).then(res => res.abi)
     *
     * // msg that was generated with not encoded arguments
     * consg msg1 = MsgScript.fromPlainArgs(
     *   'init1abc...', // sender
     *   script, // code bytes
     *   [],
     *   [1000000000000, 2000000000000],
     *   abi
     * );
     *
     * // msg that was generated with the constructor
     * const msg2 = new MsgScript(
     *   'init1abc...', // sender
     *   script, // code bytes
     *   [],
     *   [
     *     bcs.serialize('u64', 1000000000000),
     *     bcs.serialize('u64', 2000000000000),
     *   ]
     * );
     *
     * console.assert(msg1.toJSON(), msg2.toJSON()
     *
     * @param sender
     * @param code_bytes
     * @param type_args
     * @param args
     * @param abi // base64 encoded script abi
     * @returns
     */
    static fromPlainArgs(sender: AccAddress, code_bytes: string, type_args: string[], args: any[], abi: string): MsgScript;
}
export declare namespace MsgScript {
    interface Amino {
        type: 'move/MsgScript';
        value: {
            sender: AccAddress;
            code_bytes: string;
            type_args?: string[];
            args?: string[];
        };
    }
    interface Data {
        '@type': '/initia.move.v1.MsgScript';
        sender: AccAddress;
        code_bytes: string;
        type_args: string[];
        args: string[];
    }
    type Proto = MsgScript_pb;
}
