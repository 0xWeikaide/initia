"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgExecute = void 0;
const json_1 = require("../../../util/json");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/initia/move/v1/tx");
const util_1 = require("../../../util");
class MsgExecute extends json_1.JSONSerializable {
    /**
     * @param sender the actor that signed the messages
     * @param module_address module deployer address
     * @param module_name name of module to execute
     * @param function_name name of function to execute
     * @param type_args type arguments of function to execute
     * @param args arguments of function to execute
     */
    constructor(sender, module_address, module_name, function_name, type_args = [], args = []) {
        super();
        this.sender = sender;
        this.module_address = module_address;
        this.module_name = module_name;
        this.function_name = function_name;
        this.type_args = type_args;
        this.args = args;
    }
    static fromAmino(data) {
        const { value: { sender, module_address, module_name, function_name, type_args, args, }, } = data;
        return new MsgExecute(sender, module_address, module_name, function_name, type_args !== null && type_args !== void 0 ? type_args : [], args !== null && args !== void 0 ? args : []);
    }
    toAmino() {
        const { sender, module_address, module_name, function_name, type_args, args, } = this;
        return {
            type: 'move/MsgExecute',
            value: {
                sender,
                module_address,
                module_name,
                function_name,
                type_args: type_args.length === 0 ? undefined : type_args,
                args: args.length === 0 ? undefined : args,
            },
        };
    }
    static fromProto(data) {
        return new MsgExecute(data.sender, data.moduleAddress, data.moduleName, data.functionName, data.typeArgs, data.args.map(arg => Buffer.from(arg).toString('base64')));
    }
    toProto() {
        const { sender, module_address, module_name, function_name, type_args, args, } = this;
        return tx_1.MsgExecute.fromPartial({
            sender,
            moduleAddress: module_address,
            moduleName: module_name,
            functionName: function_name,
            typeArgs: type_args,
            args: args.map(arg => Buffer.from(arg, 'base64')),
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/initia.move.v1.MsgExecute',
            value: tx_1.MsgExecute.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgExecute.fromProto(tx_1.MsgExecute.decode(msgAny.value));
    }
    static fromData(data) {
        const { sender, module_address, module_name, function_name, type_args, args, } = data;
        return new MsgExecute(sender, module_address, module_name, function_name, type_args, args);
    }
    toData() {
        const { sender, module_address, module_name, function_name, type_args, args, } = this;
        return {
            '@type': '/initia.move.v1.MsgExecute',
            sender,
            module_address,
            module_name,
            function_name,
            type_args,
            args,
        };
    }
    /**
     * Generate `MsgExecute` from plain arguments(not bcs encoded).
     *
     * @example
     * // In case of the types of arguments are ['u64', 'u64']
     * const abi = await lcd.move.module('init1def...', 'pair').then(res => res.abi)
     *
     * // msg that was generated with not encoded arguments
     * consg msg1 = MsgExectueEntryFunction.fromPlainArgs(
     *   'init1abc...', // sender
     *   'init1def...', // module owner
     *   'pair', // moudle name
     *   'provide_liquidity', // function name
     *   [],
     *   [1000000000000, 2000000000000],
     *   abi
     * );
     *
     * // msg that was generated with the constructor
     * const msg2 = new MsgExecute(
     *   'init1abc...', // sender
     *   'init1def...', // module owner
     *   'pair', // moudle name
     *   'provide_liquidity', // function name
     *   [],
     *   [
     *     bcs.serialize('u64', 1000000000000),
     *     bcs.serialize('u64', 2000000000000),
     *   ]
     * );
     *
     * console.assert(msg1.toJSON(), msg2.toJSON()
     *
     * @param sender
     * @param module_address
     * @param module_name
     * @param function_name
     * @param type_args
     * @param args
     * @param abi // base64 encoded module abi
     * @returns
     */
    static fromPlainArgs(sender, module_address, module_name, function_name, type_args = [], args = [], abi) {
        const module = JSON.parse(abi);
        const functionAbi = module.exposed_functions.find(exposedFunction => exposedFunction.name === function_name);
        if (!functionAbi) {
            throw new Error('function not found');
        }
        return new MsgExecute(sender, module_address, module_name, function_name, type_args, (0, util_1.argsEncodeWithABI)(args, functionAbi));
    }
}
exports.MsgExecute = MsgExecute;
//# sourceMappingURL=MsgExecute.js.map