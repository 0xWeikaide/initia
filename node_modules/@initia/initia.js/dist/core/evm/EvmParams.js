"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EvmParams = void 0;
const json_1 = require("../../util/json");
const types_1 = require("@initia/initia.proto/minievm/evm/v1/types");
class EvmParams extends json_1.JSONSerializable {
    /**
     * @param extra_eips the additional EIPs for the vm.Config
     * @param allowed_publishers list of addresses with permission to distribute contracts
     */
    constructor(extra_eips, allowed_publishers) {
        super();
        this.extra_eips = extra_eips;
        this.allowed_publishers = allowed_publishers;
    }
    static fromAmino(data) {
        const { extra_eips, allowed_publishers } = data;
        return new EvmParams(extra_eips.map(Number.parseInt), allowed_publishers);
    }
    toAmino() {
        const { extra_eips, allowed_publishers } = this;
        return {
            extra_eips: extra_eips.map(eip => eip.toString()),
            allowed_publishers,
        };
    }
    static fromData(data) {
        const { extra_eips, allowed_publishers } = data;
        return new EvmParams(extra_eips.map(Number.parseInt), allowed_publishers);
    }
    toData() {
        const { extra_eips, allowed_publishers } = this;
        return {
            extra_eips: extra_eips.map(eip => eip.toString()),
            allowed_publishers,
        };
    }
    static fromProto(proto) {
        return new EvmParams(proto.extraEips.map(eip => eip.toNumber()), proto.allowedPublishers);
    }
    toProto() {
        const { extra_eips, allowed_publishers } = this;
        return types_1.Params.fromPartial({
            extraEips: extra_eips,
            allowedPublishers: allowed_publishers,
        });
    }
}
exports.EvmParams = EvmParams;
//# sourceMappingURL=EvmParams.js.map