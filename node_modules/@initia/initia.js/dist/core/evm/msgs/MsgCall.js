"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgCall = void 0;
const json_1 = require("../../../util/json");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/minievm/evm/v1/tx");
class MsgCall extends json_1.JSONSerializable {
    /**
     * @param sender the actor that signed the messages
     * @param contract_addr the contract address to be executed, can be cosmos address or hex encoded address
     * @param input hex encoded execution input bytes
     */
    constructor(sender, contract_addr, input) {
        super();
        this.sender = sender;
        this.contract_addr = contract_addr;
        this.input = input;
    }
    static fromAmino(data) {
        const { value: { sender, contract_addr, input }, } = data;
        return new MsgCall(sender, contract_addr, input);
    }
    toAmino() {
        const { sender, contract_addr, input } = this;
        return {
            type: 'evm/MsgCall',
            value: {
                sender,
                contract_addr,
                input,
            },
        };
    }
    static fromData(data) {
        const { sender, contract_addr, input } = data;
        return new MsgCall(sender, contract_addr, input);
    }
    toData() {
        const { sender, contract_addr, input } = this;
        return {
            '@type': '/minievm.evm.v1.MsgCall',
            sender,
            contract_addr,
            input,
        };
    }
    static fromProto(data) {
        return new MsgCall(data.sender, data.contractAddr, data.input);
    }
    toProto() {
        const { sender, contract_addr, input } = this;
        return tx_1.MsgCall.fromPartial({
            sender,
            contractAddr: contract_addr,
            input,
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/minievm.evm.v1.MsgCall',
            value: tx_1.MsgCall.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgCall.fromProto(tx_1.MsgCall.decode(msgAny.value));
    }
}
exports.MsgCall = MsgCall;
//# sourceMappingURL=MsgCall.js.map