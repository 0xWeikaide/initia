"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupPolicyInfo = void 0;
const json_1 = require("../../util/json");
const policies_1 = require("./policies");
const types_1 = require("@initia/initia.proto/cosmos/group/v1/types");
const long_1 = __importDefault(require("long"));
class GroupPolicyInfo extends json_1.JSONSerializable {
    /**
     * @param address the account address of group policy
     * @param group_id the unique ID of the group
     * @param admin the account address of the group admin
     * @param metadata any arbitrary metadata attached to the group
     * @param version used to track changes to a group's membership structure that would break existing proposals
     * @param decision_policy the group policy's decision policy
     * @param created_at timestamp specifying when a group policy was created
     */
    constructor(address, group_id, admin, metadata, version, decision_policy, created_at) {
        super();
        this.address = address;
        this.group_id = group_id;
        this.admin = admin;
        this.metadata = metadata;
        this.version = version;
        this.decision_policy = decision_policy;
        this.created_at = created_at;
    }
    static fromAmino(data) {
        const { address, group_id, admin, metadata, version, decision_policy, created_at, } = data;
        return new GroupPolicyInfo(address, Number.parseInt(group_id), admin, metadata, Number.parseInt(version), policies_1.DecisionPolicy.fromAmino(decision_policy), new Date(created_at));
    }
    toAmino() {
        const { address, group_id, admin, metadata, version, decision_policy, created_at, } = this;
        return {
            address,
            group_id: group_id.toString(),
            admin,
            metadata,
            version: version.toString(),
            decision_policy: decision_policy.toAmino(),
            created_at: created_at.toISOString(),
        };
    }
    static fromData(data) {
        const { address, group_id, admin, metadata, version, decision_policy, created_at, } = data;
        return new GroupPolicyInfo(address, Number.parseInt(group_id), admin, metadata, Number.parseInt(version), policies_1.DecisionPolicy.fromData(decision_policy), new Date(created_at));
    }
    toData() {
        const { address, group_id, admin, metadata, version, decision_policy, created_at, } = this;
        return {
            address,
            group_id: group_id.toString(),
            admin,
            metadata,
            version: version.toString(),
            decision_policy: decision_policy.toData(),
            created_at: created_at.toISOString(),
        };
    }
    static fromProto(data) {
        return new GroupPolicyInfo(data.address, data.groupId.toNumber(), data.admin, data.metadata, data.version.toNumber(), policies_1.DecisionPolicy.fromProto(data.decisionPolicy), data.createdAt);
    }
    toProto() {
        const { address, group_id, admin, metadata, version, decision_policy, created_at, } = this;
        return types_1.GroupPolicyInfo.fromPartial({
            address,
            groupId: long_1.default.fromNumber(group_id),
            admin,
            metadata,
            version: long_1.default.fromNumber(version),
            decisionPolicy: decision_policy.packAny(),
            createdAt: created_at,
        });
    }
}
exports.GroupPolicyInfo = GroupPolicyInfo;
//# sourceMappingURL=GroupPolicyInfo.js.map