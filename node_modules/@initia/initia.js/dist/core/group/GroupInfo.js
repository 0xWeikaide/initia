"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupInfo = void 0;
const json_1 = require("../../util/json");
const types_1 = require("@initia/initia.proto/cosmos/group/v1/types");
const long_1 = __importDefault(require("long"));
class GroupInfo extends json_1.JSONSerializable {
    /**
     * @param id the unique ID of the group
     * @param admin the account address of the group's admin
     * @param metadata any arbitrary metadata attached to the group
     * @param version used to track changes to a group's membership structure that would break existing proposals
     * @param total_weight the sum of the group members' weights
     * @param created_at timestamp specifying when a group was created
     */
    constructor(id, admin, metadata, version, total_weight, created_at) {
        super();
        this.id = id;
        this.admin = admin;
        this.metadata = metadata;
        this.version = version;
        this.total_weight = total_weight;
        this.created_at = created_at;
    }
    static fromAmino(data) {
        const { id, admin, metadata, version, total_weight, created_at } = data;
        return new GroupInfo(Number.parseInt(id), admin, metadata, Number.parseInt(version), total_weight, new Date(created_at));
    }
    toAmino() {
        const { id, admin, metadata, version, total_weight, created_at } = this;
        return {
            id: id.toString(),
            admin,
            metadata,
            version: version.toString(),
            total_weight,
            created_at: created_at.toISOString(),
        };
    }
    static fromData(data) {
        const { id, admin, metadata, version, total_weight, created_at } = data;
        return new GroupInfo(Number.parseInt(id), admin, metadata, Number.parseInt(version), total_weight, new Date(created_at));
    }
    toData() {
        const { id, admin, metadata, version, total_weight, created_at } = this;
        return {
            id: id.toString(),
            admin,
            metadata,
            version: version.toString(),
            total_weight,
            created_at: created_at.toISOString(),
        };
    }
    static fromProto(data) {
        return new GroupInfo(data.id.toNumber(), data.admin, data.metadata, data.version.toNumber(), data.totalWeight, data.createdAt);
    }
    toProto() {
        const { id, admin, metadata, version, total_weight, created_at } = this;
        return types_1.GroupInfo.fromPartial({
            id: long_1.default.fromNumber(id),
            admin,
            metadata,
            version: long_1.default.fromNumber(version),
            totalWeight: total_weight,
            createdAt: created_at,
        });
    }
}
exports.GroupInfo = GroupInfo;
//# sourceMappingURL=GroupInfo.js.map