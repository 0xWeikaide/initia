"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemberRequest = exports.Member = exports.GroupMember = void 0;
const json_1 = require("../../util/json");
const types_1 = require("@initia/initia.proto/cosmos/group/v1/types");
const long_1 = __importDefault(require("long"));
class GroupMember extends json_1.JSONSerializable {
    /**
     * @param group_id the unique ID of the group
     * @param member the member data
     */
    constructor(group_id, member) {
        super();
        this.group_id = group_id;
        this.member = member;
    }
    static fromAmino(data) {
        const { group_id, member } = data;
        return new GroupMember(Number.parseInt(group_id), Member.fromAmino(member));
    }
    toAmino() {
        const { group_id, member } = this;
        return {
            group_id: group_id.toString(),
            member: member.toAmino(),
        };
    }
    static fromData(data) {
        const { group_id, member } = data;
        return new GroupMember(Number.parseInt(group_id), Member.fromData(member));
    }
    toData() {
        const { group_id, member } = this;
        return {
            group_id: group_id.toString(),
            member: member.toData(),
        };
    }
    static fromProto(data) {
        return new GroupMember(data.groupId.toNumber(), Member.fromProto(data.member));
    }
    toProto() {
        const { group_id, member } = this;
        return types_1.GroupMember.fromPartial({
            groupId: long_1.default.fromNumber(group_id),
            member: member.toProto(),
        });
    }
}
exports.GroupMember = GroupMember;
class Member extends json_1.JSONSerializable {
    /**
     * @param address the member's account address
     * @param weight the member's voting weight that should be greater than 0
     * @param metadata any arbitrary metadata attached to the member
     * @param added_at timestamp specifying when a member was added
     */
    constructor(address, weight, metadata, added_at) {
        super();
        this.address = address;
        this.weight = weight;
        this.metadata = metadata;
        this.added_at = added_at;
    }
    static fromAmino(data) {
        const { address, weight, metadata, added_at } = data;
        return new Member(address, weight, metadata, new Date(added_at));
    }
    toAmino() {
        const { address, weight, metadata, added_at } = this;
        return {
            address,
            weight,
            metadata,
            added_at: added_at.toISOString(),
        };
    }
    static fromData(data) {
        const { address, weight, metadata, added_at } = data;
        return new Member(address, weight, metadata, new Date(added_at));
    }
    toData() {
        const { address, weight, metadata, added_at } = this;
        return {
            address,
            weight,
            metadata,
            added_at: added_at.toISOString(),
        };
    }
    static fromProto(data) {
        return new Member(data.address, data.weight, data.metadata, data.addedAt);
    }
    toProto() {
        const { address, weight, metadata, added_at } = this;
        return types_1.Member.fromPartial({
            address,
            weight,
            metadata,
            addedAt: added_at,
        });
    }
}
exports.Member = Member;
class MemberRequest extends json_1.JSONSerializable {
    /**
     * @param address the member's account address
     * @param weight the member's voting weight that should be greater than 0
     * @param metadata any arbitrary metadata attached to the member
     */
    constructor(address, weight, metadata) {
        super();
        this.address = address;
        this.weight = weight;
        this.metadata = metadata;
    }
    static fromAmino(data) {
        const { address, weight, metadata } = data;
        return new MemberRequest(address, weight, metadata);
    }
    toAmino() {
        const { address, weight, metadata } = this;
        return {
            address,
            weight,
            metadata,
        };
    }
    static fromData(data) {
        const { address, weight, metadata } = data;
        return new MemberRequest(address, weight, metadata);
    }
    toData() {
        const { address, weight, metadata } = this;
        return {
            address,
            weight,
            metadata,
        };
    }
    static fromProto(data) {
        return new MemberRequest(data.address, data.weight, data.metadata);
    }
    toProto() {
        const { address, weight, metadata } = this;
        return types_1.MemberRequest.fromPartial({
            address,
            weight,
            metadata,
        });
    }
}
exports.MemberRequest = MemberRequest;
//# sourceMappingURL=GroupMember.js.map