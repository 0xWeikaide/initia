"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupVote = void 0;
const json_1 = require("../../util/json");
const types_1 = require("@initia/initia.proto/cosmos/group/v1/types");
const long_1 = __importDefault(require("long"));
class GroupVote extends json_1.JSONSerializable {
    /**
     * @param proposal_id the unique ID of the proposal
     * @param voter the account address of the voter
     * @param option the voter's choice on the proposal
     * @param metadata any arbitrary metadata attached to the vote
     * @param submit_time the timestamp when the vote was submitted
     */
    constructor(proposal_id, voter, option, metadata, submit_time) {
        super();
        this.proposal_id = proposal_id;
        this.voter = voter;
        this.option = option;
        this.metadata = metadata;
        this.submit_time = submit_time;
    }
    static fromAmino(data) {
        const { proposal_id, voter, option, metadata, submit_time } = data;
        return new GroupVote(Number.parseInt(proposal_id), voter, (0, types_1.voteOptionFromJSON)(option), metadata, new Date(submit_time));
    }
    toAmino() {
        const { proposal_id, voter, option, metadata, submit_time } = this;
        return {
            proposal_id: proposal_id.toString(),
            voter,
            option: (0, types_1.voteOptionToJSON)(option),
            metadata,
            submit_time: submit_time.toISOString(),
        };
    }
    static fromData(data) {
        const { proposal_id, voter, option, metadata, submit_time } = data;
        return new GroupVote(Number.parseInt(proposal_id), voter, (0, types_1.voteOptionFromJSON)(option), metadata, new Date(submit_time));
    }
    toData() {
        const { proposal_id, voter, option, metadata, submit_time } = this;
        return {
            proposal_id: proposal_id.toString(),
            voter,
            option: (0, types_1.voteOptionToJSON)(option),
            metadata,
            submit_time: submit_time.toISOString(),
        };
    }
    static fromProto(data) {
        return new GroupVote(data.proposalId.toNumber(), data.voter, data.option, data.metadata, data.submitTime);
    }
    toProto() {
        const { proposal_id, voter, option, metadata, submit_time } = this;
        return types_1.Vote.fromPartial({
            proposalId: long_1.default.fromNumber(proposal_id),
            voter,
            option,
            metadata,
            submitTime: submit_time,
        });
    }
}
exports.GroupVote = GroupVote;
(function (GroupVote) {
    GroupVote.Option = types_1.VoteOption;
})(GroupVote || (exports.GroupVote = GroupVote = {}));
//# sourceMappingURL=GroupVote.js.map