"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DecisionPolicy = void 0;
const ThresholdDecisionPolicy_1 = require("./ThresholdDecisionPolicy");
const PercentageDecisionPolicy_1 = require("./PercentageDecisionPolicy");
__exportStar(require("./ThresholdDecisionPolicy"), exports);
__exportStar(require("./PercentageDecisionPolicy"), exports);
__exportStar(require("./DecisionPolicyWindows"), exports);
var DecisionPolicy;
(function (DecisionPolicy) {
    function fromAmino(data) {
        switch (data.type) {
            case 'cosmos-sdk/ThresholdDecisionPolicy':
                return ThresholdDecisionPolicy_1.ThresholdDecisionPolicy.fromAmino(data);
            case 'cosmos-sdk/PercentageDecisionPolicy':
                return PercentageDecisionPolicy_1.PercentageDecisionPolicy.fromAmino(data);
        }
    }
    DecisionPolicy.fromAmino = fromAmino;
    function fromData(data) {
        switch (data['@type']) {
            case '/cosmos.group.v1.ThresholdDecisionPolicy':
                return ThresholdDecisionPolicy_1.ThresholdDecisionPolicy.fromData(data);
            case '/cosmos.group.v1.PercentageDecisionPolicy':
                return PercentageDecisionPolicy_1.PercentageDecisionPolicy.fromData(data);
        }
    }
    DecisionPolicy.fromData = fromData;
    function fromProto(proto) {
        const typeUrl = proto.typeUrl;
        switch (typeUrl) {
            case '/cosmos.group.v1.ThresholdDecisionPolicy':
                return ThresholdDecisionPolicy_1.ThresholdDecisionPolicy.unpackAny(proto);
            case '/cosmos.group.v1.PercentageDecisionPolicy':
                return PercentageDecisionPolicy_1.PercentageDecisionPolicy.unpackAny(proto);
        }
        throw new Error(`DecisionPolicy type ${typeUrl} not recognized`);
    }
    DecisionPolicy.fromProto = fromProto;
})(DecisionPolicy || (exports.DecisionPolicy = DecisionPolicy = {}));
//# sourceMappingURL=index.js.map