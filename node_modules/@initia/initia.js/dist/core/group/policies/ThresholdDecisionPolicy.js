"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThresholdDecisionPolicy = void 0;
const json_1 = require("../../../util/json");
const DecisionPolicyWindows_1 = require("./DecisionPolicyWindows");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const types_1 = require("@initia/initia.proto/cosmos/group/v1/types");
class ThresholdDecisionPolicy extends json_1.JSONSerializable {
    /**
     * @param threshold the minimum weighted sum of `YES` votes that must be met for a proposal to succeed
     * @param windows the different windows for voting and execution
     */
    constructor(threshold, windows) {
        super();
        this.threshold = threshold;
        this.windows = windows;
    }
    static fromAmino(data) {
        const { value: { threshold, windows }, } = data;
        return new ThresholdDecisionPolicy(threshold, DecisionPolicyWindows_1.DecisionPolicyWindows.fromAmino(windows));
    }
    toAmino() {
        const { threshold, windows } = this;
        return {
            type: 'cosmos-sdk/ThresholdDecisionPolicy',
            value: {
                threshold,
                windows: windows.toAmino(),
            },
        };
    }
    static fromData(data) {
        const { threshold, windows } = data;
        return new ThresholdDecisionPolicy(threshold, DecisionPolicyWindows_1.DecisionPolicyWindows.fromData(windows));
    }
    toData() {
        const { threshold, windows } = this;
        return {
            '@type': '/cosmos.group.v1.ThresholdDecisionPolicy',
            threshold,
            windows: windows.toData(),
        };
    }
    static fromProto(data) {
        return new ThresholdDecisionPolicy(data.threshold, DecisionPolicyWindows_1.DecisionPolicyWindows.fromProto(data.windows));
    }
    toProto() {
        const { threshold, windows } = this;
        return types_1.ThresholdDecisionPolicy.fromPartial({
            threshold,
            windows: windows.toProto(),
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/cosmos.group.v1.ThresholdDecisionPolicy',
            value: types_1.ThresholdDecisionPolicy.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return ThresholdDecisionPolicy.fromProto(types_1.ThresholdDecisionPolicy.decode(msgAny.value));
    }
}
exports.ThresholdDecisionPolicy = ThresholdDecisionPolicy;
//# sourceMappingURL=ThresholdDecisionPolicy.js.map