"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupProposal = void 0;
const json_1 = require("../../util/json");
const num_1 = require("../num");
const Msg_1 = require("../Msg");
const types_1 = require("@initia/initia.proto/cosmos/group/v1/types");
const long_1 = __importDefault(require("long"));
/**
 * A group proposal consists of a set of `sdk.Msg`s that will be executed if the proposal
 * passes as well as some optional metadata associated with the proposal
 */
class GroupProposal extends json_1.JSONSerializable {
    /**
     *
     * @param id the unique id of the proposal
     * @param group_policy_address the account address of group policy
     * @param metadata any arbitrary metadata attached to the proposal
     * @param proposers the account addresses of the proposers
     * @param submit_time timestamp specifying when a proposal was submitted
     * @param group_version tracks the version of the group at proposal submission
     * @param group_policy_version tracks the version of the group policy at proposal submission
     * @param status proposal's status
     * @param final_tally_result tally result
     * @param voting_period_end the timestamp before which voting must be done
     * @param executor_result the final result of the proposal execution
     * @param messages list of `sdk.Msg`s that will be executed if the proposal passes
     * @param title title of the proposal
     * @param summary short summary of the proposal
     */
    constructor(id, group_policy_address, metadata, proposers, submit_time, group_version, group_policy_version, status, final_tally_result, voting_period_end, executor_result, messages, title, summary) {
        super();
        this.id = id;
        this.group_policy_address = group_policy_address;
        this.metadata = metadata;
        this.proposers = proposers;
        this.submit_time = submit_time;
        this.group_version = group_version;
        this.group_policy_version = group_policy_version;
        this.status = status;
        this.final_tally_result = final_tally_result;
        this.voting_period_end = voting_period_end;
        this.executor_result = executor_result;
        this.messages = messages;
        this.title = title;
        this.summary = summary;
    }
    static fromAmino(data) {
        var _a, _b, _c, _d;
        const { id, group_policy_address, metadata, proposers, submit_time, group_version, group_policy_version, status, final_tally_result, voting_period_end, executor_result, messages, title, summary, } = data;
        return new GroupProposal(Number.parseInt(id), group_policy_address, metadata, proposers, new Date(submit_time), Number.parseInt(group_version), Number.parseInt(group_policy_version), (0, types_1.proposalStatusFromJSON)(status), {
            yes_count: (0, num_1.num)((_a = final_tally_result.yes_count) !== null && _a !== void 0 ? _a : 0).toFixed(0),
            no_count: (0, num_1.num)((_b = final_tally_result.no_count) !== null && _b !== void 0 ? _b : 0).toFixed(0),
            abstain_count: (0, num_1.num)((_c = final_tally_result.abstain_count) !== null && _c !== void 0 ? _c : 0).toFixed(0),
            no_with_veto_count: (0, num_1.num)((_d = final_tally_result.no_with_veto_count) !== null && _d !== void 0 ? _d : 0).toFixed(0),
        }, new Date(voting_period_end), (0, types_1.proposalExecutorResultFromJSON)(executor_result), messages.map(Msg_1.Msg.fromAmino), title, summary);
    }
    toAmino() {
        const { id, group_policy_address, metadata, proposers, submit_time, group_version, group_policy_version, status, final_tally_result, voting_period_end, executor_result, messages, title, summary, } = this;
        return {
            id: id.toString(),
            group_policy_address,
            metadata,
            proposers,
            submit_time: submit_time.toISOString(),
            group_version: group_version.toString(),
            group_policy_version: group_policy_version.toString(),
            status: (0, types_1.proposalStatusToJSON)(status),
            final_tally_result: {
                yes_count: (0, num_1.num)(final_tally_result.yes_count).toFixed(),
                no_count: (0, num_1.num)(final_tally_result.no_count).toFixed(),
                abstain_count: (0, num_1.num)(final_tally_result.abstain_count).toFixed(),
                no_with_veto_count: (0, num_1.num)(final_tally_result.no_with_veto_count).toFixed(),
            },
            voting_period_end: voting_period_end.toISOString(),
            executor_result: (0, types_1.proposalExecutorResultToJSON)(executor_result),
            messages: messages.map(msg => msg.toAmino()),
            title,
            summary,
        };
    }
    static fromData(data) {
        var _a, _b, _c, _d;
        const { id, group_policy_address, metadata, proposers, submit_time, group_version, group_policy_version, status, final_tally_result, voting_period_end, executor_result, messages, title, summary, } = data;
        return new GroupProposal(Number.parseInt(id), group_policy_address, metadata, proposers, new Date(submit_time), Number.parseInt(group_version), Number.parseInt(group_policy_version), (0, types_1.proposalStatusFromJSON)(status), {
            yes_count: (0, num_1.num)((_a = final_tally_result.yes_count) !== null && _a !== void 0 ? _a : 0).toFixed(0),
            no_count: (0, num_1.num)((_b = final_tally_result.no_count) !== null && _b !== void 0 ? _b : 0).toFixed(0),
            abstain_count: (0, num_1.num)((_c = final_tally_result.abstain_count) !== null && _c !== void 0 ? _c : 0).toFixed(0),
            no_with_veto_count: (0, num_1.num)((_d = final_tally_result.no_with_veto_count) !== null && _d !== void 0 ? _d : 0).toFixed(0),
        }, new Date(voting_period_end), (0, types_1.proposalExecutorResultFromJSON)(executor_result), messages.map(Msg_1.Msg.fromData), title, summary);
    }
    toData() {
        const { id, group_policy_address, metadata, proposers, submit_time, group_version, group_policy_version, status, final_tally_result, voting_period_end, executor_result, messages, title, summary, } = this;
        return {
            id: id.toString(),
            group_policy_address,
            metadata,
            proposers,
            submit_time: submit_time.toISOString(),
            group_version: group_version.toString(),
            group_policy_version: group_policy_version.toString(),
            status: (0, types_1.proposalStatusToJSON)(status),
            final_tally_result: {
                yes_count: (0, num_1.num)(final_tally_result.yes_count).toFixed(),
                no_count: (0, num_1.num)(final_tally_result.no_count).toFixed(),
                abstain_count: (0, num_1.num)(final_tally_result.abstain_count).toFixed(),
                no_with_veto_count: (0, num_1.num)(final_tally_result.no_with_veto_count).toFixed(),
            },
            voting_period_end: voting_period_end.toISOString(),
            executor_result: (0, types_1.proposalExecutorResultToJSON)(executor_result),
            messages: messages.map(msg => msg.toData()),
            title,
            summary,
        };
    }
    static fromProto(data) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        return new GroupProposal(data.id.toNumber(), data.groupPolicyAddress, data.metadata, data.proposers, data.submitTime, data.groupVersion.toNumber(), data.groupPolicyVersion.toNumber(), data.status, {
            yes_count: (0, num_1.num)((_b = (_a = data.finalTallyResult) === null || _a === void 0 ? void 0 : _a.yesCount) !== null && _b !== void 0 ? _b : 0).toFixed(0),
            no_count: (0, num_1.num)((_d = (_c = data.finalTallyResult) === null || _c === void 0 ? void 0 : _c.noCount) !== null && _d !== void 0 ? _d : 0).toFixed(0),
            abstain_count: (0, num_1.num)((_f = (_e = data.finalTallyResult) === null || _e === void 0 ? void 0 : _e.abstainCount) !== null && _f !== void 0 ? _f : 0).toFixed(0),
            no_with_veto_count: (0, num_1.num)((_h = (_g = data.finalTallyResult) === null || _g === void 0 ? void 0 : _g.noWithVetoCount) !== null && _h !== void 0 ? _h : 0).toFixed(0),
        }, data.votingPeriodEnd, data.executorResult, data.messages.map(Msg_1.Msg.fromProto), data.title, data.summary);
    }
    toProto() {
        const { id, group_policy_address, metadata, proposers, submit_time, group_version, group_policy_version, status, final_tally_result, voting_period_end, executor_result, messages, title, summary, } = this;
        let ftr;
        if (final_tally_result) {
            ftr = types_1.TallyResult.fromPartial({
                yesCount: final_tally_result.yes_count.toString(),
                noCount: final_tally_result.no_count.toString(),
                abstainCount: final_tally_result.abstain_count.toString(),
                noWithVetoCount: final_tally_result.no_with_veto_count.toString(),
            });
        }
        return types_1.Proposal.fromPartial({
            id: long_1.default.fromNumber(id),
            groupPolicyAddress: group_policy_address,
            metadata,
            proposers,
            submitTime: submit_time,
            groupVersion: long_1.default.fromNumber(group_version),
            groupPolicyVersion: long_1.default.fromNumber(group_policy_version),
            status,
            finalTallyResult: ftr,
            votingPeriodEnd: voting_period_end,
            executorResult: executor_result,
            messages: messages.map(msg => msg.packAny()),
            title,
            summary,
        });
    }
}
exports.GroupProposal = GroupProposal;
(function (GroupProposal) {
    GroupProposal.Status = types_1.ProposalStatus;
    GroupProposal.ExecutorResult = types_1.ProposalExecutorResult;
})(GroupProposal || (exports.GroupProposal = GroupProposal = {}));
//# sourceMappingURL=GroupProposal.js.map