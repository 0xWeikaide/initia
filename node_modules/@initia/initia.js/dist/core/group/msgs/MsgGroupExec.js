"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgGroupExec = void 0;
const json_1 = require("../../../util/json");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/cosmos/group/v1/tx");
const long_1 = __importDefault(require("long"));
class MsgGroupExec extends json_1.JSONSerializable {
    /**
     * @param proposal_id the unique ID of the proposal
     * @param executor the account address used to execute the proposal
     */
    constructor(proposal_id, executor) {
        super();
        this.proposal_id = proposal_id;
        this.executor = executor;
    }
    static fromAmino(data) {
        const { value: { proposal_id, executor }, } = data;
        return new MsgGroupExec(Number.parseInt(proposal_id), executor);
    }
    toAmino() {
        const { proposal_id, executor } = this;
        return {
            type: 'cosmos-sdk/group/MsgExec',
            value: {
                proposal_id: proposal_id.toString(),
                executor,
            },
        };
    }
    static fromData(data) {
        const { proposal_id, executor } = data;
        return new MsgGroupExec(Number.parseInt(proposal_id), executor);
    }
    toData() {
        const { proposal_id, executor } = this;
        return {
            '@type': '/cosmos.group.v1.MsgExec',
            proposal_id: proposal_id.toString(),
            executor,
        };
    }
    static fromProto(data) {
        return new MsgGroupExec(data.proposalId.toNumber(), data.executor);
    }
    toProto() {
        const { proposal_id, executor } = this;
        return tx_1.MsgExec.fromPartial({
            proposalId: long_1.default.fromNumber(proposal_id),
            executor,
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/cosmos.group.v1.MsgExec',
            value: tx_1.MsgExec.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgGroupExec.fromProto(tx_1.MsgExec.decode(msgAny.value));
    }
}
exports.MsgGroupExec = MsgGroupExec;
//# sourceMappingURL=MsgGroupExec.js.map