"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgSubmitGroupProposal = void 0;
const json_1 = require("../../../util/json");
const Msg_1 = require("../../Msg");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/cosmos/group/v1/tx");
class MsgSubmitGroupProposal extends json_1.JSONSerializable {
    /**
     * @param group_policy_address the account address of group policy
     * @param proposers the account addresses of the proposers
     * @param metadata any arbitrary metadata attached to the proposal
     * @param messages list of `sdk.Msg`s that will be executed if the proposal passes
     * @param exec the mode of execution of the proposal
     * @param title the title of the proposal
     * @param summary the summary of the proposal
     */
    constructor(group_policy_address, proposers, metadata, messages, exec, title, summary) {
        super();
        this.group_policy_address = group_policy_address;
        this.proposers = proposers;
        this.metadata = metadata;
        this.messages = messages;
        this.exec = exec;
        this.title = title;
        this.summary = summary;
    }
    static fromAmino(data) {
        const { value: { group_policy_address, proposers, metadata, messages, exec, title, summary, }, } = data;
        return new MsgSubmitGroupProposal(group_policy_address, proposers, metadata, messages.map(Msg_1.Msg.fromAmino), (0, tx_1.execFromJSON)(exec), title, summary);
    }
    toAmino() {
        const { group_policy_address, proposers, metadata, messages, exec, title, summary, } = this;
        return {
            type: 'cosmos-sdk/group/MsgSubmitProposal',
            value: {
                group_policy_address,
                proposers,
                metadata,
                messages: messages.map(msg => msg.toAmino()),
                exec: (0, tx_1.execToJSON)(exec),
                title,
                summary,
            },
        };
    }
    static fromData(data) {
        const { group_policy_address, proposers, metadata, messages, exec, title, summary, } = data;
        return new MsgSubmitGroupProposal(group_policy_address, proposers, metadata, messages.map(Msg_1.Msg.fromData), (0, tx_1.execFromJSON)(exec), title, summary);
    }
    toData() {
        const { group_policy_address, proposers, metadata, messages, exec, title, summary, } = this;
        return {
            '@type': '/cosmos.group.v1.MsgSubmitProposal',
            group_policy_address,
            proposers,
            metadata,
            messages: messages.map(msg => msg.toData()),
            exec: (0, tx_1.execToJSON)(exec),
            title,
            summary,
        };
    }
    static fromProto(data) {
        return new MsgSubmitGroupProposal(data.groupPolicyAddress, data.proposers, data.metadata, data.messages.map(Msg_1.Msg.fromProto), data.exec, data.title, data.summary);
    }
    toProto() {
        const { group_policy_address, proposers, metadata, messages, exec, title, summary, } = this;
        return tx_1.MsgSubmitProposal.fromPartial({
            groupPolicyAddress: group_policy_address,
            proposers,
            metadata,
            messages: messages.map(msg => msg.packAny()),
            exec,
            title,
            summary,
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/cosmos.group.v1.MsgSubmitProposal',
            value: tx_1.MsgSubmitProposal.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgSubmitGroupProposal.fromProto(tx_1.MsgSubmitProposal.decode(msgAny.value));
    }
}
exports.MsgSubmitGroupProposal = MsgSubmitGroupProposal;
(function (MsgSubmitGroupProposal) {
    MsgSubmitGroupProposal.Exec = tx_1.Exec;
})(MsgSubmitGroupProposal || (exports.MsgSubmitGroupProposal = MsgSubmitGroupProposal = {}));
//# sourceMappingURL=MsgSubmitGroupProposal.js.map