"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgCreateGroup = void 0;
const json_1 = require("../../../util/json");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const GroupMember_1 = require("../GroupMember");
const tx_1 = require("@initia/initia.proto/cosmos/group/v1/tx");
class MsgCreateGroup extends json_1.JSONSerializable {
    /**
     * @param admin the account address of the group admin
     * @param members the group members
     * @param metadata any arbitrary metadata to attached to the group
     */
    constructor(admin, members, metadata) {
        super();
        this.admin = admin;
        this.members = members;
        this.metadata = metadata;
    }
    static fromAmino(data) {
        const { value: { admin, members, metadata }, } = data;
        return new MsgCreateGroup(admin, members.map(GroupMember_1.MemberRequest.fromAmino), metadata);
    }
    toAmino() {
        const { admin, members, metadata } = this;
        return {
            type: 'cosmos-sdk/MsgCreateGroup',
            value: {
                admin,
                members: members.map(d => d.toAmino()),
                metadata,
            },
        };
    }
    static fromData(data) {
        const { admin, members, metadata } = data;
        return new MsgCreateGroup(admin, members.map(GroupMember_1.MemberRequest.fromData), metadata);
    }
    toData() {
        const { admin, members, metadata } = this;
        return {
            '@type': '/cosmos.group.v1.MsgCreateGroup',
            admin,
            members: members.map(d => d.toData()),
            metadata,
        };
    }
    static fromProto(data) {
        return new MsgCreateGroup(data.admin, data.members.map(GroupMember_1.MemberRequest.fromProto), data.metadata);
    }
    toProto() {
        const { admin, members, metadata } = this;
        return tx_1.MsgCreateGroup.fromPartial({
            admin,
            members: members.map(d => d.toProto()),
            metadata,
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/cosmos.group.v1.MsgCreateGroup',
            value: tx_1.MsgCreateGroup.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgCreateGroup.fromProto(tx_1.MsgCreateGroup.decode(msgAny.value));
    }
}
exports.MsgCreateGroup = MsgCreateGroup;
//# sourceMappingURL=MsgCreateGroup.js.map