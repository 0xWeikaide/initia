"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgCreateGroupPolicy = void 0;
const json_1 = require("../../../util/json");
const policies_1 = require("../policies");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/cosmos/group/v1/tx");
const long_1 = __importDefault(require("long"));
class MsgCreateGroupPolicy extends json_1.JSONSerializable {
    /**
     * @param admin the account address of the group admin
     * @param group_id the unique ID of the group
     * @param metadata any arbitrary metadata attached to the group policy
     * @param decision_policy specifies the group policy's decision policy
     */
    constructor(admin, group_id, metadata, decision_policy) {
        super();
        this.admin = admin;
        this.group_id = group_id;
        this.metadata = metadata;
        this.decision_policy = decision_policy;
    }
    static fromAmino(data) {
        const { value: { admin, group_id, metadata, decision_policy }, } = data;
        return new MsgCreateGroupPolicy(admin, Number.parseInt(group_id), metadata, policies_1.DecisionPolicy.fromAmino(decision_policy));
    }
    toAmino() {
        const { admin, group_id, metadata, decision_policy } = this;
        return {
            type: 'cosmos-sdk/MsgCreateGroupPolicy',
            value: {
                admin,
                group_id: group_id.toString(),
                metadata,
                decision_policy: decision_policy.toAmino(),
            },
        };
    }
    static fromData(data) {
        const { admin, group_id, metadata, decision_policy } = data;
        return new MsgCreateGroupPolicy(admin, Number.parseInt(group_id), metadata, policies_1.DecisionPolicy.fromData(decision_policy));
    }
    toData() {
        const { admin, group_id, metadata, decision_policy } = this;
        return {
            '@type': '/cosmos.group.v1.MsgCreateGroupPolicy',
            admin,
            group_id: group_id.toString(),
            metadata,
            decision_policy: decision_policy.toData(),
        };
    }
    static fromProto(data) {
        return new MsgCreateGroupPolicy(data.admin, data.groupId.toNumber(), data.metadata, policies_1.DecisionPolicy.fromProto(data.decisionPolicy));
    }
    toProto() {
        const { admin, group_id, metadata, decision_policy } = this;
        return tx_1.MsgCreateGroupPolicy.fromPartial({
            admin,
            groupId: long_1.default.fromNumber(group_id),
            metadata,
            decisionPolicy: decision_policy.packAny(),
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/cosmos.group.v1.MsgCreateGroupPolicy',
            value: tx_1.MsgCreateGroupPolicy.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgCreateGroupPolicy.fromProto(tx_1.MsgCreateGroupPolicy.decode(msgAny.value));
    }
}
exports.MsgCreateGroupPolicy = MsgCreateGroupPolicy;
//# sourceMappingURL=MsgCreateGroupPolicy.js.map