"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgGroupVote = void 0;
const json_1 = require("../../../util/json");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/cosmos/group/v1/tx");
const types_1 = require("@initia/initia.proto/cosmos/group/v1/types");
const long_1 = __importDefault(require("long"));
class MsgGroupVote extends json_1.JSONSerializable {
    /**
     * @param proposal_id the unique ID of the proposal
     * @param voter the voter account address
     * @param option the voter's choice on the proposal
     * @param metadata any arbitrary metadata attached to the vote
     * @param exec whether the proposal should be executed immediately after voting or not
     */
    constructor(proposal_id, voter, option, metadata, exec) {
        super();
        this.proposal_id = proposal_id;
        this.voter = voter;
        this.option = option;
        this.metadata = metadata;
        this.exec = exec;
    }
    static fromAmino(data) {
        const { value: { proposal_id, voter, option, metadata, exec }, } = data;
        return new MsgGroupVote(Number.parseInt(proposal_id), voter, (0, types_1.voteOptionFromJSON)(option), metadata, (0, tx_1.execFromJSON)(exec));
    }
    toAmino() {
        const { proposal_id, voter, option, metadata, exec } = this;
        return {
            type: 'cosmos-sdk/group/MsgVote',
            value: {
                proposal_id: proposal_id.toString(),
                voter,
                option: (0, types_1.voteOptionToJSON)(option),
                metadata,
                exec: (0, tx_1.execToJSON)(exec),
            },
        };
    }
    static fromData(data) {
        const { proposal_id, voter, option, metadata, exec } = data;
        return new MsgGroupVote(Number.parseInt(proposal_id), voter, (0, types_1.voteOptionFromJSON)(option), metadata, (0, tx_1.execFromJSON)(exec));
    }
    toData() {
        const { proposal_id, voter, option, metadata, exec } = this;
        return {
            '@type': '/cosmos.group.v1.MsgVote',
            proposal_id: proposal_id.toString(),
            voter,
            option: (0, types_1.voteOptionToJSON)(option),
            metadata,
            exec: (0, tx_1.execToJSON)(exec),
        };
    }
    static fromProto(data) {
        return new MsgGroupVote(data.proposalId.toNumber(), data.voter, data.option, data.metadata, data.exec);
    }
    toProto() {
        const { proposal_id, voter, option, metadata, exec } = this;
        return tx_1.MsgVote.fromPartial({
            proposalId: long_1.default.fromNumber(proposal_id),
            voter,
            option,
            metadata,
            exec,
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/cosmos.group.v1.MsgVote',
            value: tx_1.MsgVote.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgGroupVote.fromProto(tx_1.MsgVote.decode(msgAny.value));
    }
}
exports.MsgGroupVote = MsgGroupVote;
(function (MsgGroupVote) {
    MsgGroupVote.Option = types_1.VoteOption;
    MsgGroupVote.Exec = tx_1.Exec;
})(MsgGroupVote || (exports.MsgGroupVote = MsgGroupVote = {}));
//# sourceMappingURL=MsgGroupVote.js.map