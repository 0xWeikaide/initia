"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgCreateGroupWithPolicy = void 0;
const json_1 = require("../../../util/json");
const policies_1 = require("../policies");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const GroupMember_1 = require("../GroupMember");
const tx_1 = require("@initia/initia.proto/cosmos/group/v1/tx");
class MsgCreateGroupWithPolicy extends json_1.JSONSerializable {
    /**
     * @param admin the account address of the group and group policy admin
     * @param members the group members
     * @param group_metadata any arbitrary metadata attached to the group
     * @param group_policy_metadata any arbitrary metadata attached to the group policy
     * @param group_policy_as_admin if set to true, the group policy account address will be used as group/group policy admin
     * @param decision_policy specifies the group policy's decision policy
     */
    constructor(admin, members, group_metadata, group_policy_metadata, group_policy_as_admin, decision_policy) {
        super();
        this.admin = admin;
        this.members = members;
        this.group_metadata = group_metadata;
        this.group_policy_metadata = group_policy_metadata;
        this.group_policy_as_admin = group_policy_as_admin;
        this.decision_policy = decision_policy;
    }
    static fromAmino(data) {
        const { value: { admin, members, group_metadata, group_policy_metadata, group_policy_as_admin, decision_policy, }, } = data;
        return new MsgCreateGroupWithPolicy(admin, members.map(GroupMember_1.MemberRequest.fromAmino), group_metadata, group_policy_metadata, group_policy_as_admin, policies_1.DecisionPolicy.fromAmino(decision_policy));
    }
    toAmino() {
        const { admin, members, group_metadata, group_policy_metadata, group_policy_as_admin, decision_policy, } = this;
        return {
            type: 'cosmos-sdk/MsgCreateGroupWithPolicy',
            value: {
                admin,
                members: members.map(d => d.toAmino()),
                group_metadata,
                group_policy_metadata,
                group_policy_as_admin,
                decision_policy: decision_policy.toAmino(),
            },
        };
    }
    static fromData(data) {
        const { admin, members, group_metadata, group_policy_metadata, group_policy_as_admin, decision_policy, } = data;
        return new MsgCreateGroupWithPolicy(admin, members.map(GroupMember_1.MemberRequest.fromData), group_metadata, group_policy_metadata, group_policy_as_admin, policies_1.DecisionPolicy.fromData(decision_policy));
    }
    toData() {
        const { admin, members, group_metadata, group_policy_metadata, group_policy_as_admin, decision_policy, } = this;
        return {
            '@type': '/cosmos.group.v1.MsgCreateGroupWithPolicy',
            admin,
            members: members.map(d => d.toData()),
            group_metadata,
            group_policy_metadata,
            group_policy_as_admin,
            decision_policy: decision_policy.toData(),
        };
    }
    static fromProto(data) {
        return new MsgCreateGroupWithPolicy(data.admin, data.members.map(GroupMember_1.MemberRequest.fromProto), data.groupMetadata, data.groupPolicyMetadata, data.groupPolicyAsAdmin, policies_1.DecisionPolicy.fromProto(data.decisionPolicy));
    }
    toProto() {
        const { admin, members, group_metadata, group_policy_metadata, group_policy_as_admin, decision_policy, } = this;
        return tx_1.MsgCreateGroupWithPolicy.fromPartial({
            admin,
            members: members.map(d => d.toProto()),
            groupMetadata: group_metadata,
            groupPolicyMetadata: group_policy_metadata,
            groupPolicyAsAdmin: group_policy_as_admin,
            decisionPolicy: decision_policy.packAny(),
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/cosmos.group.v1.MsgCreateGroupWithPolicy',
            value: tx_1.MsgCreateGroupWithPolicy.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgCreateGroupWithPolicy.fromProto(tx_1.MsgCreateGroupWithPolicy.decode(msgAny.value));
    }
}
exports.MsgCreateGroupWithPolicy = MsgCreateGroupWithPolicy;
//# sourceMappingURL=MsgCreateGroupWithPolicy.js.map