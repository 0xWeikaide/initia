"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgUpdateGroupDecisionPolicy = void 0;
const json_1 = require("../../../util/json");
const policies_1 = require("../policies");
const any_1 = require("@initia/initia.proto/google/protobuf/any");
const tx_1 = require("@initia/initia.proto/cosmos/group/v1/tx");
class MsgUpdateGroupDecisionPolicy extends json_1.JSONSerializable {
    /**
     * @param admin the account address of the group admin
     * @param group_policy_address the account address of group policy
     * @param decision_policy the updated group policy's decision policy
     */
    constructor(admin, group_policy_address, decision_policy) {
        super();
        this.admin = admin;
        this.group_policy_address = group_policy_address;
        this.decision_policy = decision_policy;
    }
    static fromAmino(data) {
        const { value: { admin, group_policy_address, decision_policy }, } = data;
        return new MsgUpdateGroupDecisionPolicy(admin, group_policy_address, policies_1.DecisionPolicy.fromAmino(decision_policy));
    }
    toAmino() {
        const { admin, group_policy_address, decision_policy } = this;
        return {
            type: 'cosmos-sdk/MsgUpdateGroupDecisionPolicy',
            value: {
                admin,
                group_policy_address,
                decision_policy: decision_policy.toAmino(),
            },
        };
    }
    static fromData(data) {
        const { admin, group_policy_address, decision_policy } = data;
        return new MsgUpdateGroupDecisionPolicy(admin, group_policy_address, policies_1.DecisionPolicy.fromData(decision_policy));
    }
    toData() {
        const { admin, group_policy_address, decision_policy } = this;
        return {
            '@type': '/cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy',
            admin,
            group_policy_address,
            decision_policy: decision_policy.toData(),
        };
    }
    static fromProto(data) {
        return new MsgUpdateGroupDecisionPolicy(data.admin, data.groupPolicyAddress, policies_1.DecisionPolicy.fromProto(data.decisionPolicy));
    }
    toProto() {
        const { admin, group_policy_address, decision_policy } = this;
        return tx_1.MsgUpdateGroupPolicyDecisionPolicy.fromPartial({
            admin,
            groupPolicyAddress: group_policy_address,
            decisionPolicy: decision_policy.packAny(),
        });
    }
    packAny() {
        return any_1.Any.fromPartial({
            typeUrl: '/cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy',
            value: tx_1.MsgUpdateGroupPolicyDecisionPolicy.encode(this.toProto()).finish(),
        });
    }
    static unpackAny(msgAny) {
        return MsgUpdateGroupDecisionPolicy.fromProto(tx_1.MsgUpdateGroupPolicyDecisionPolicy.decode(msgAny.value));
    }
}
exports.MsgUpdateGroupDecisionPolicy = MsgUpdateGroupDecisionPolicy;
//# sourceMappingURL=MsgUpdateGroupDecisionPolicy.js.map