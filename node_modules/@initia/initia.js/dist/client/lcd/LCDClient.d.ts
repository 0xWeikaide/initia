import { APIRequester } from './APIRequester';
import { AuctionAPI, AuthAPI, AuthzAPI, BankAPI, DistributionAPI, EvidenceAPI, EvmAPI, FeeGrantAPI, ForwardingAPI, GovAPI, GroupAPI, IbcAPI, IbcFetchpriceAPI, IbcHooksAPI, IbcNftAPI, IbcTransferAPI, IbcPermAPI, InterTxAPI, MoveAPI, MstakingAPI, OpchildAPI, OphostAPI, OracleAPI, RewardAPI, SlashingAPI, TendermintAPI, TokenfactoryAPI, TxAPI, UpgradeAPI, WasmAPI } from './api';
import { Wallet } from './Wallet';
import { Coins } from '../../core';
import { Key } from '../../key';
export interface LCDClientConfig {
    /**
     * Chain ID of the blockchain to connect to.
     */
    chainId?: string;
    /**
     * Coins representing the default gas prices to use for fee estimation.
     */
    gasPrices?: Coins.Input;
    /**
     * Number presenting the default gas adjustment value to use for fee estimation.
     */
    gasAdjustment?: string;
}
/**
 * An object repesenting a connection to a initiad node running the Lite Client Daemon (LCD)
 * server, a REST server providing access to a node.
 *
 * ### Example
 *
 * ```ts
 * import { LCDClient } from 'initia.js';
 *
 * const initia = new LCDClient("https://stone-rest.initia.tech", {
 *    chainId: "testnet"
 * });
 * ```
 */
export declare class LCDClient {
    URL: string;
    config: LCDClientConfig;
    apiRequester: APIRequester;
    auction: AuctionAPI;
    auth: AuthAPI;
    authz: AuthzAPI;
    bank: BankAPI;
    distribution: DistributionAPI;
    evidence: EvidenceAPI;
    evm: EvmAPI;
    feeGrant: FeeGrantAPI;
    forwarding: ForwardingAPI;
    gov: GovAPI;
    group: GroupAPI;
    ibc: IbcAPI;
    ibcFetchprice: IbcFetchpriceAPI;
    ibcHooks: IbcHooksAPI;
    ibcNft: IbcNftAPI;
    ibcTransfer: IbcTransferAPI;
    ibcPerm: IbcPermAPI;
    interTx: InterTxAPI;
    move: MoveAPI;
    mstaking: MstakingAPI;
    opchild: OpchildAPI;
    ophost: OphostAPI;
    oracle: OracleAPI;
    reward: RewardAPI;
    slashing: SlashingAPI;
    tendermint: TendermintAPI;
    tokenfactory: TokenfactoryAPI;
    tx: TxAPI;
    upgrade: UpgradeAPI;
    wasm: WasmAPI;
    /**
     * Creates a new LCD client with the specified configuration.
     *
     * @param config LCD configuration
     */
    constructor(URL: string, config?: LCDClientConfig, apiRequester?: APIRequester);
    /** Creates a new wallet with the Key. */
    wallet(key: Key): Wallet;
}
