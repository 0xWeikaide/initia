"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OphostAPI = void 0;
const BaseAPI_1 = require("./BaseAPI");
const core_1 = require("../../../core");
class OphostAPI extends BaseAPI_1.BaseAPI {
    bridgeInfos(params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/opinit/ophost/v1/bridges`, params)
                .then(d => [d.bridges.map(core_1.BridgeInfo.fromData), d.pagination]);
        });
    }
    bridgeInfo(bridgeId, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/opinit/ophost/v1/bridges/${bridgeId}`, params)
                .then(d => core_1.BridgeInfo.fromData(d));
        });
    }
    tokenPairs(bridgeId, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/opinit/ophost/v1/bridges/${bridgeId}/token_pairs`, params)
                .then(d => [d.token_pairs, d.pagination]);
        });
    }
    tokenPairByL1Denom(bridgeId, l1Denom, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/opinit/ophost/v1/bridges/${bridgeId}/token_pairs/by_l1_denom`, Object.assign(Object.assign({}, params), { l1_denom: l1Denom }))
                .then(d => d.token_pair);
        });
    }
    tokenPairByL2Denom(bridgeId, l2Denom, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/opinit/ophost/v1/bridges/${bridgeId}/token_pairs/by_l2_denom`, Object.assign(Object.assign({}, params), { l2_denom: l2Denom }))
                .then(d => d.token_pair);
        });
    }
    lastFinalizedOutput(bridgeId, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/opinit/ophost/v1/bridges/${bridgeId}/last_finalized_output`, params)
                .then(d => ({
                output_index: Number.parseInt(d.output_index),
                output_proposal: core_1.Output.fromData(d.output_proposal),
            }));
        });
    }
    outputInfos(bridgeId, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/opinit/ophost/v1/bridges/${bridgeId}/outputs`, params)
                .then(d => [
                d.output_proposals.map(info => {
                    var _a;
                    return ({
                        bridge_id: Number.parseInt((_a = info.bridge_id) !== null && _a !== void 0 ? _a : `${bridgeId}`),
                        output_index: Number.parseInt(info.output_index),
                        output_proposal: core_1.Output.fromData(info.output_proposal),
                    });
                }),
                d.pagination,
            ]);
        });
    }
    outputInfo(bridgeId, outputIndex, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/opinit/ophost/v1/bridges/${bridgeId}/outputs/${outputIndex}`, params)
                .then(d => {
                var _a;
                return ({
                    bridge_id: Number.parseInt((_a = d.bridge_id) !== null && _a !== void 0 ? _a : `${bridgeId}`),
                    output_index: Number.parseInt(d.output_index),
                    output_proposal: core_1.Output.fromData(d.output_proposal),
                });
            });
        });
    }
    parameters(params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/opinit/opchild/v1/params`, params)
                .then(d => core_1.OphostParams.fromData(d.params));
        });
    }
}
exports.OphostAPI = OphostAPI;
//# sourceMappingURL=OphostAPI.js.map