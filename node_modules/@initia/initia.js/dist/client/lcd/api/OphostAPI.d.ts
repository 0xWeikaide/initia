import { BaseAPI } from './BaseAPI';
import { APIParams, Pagination, PaginationOptions } from '../APIRequester';
import { OphostParams, Output, BridgeInfo } from '../../../core';
export interface TokenPair {
    l1_denom: string;
    l2_denom: string;
}
export interface OutputInfo {
    bridge_id?: number;
    output_index: number;
    output_proposal: Output;
}
export declare namespace OutputInfo {
    interface Data {
        bridge_id?: string;
        output_index: string;
        output_proposal: Output.Data;
    }
}
export declare class OphostAPI extends BaseAPI {
    bridgeInfos(params?: Partial<PaginationOptions & APIParams>): Promise<[BridgeInfo[], Pagination]>;
    bridgeInfo(bridgeId: number, params?: APIParams): Promise<BridgeInfo>;
    tokenPairs(bridgeId: number, params?: Partial<PaginationOptions & APIParams>): Promise<[TokenPair[], Pagination]>;
    tokenPairByL1Denom(bridgeId: number, l1Denom: string, params?: APIParams): Promise<TokenPair>;
    tokenPairByL2Denom(bridgeId: number, l2Denom: string, params?: APIParams): Promise<TokenPair>;
    lastFinalizedOutput(bridgeId: number, params?: Partial<PaginationOptions & APIParams>): Promise<OutputInfo>;
    outputInfos(bridgeId: number, params?: Partial<PaginationOptions & APIParams>): Promise<[OutputInfo[], Pagination]>;
    outputInfo(bridgeId: number, outputIndex: number, params?: APIParams): Promise<OutputInfo>;
    parameters(params?: APIParams): Promise<OphostParams>;
}
