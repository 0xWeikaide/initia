"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IbcNftAPI = void 0;
const BaseAPI_1 = require("./BaseAPI");
const core_1 = require("../../../core");
class IbcNftAPI extends BaseAPI_1.BaseAPI {
    /** Gets a classTrace for the hash */
    classTrace(hash) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/ibc/apps/nft_transfer/v1/class_traces/${hash}`)
                .then(d => core_1.NftClassTrace.fromData(d.class_trace));
        });
    }
    /** Gets a list of classTraces */
    classTraces(params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/ibc/apps/nft_transfer/v1/class_traces`, params)
                .then(d => [d.class_traces.map(core_1.NftClassTrace.fromData), d.pagination]);
        });
    }
    /** Gets a class id hash information */
    classHash(trace) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.c
                .get(`/ibc/apps/nft_transfer/v1/class_hashes/${trace}`)
                .then(d => d.hash);
        });
    }
    /**
     * Gets the current nft transfer application parameters.
     */
    parameters(params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/ibc/apps/nft_transfer/v1/params`, params)
                .then(({ params: d }) => core_1.IbcNftParams.fromData(d));
        });
    }
    /** Gets the escrow address for a particular port and channel id */
    escrowAddress(channel_id, port_id, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/ibc/apps/nft_transfer/v1/channels/${channel_id}/ports/${port_id}/escrow_address`, params)
                .then(d => d.escrow_address);
        });
    }
}
exports.IbcNftAPI = IbcNftAPI;
//# sourceMappingURL=IbcNftAPI.js.map