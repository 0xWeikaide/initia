import { BaseAPI } from './BaseAPI';
import { AccAddress, Denom, MoveParams } from '../../../core';
import { APIParams, Pagination, PaginationOptions } from '../APIRequester';
import { UpgradePolicy } from '@initia/initia.proto/initia/move/v1/types';
export interface Module {
    address: AccAddress;
    module_name: string;
    abi: string;
    raw_bytes: string;
    upgrade_policy: UpgradePolicy;
}
export interface Resource {
    address: AccAddress;
    struct_tag: string;
    move_resource: string;
    raw_bytes: string;
}
export interface ABI {
    abi: string;
}
export interface TableEntry {
    address: AccAddress;
    key: string;
    value: string;
}
export interface TableInfo {
    address: AccAddress;
    key_type: string;
    value_type: string;
}
export interface ViewRequest {
    address: AccAddress;
    module_name: string;
    function_name: string;
    type_args: string[];
    args: string[];
}
export interface ViewResponse {
    data: string;
    events: VMEvent[];
    gas_used: string;
}
export interface VMEvent {
    type_tag: string;
    data: string;
}
export declare class MoveAPI extends BaseAPI {
    modules(address: AccAddress, params?: Partial<PaginationOptions & APIParams>): Promise<[Module[], Pagination]>;
    module(address: AccAddress, moduleName: string, params?: APIParams): Promise<Module>;
    viewFunction<T>(address: AccAddress, moduleName: string, functionName: string, typeArgs?: string[], args?: string[]): Promise<T>;
    /**
     * Query view function with not encoded arguments and abi.
     * Arguments will be bcs encoded with type informations from abi.
     *
     * @param address
     * @param moduleName
     * @param functionName
     * @param typeArgs
     * @param args // not encoded arguments
     * @param abi // base64 encoded module abi
     * @returns
     */
    viewFunctionWithABI<T>(abi: string, address: AccAddress, moduleName: string, functionName: string, typeArgs?: string[], args?: any[]): Promise<T>;
    view(address: AccAddress, moduleName: string, functionName: string, typeArgs?: string[], args?: string[]): Promise<ViewResponse>;
    viewBatch(requests: ViewRequest[]): Promise<ViewResponse[]>;
    viewJSON(address: AccAddress, moduleName: string, functionName: string, typeArgs?: string[], args?: string[]): Promise<ViewResponse>;
    viewBatchJSON(requests: ViewRequest[]): Promise<ViewResponse[]>;
    resources(address: AccAddress, params?: Partial<PaginationOptions & APIParams>): Promise<[{
        type: string;
        data: any;
    }[], Pagination]>;
    resource<T>(address: AccAddress, structTag: string, params?: APIParams): Promise<{
        type: string;
        data: T;
    }>;
    denom(metadata: string, params?: APIParams): Promise<Denom>;
    metadata(denom: Denom, params?: APIParams): Promise<string>;
    parameters(params?: APIParams): Promise<MoveParams>;
    scriptABI(codeBytes: string): Promise<ABI>;
    tableInfo(address: AccAddress, params?: APIParams): Promise<TableInfo>;
    tableEntries(address: AccAddress, params?: Partial<PaginationOptions & APIParams>): Promise<[TableEntry[], Pagination]>;
    tableEntry(address: AccAddress, keyBytes: string, params?: APIParams): Promise<TableEntry>;
}
