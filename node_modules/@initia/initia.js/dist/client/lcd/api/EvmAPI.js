"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EvmAPI = void 0;
const core_1 = require("../../../core");
const BaseAPI_1 = require("./BaseAPI");
class EvmAPI extends BaseAPI_1.BaseAPI {
    code(contractAddr, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/minievm/evm/v1/codes/${contractAddr}`, params)
                .then(d => d.code);
        });
    }
    state(contractAddr, key, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/minievm/evm/v1/states/${contractAddr}/${key}`, params)
                .then(d => d.value);
        });
    }
    contractAddrByDenom(denom, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/minievm/evm/v1/contracts/by_denom`, Object.assign(Object.assign({}, params), { denom }))
                .then(d => d.address);
        });
    }
    denom(contractAddr, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/minievm/evm/v1/denoms/${contractAddr}`, params)
                .then(d => d.denom);
        });
    }
    call(sender, contractAddr, input, withTrace) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c.post(`/minievm/evm/v1/call`, {
                sender,
                contract_addr: contractAddr,
                input,
                with_trace: withTrace,
            });
        });
    }
    parameters(params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/minievm/evm/v1/params`, params)
                .then(({ params: d }) => core_1.EvmParams.fromData(d));
        });
    }
}
exports.EvmAPI = EvmAPI;
//# sourceMappingURL=EvmAPI.js.map