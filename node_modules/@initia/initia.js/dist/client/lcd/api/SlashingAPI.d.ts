import { BaseAPI } from './BaseAPI';
import { ValConsAddress, SlashingParams } from '../../../core';
import { APIParams } from '../APIRequester';
export interface SigningInfo {
    /** Validator's consensus address. */
    address: ValConsAddress;
    /** Number of blocks over which missed blocks are tallied for downtime. */
    start_height: number;
    /** If a validator misses more than this number, they will be penalized and jailed for downtime. */
    index_offset: number;
    /** If the current validator is jailed, this value represents when they can submit a [[MsgUnjail]] to unjail themselves. */
    jailed_until: Date;
    /** Whether or not the validator is "tombstoned", meaning they are forever barred from joining the validator process. */
    tombstoned: boolean;
    /** Number of blocks the validator has missed for the current signed blocks window. */
    missed_blocks_counter: number;
}
export declare namespace SigningInfo {
    interface Data {
        address: string;
        start_height: string;
        index_offset: string;
        jailed_until: string;
        tombstoned: boolean;
        missed_blocks_counter: string;
    }
}
export declare class SlashingAPI extends BaseAPI {
    signingInfo(valConsAddress: ValConsAddress, params?: APIParams): Promise<SigningInfo>;
    signingInfos(params?: APIParams): Promise<SigningInfo[]>;
    /**
     * Gets the current Slashing module's parameters.
     */
    parameters(params?: APIParams): Promise<SlashingParams>;
}
