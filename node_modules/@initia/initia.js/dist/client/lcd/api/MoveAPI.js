"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MoveAPI = void 0;
const BaseAPI_1 = require("./BaseAPI");
const core_1 = require("../../../core");
const util_1 = require("../../../util");
class MoveAPI extends BaseAPI_1.BaseAPI {
    modules(address, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/initia/move/v1/accounts/${address}/modules`, params)
                .then(d => [
                d.modules.map(mod => ({
                    address: mod.address,
                    module_name: mod.module_name,
                    abi: mod.abi,
                    raw_bytes: mod.raw_bytes,
                    upgrade_policy: mod.upgrade_policy,
                })),
                d.pagination,
            ]);
        });
    }
    module(address, moduleName, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/initia/move/v1/accounts/${address}/modules/${moduleName}`, params)
                .then(({ module: d }) => ({
                address: d.address,
                module_name: d.module_name,
                abi: d.abi,
                raw_bytes: d.raw_bytes,
                upgrade_policy: d.upgrade_policy,
            }));
        });
    }
    viewFunction(address, moduleName, functionName, typeArgs = [], args = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .post(`/initia/move/v1/accounts/${address}/modules/${moduleName}/view_functions/${functionName}`, {
                type_args: typeArgs,
                args,
            })
                .then(res => JSON.parse(res.data));
        });
    }
    /**
     * Query view function with not encoded arguments and abi.
     * Arguments will be bcs encoded with type informations from abi.
     *
     * @param address
     * @param moduleName
     * @param functionName
     * @param typeArgs
     * @param args // not encoded arguments
     * @param abi // base64 encoded module abi
     * @returns
     */
    viewFunctionWithABI(abi, address, moduleName, functionName, typeArgs = [], args = []) {
        return __awaiter(this, void 0, void 0, function* () {
            const module = JSON.parse(Buffer.from(abi, 'base64').toString());
            const functionAbi = module.exposed_functions.find(exposedFunction => exposedFunction.name === functionName);
            if (!functionAbi) {
                throw new Error('function not found');
            }
            return this.viewFunction(address, moduleName, functionName, typeArgs, (0, util_1.argsEncodeWithABI)(args, functionAbi));
        });
    }
    view(address, moduleName, functionName, typeArgs = [], args = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c.post(`/initia/move/v1/view`, {
                address,
                module_name: moduleName,
                function_name: functionName,
                type_args: typeArgs,
                args,
            });
        });
    }
    viewBatch(requests) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .post(`/initia/move/v1/view/batch`, {
                requests,
            })
                .then(d => d.responses);
        });
    }
    viewJSON(address, moduleName, functionName, typeArgs = [], args = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c.post(`/initia/move/v1/view/json`, {
                address,
                module_name: moduleName,
                function_name: functionName,
                type_args: typeArgs,
                args,
            });
        });
    }
    viewBatchJSON(requests) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .post(`/initia/move/v1/view/json/batch`, {
                requests,
            })
                .then(d => d.responses);
        });
    }
    resources(address, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/initia/move/v1/accounts/${address}/resources`, params)
                .then(d => [
                d.resources.map(res => JSON.parse(res.move_resource)),
                d.pagination,
            ]);
        });
    }
    resource(address, structTag, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/initia/move/v1/accounts/${address}/resources/by_struct_tag`, Object.assign(Object.assign({}, params), { struct_tag: structTag }))
                .then(({ resource: d }) => JSON.parse(d.move_resource));
        });
    }
    denom(metadata, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/initia/move/v1/denom`, Object.assign(Object.assign({}, params), { metadata }))
                .then(d => d.denom);
        });
    }
    metadata(denom, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/initia/move/v1/metadata`, Object.assign(Object.assign({}, params), { denom }))
                .then(d => d.metadata);
        });
    }
    parameters(params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/initia/move/v1/params`, params)
                .then(({ params: d }) => core_1.MoveParams.fromData(d));
        });
    }
    scriptABI(codeBytes) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c.post(`/initia/move/v1/script/abi`, {
                code_bytes: codeBytes,
            });
        });
    }
    tableInfo(address, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/initia/move/v1/tables/${address}`, params)
                .then(d => d.table_info);
        });
    }
    tableEntries(address, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/initia/move/v1/tables/${address}/entries`, params)
                .then(d => [d.table_entries, d.pagination]);
        });
    }
    tableEntry(address, keyBytes, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/initia/move/v1/tables/${address}/entries/by_key_bytes`, Object.assign(Object.assign({}, params), { key_bytes: keyBytes }))
                .then(d => d.table_entry);
        });
    }
}
exports.MoveAPI = MoveAPI;
//# sourceMappingURL=MoveAPI.js.map