"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GovAPI = void 0;
const BaseAPI_1 = require("./BaseAPI");
const core_1 = require("../../../core");
class GovAPI extends BaseAPI_1.BaseAPI {
    /**
     * Gets all proposals.
     */
    proposals(params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/initia/gov/v1/proposals`, params)
                .then(d => [d.proposals.map(core_1.Proposal.fromData), d.pagination]);
        });
    }
    /**
     * Get a specific proposal by its ID
     * @param proposalId proposal's ID
     */
    proposal(proposalId, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/initia/gov/v1/proposals/${proposalId}`, params)
                .then(d => core_1.Proposal.fromData(d.proposal));
        });
    }
    /**
     * Get the deposits for a proposal
     * @param proposalId proposal's ID
     */
    deposits(proposalId, _params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/cosmos/gov/v1/proposals/${proposalId}/deposits`, _params)
                .then(d => [
                d.deposits.map(deposit => core_1.Deposit.fromData(deposit)),
                d.pagination,
            ]);
        });
    }
    /**
     * Get the current votes for a proposal
     * @param proposalId proposal's ID
     */
    votes(proposalId, _params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/cosmos/gov/v1/proposals/${proposalId}/votes`, _params)
                .then(d => [d.votes.map(v => core_1.Vote.fromData(v)), d.pagination]);
        });
    }
    /**
     * Gets the current tally for a proposal.
     * @param proposalId proposal's ID
     */
    tally(proposalId, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/cosmos/gov/v1/proposals/${proposalId}/tally`, params)
                .then(d => d.tally);
        });
    }
    /** Gets the Gov module's current parameters  */
    parameters(params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/initia/gov/v1/params`, params)
                .then(d => core_1.GovParams.fromData(d.params));
        });
    }
    emergencyProposals(params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.c
                .get(`/initia/gov/v1/emergency_proposals`, params)
                .then(d => [
                d.proposals.map(prop => core_1.Proposal.fromData(prop)),
                d.pagination,
            ]);
        });
    }
}
exports.GovAPI = GovAPI;
//# sourceMappingURL=GovAPI.js.map