"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LCDClient = void 0;
const APIRequester_1 = require("./APIRequester");
const api_1 = require("./api");
const Wallet_1 = require("./Wallet");
const DEFAULT_LCD_OPTIONS = {
    gasAdjustment: '1.75',
};
const DEFAULT_GAS_PRICES_BY_CHAIN_ID = {
    default: {
        uinit: 0.15,
    },
};
/**
 * An object repesenting a connection to a initiad node running the Lite Client Daemon (LCD)
 * server, a REST server providing access to a node.
 *
 * ### Example
 *
 * ```ts
 * import { LCDClient } from 'initia.js';
 *
 * const initia = new LCDClient("https://stone-rest.initia.tech", {
 *    chainId: "testnet"
 * });
 * ```
 */
class LCDClient {
    /**
     * Creates a new LCD client with the specified configuration.
     *
     * @param config LCD configuration
     */
    constructor(URL, config, apiRequester) {
        var _a;
        this.URL = URL;
        this.config = Object.assign(Object.assign(Object.assign({}, DEFAULT_LCD_OPTIONS), { gasPrices: (_a = ((config === null || config === void 0 ? void 0 : config.chainId) && DEFAULT_GAS_PRICES_BY_CHAIN_ID[config.chainId])) !== null && _a !== void 0 ? _a : DEFAULT_GAS_PRICES_BY_CHAIN_ID['default'] }), config);
        this.apiRequester = apiRequester !== null && apiRequester !== void 0 ? apiRequester : new APIRequester_1.APIRequester(this.URL);
        // instantiate APIs
        this.auction = new api_1.AuctionAPI(this.apiRequester);
        this.auth = new api_1.AuthAPI(this.apiRequester);
        this.authz = new api_1.AuthzAPI(this.apiRequester);
        this.bank = new api_1.BankAPI(this.apiRequester);
        this.distribution = new api_1.DistributionAPI(this.apiRequester);
        this.evidence = new api_1.EvidenceAPI(this.apiRequester);
        this.evm = new api_1.EvmAPI(this.apiRequester);
        this.feeGrant = new api_1.FeeGrantAPI(this.apiRequester);
        this.forwarding = new api_1.ForwardingAPI(this.apiRequester);
        this.gov = new api_1.GovAPI(this.apiRequester);
        this.group = new api_1.GroupAPI(this.apiRequester);
        this.ibc = new api_1.IbcAPI(this.apiRequester);
        this.ibcFetchprice = new api_1.IbcFetchpriceAPI(this.apiRequester);
        this.ibcHooks = new api_1.IbcHooksAPI(this.apiRequester);
        this.ibcNft = new api_1.IbcNftAPI(this.apiRequester);
        this.ibcTransfer = new api_1.IbcTransferAPI(this.apiRequester);
        this.ibcPerm = new api_1.IbcPermAPI(this.apiRequester);
        this.interTx = new api_1.InterTxAPI(this.apiRequester);
        this.move = new api_1.MoveAPI(this.apiRequester);
        this.mstaking = new api_1.MstakingAPI(this.apiRequester);
        this.opchild = new api_1.OpchildAPI(this.apiRequester);
        this.ophost = new api_1.OphostAPI(this.apiRequester);
        this.oracle = new api_1.OracleAPI(this.apiRequester);
        this.reward = new api_1.RewardAPI(this.apiRequester);
        this.slashing = new api_1.SlashingAPI(this.apiRequester);
        this.tendermint = new api_1.TendermintAPI(this.apiRequester);
        this.tokenfactory = new api_1.TokenfactoryAPI(this.apiRequester);
        this.tx = new api_1.TxAPI(this);
        this.upgrade = new api_1.UpgradeAPI(this.apiRequester);
        this.wasm = new api_1.WasmAPI(this.apiRequester);
    }
    /** Creates a new wallet with the Key. */
    wallet(key) {
        return new Wallet_1.Wallet(this, key);
    }
}
exports.LCDClient = LCDClient;
//# sourceMappingURL=LCDClient.js.map