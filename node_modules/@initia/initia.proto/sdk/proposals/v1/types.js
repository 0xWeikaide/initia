"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProposalInfo_TxsByLaneEntry = exports.ProposalInfo = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "sdk.proposals.v1";
function createBaseProposalInfo() {
    return {
        txsByLane: new Map(),
        maxBlockSize: long_1.default.ZERO,
        maxGasLimit: long_1.default.UZERO,
        blockSize: long_1.default.ZERO,
        gasLimit: long_1.default.UZERO,
    };
}
exports.ProposalInfo = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        message.txsByLane.forEach((value, key) => {
            exports.ProposalInfo_TxsByLaneEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();
        });
        if (!message.maxBlockSize.isZero()) {
            writer.uint32(16).int64(message.maxBlockSize);
        }
        if (!message.maxGasLimit.isZero()) {
            writer.uint32(24).uint64(message.maxGasLimit);
        }
        if (!message.blockSize.isZero()) {
            writer.uint32(32).int64(message.blockSize);
        }
        if (!message.gasLimit.isZero()) {
            writer.uint32(40).uint64(message.gasLimit);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseProposalInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = exports.ProposalInfo_TxsByLaneEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.txsByLane.set(entry1.key, entry1.value);
                    }
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.maxBlockSize = reader.int64();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.maxGasLimit = reader.uint64();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.blockSize = reader.int64();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.gasLimit = reader.uint64();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            txsByLane: isObject(object.txsByLane)
                ? Object.entries(object.txsByLane).reduce((acc, [key, value]) => {
                    acc.set(key, long_1.default.fromValue(value));
                    return acc;
                }, new Map())
                : new Map(),
            maxBlockSize: isSet(object.maxBlockSize) ? long_1.default.fromValue(object.maxBlockSize) : long_1.default.ZERO,
            maxGasLimit: isSet(object.maxGasLimit) ? long_1.default.fromValue(object.maxGasLimit) : long_1.default.UZERO,
            blockSize: isSet(object.blockSize) ? long_1.default.fromValue(object.blockSize) : long_1.default.ZERO,
            gasLimit: isSet(object.gasLimit) ? long_1.default.fromValue(object.gasLimit) : long_1.default.UZERO,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.txsByLane) === null || _a === void 0 ? void 0 : _a.size) {
            obj.txsByLane = {};
            message.txsByLane.forEach((v, k) => {
                obj.txsByLane[k] = v.toString();
            });
        }
        if (!message.maxBlockSize.isZero()) {
            obj.maxBlockSize = (message.maxBlockSize || long_1.default.ZERO).toString();
        }
        if (!message.maxGasLimit.isZero()) {
            obj.maxGasLimit = (message.maxGasLimit || long_1.default.UZERO).toString();
        }
        if (!message.blockSize.isZero()) {
            obj.blockSize = (message.blockSize || long_1.default.ZERO).toString();
        }
        if (!message.gasLimit.isZero()) {
            obj.gasLimit = (message.gasLimit || long_1.default.UZERO).toString();
        }
        return obj;
    },
    create(base) {
        return exports.ProposalInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseProposalInfo();
        message.txsByLane = (() => {
            var _a;
            const m = new Map();
            ((_a = object.txsByLane) !== null && _a !== void 0 ? _a : new Map()).forEach((value, key) => {
                if (value !== undefined) {
                    m.set(key, long_1.default.fromValue(value));
                }
            });
            return m;
        })();
        message.maxBlockSize =
            object.maxBlockSize !== undefined && object.maxBlockSize !== null
                ? long_1.default.fromValue(object.maxBlockSize)
                : long_1.default.ZERO;
        message.maxGasLimit =
            object.maxGasLimit !== undefined && object.maxGasLimit !== null
                ? long_1.default.fromValue(object.maxGasLimit)
                : long_1.default.UZERO;
        message.blockSize =
            object.blockSize !== undefined && object.blockSize !== null
                ? long_1.default.fromValue(object.blockSize)
                : long_1.default.ZERO;
        message.gasLimit =
            object.gasLimit !== undefined && object.gasLimit !== null
                ? long_1.default.fromValue(object.gasLimit)
                : long_1.default.UZERO;
        return message;
    },
};
function createBaseProposalInfo_TxsByLaneEntry() {
    return { key: "", value: long_1.default.UZERO };
}
exports.ProposalInfo_TxsByLaneEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (!message.value.isZero()) {
            writer.uint32(16).uint64(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseProposalInfo_TxsByLaneEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.value = reader.uint64();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? long_1.default.fromValue(object.value) : long_1.default.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (!message.value.isZero()) {
            obj.value = (message.value || long_1.default.UZERO).toString();
        }
        return obj;
    },
    create(base) {
        return exports.ProposalInfo_TxsByLaneEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseProposalInfo_TxsByLaneEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value =
            object.value !== undefined && object.value !== null ? long_1.default.fromValue(object.value) : long_1.default.UZERO;
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=types.js.map