"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NonFungibleTokenPacketDataWasm = exports.NonFungibleTokenPacketData = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "ibc.applications.nft_transfer.v1";
function createBaseNonFungibleTokenPacketData() {
    return {
        classId: "",
        classUri: "",
        classData: "",
        tokenIds: [],
        tokenUris: [],
        tokenData: [],
        sender: "",
        receiver: "",
        memo: "",
    };
}
exports.NonFungibleTokenPacketData = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.classId !== "") {
            writer.uint32(10).string(message.classId);
        }
        if (message.classUri !== "") {
            writer.uint32(18).string(message.classUri);
        }
        if (message.classData !== "") {
            writer.uint32(26).string(message.classData);
        }
        for (const v of message.tokenIds) {
            writer.uint32(34).string(v);
        }
        for (const v of message.tokenUris) {
            writer.uint32(42).string(v);
        }
        for (const v of message.tokenData) {
            writer.uint32(50).string(v);
        }
        if (message.sender !== "") {
            writer.uint32(58).string(message.sender);
        }
        if (message.receiver !== "") {
            writer.uint32(66).string(message.receiver);
        }
        if (message.memo !== "") {
            writer.uint32(74).string(message.memo);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNonFungibleTokenPacketData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.classUri = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.classData = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.tokenIds.push(reader.string());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.tokenUris.push(reader.string());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.tokenData.push(reader.string());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.receiver = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.memo = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
            classUri: isSet(object.classUri) ? globalThis.String(object.classUri) : "",
            classData: isSet(object.classData) ? globalThis.String(object.classData) : "",
            tokenIds: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.tokenIds)
                ? object.tokenIds.map((e) => globalThis.String(e))
                : [],
            tokenUris: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.tokenUris)
                ? object.tokenUris.map((e) => globalThis.String(e))
                : [],
            tokenData: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.tokenData)
                ? object.tokenData.map((e) => globalThis.String(e))
                : [],
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            receiver: isSet(object.receiver) ? globalThis.String(object.receiver) : "",
            memo: isSet(object.memo) ? globalThis.String(object.memo) : "",
        };
    },
    toJSON(message) {
        var _a, _b, _c;
        const obj = {};
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        if (message.classUri !== "") {
            obj.classUri = message.classUri;
        }
        if (message.classData !== "") {
            obj.classData = message.classData;
        }
        if ((_a = message.tokenIds) === null || _a === void 0 ? void 0 : _a.length) {
            obj.tokenIds = message.tokenIds;
        }
        if ((_b = message.tokenUris) === null || _b === void 0 ? void 0 : _b.length) {
            obj.tokenUris = message.tokenUris;
        }
        if ((_c = message.tokenData) === null || _c === void 0 ? void 0 : _c.length) {
            obj.tokenData = message.tokenData;
        }
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.receiver !== "") {
            obj.receiver = message.receiver;
        }
        if (message.memo !== "") {
            obj.memo = message.memo;
        }
        return obj;
    },
    create(base) {
        return exports.NonFungibleTokenPacketData.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseNonFungibleTokenPacketData();
        message.classId = (_a = object.classId) !== null && _a !== void 0 ? _a : "";
        message.classUri = (_b = object.classUri) !== null && _b !== void 0 ? _b : "";
        message.classData = (_c = object.classData) !== null && _c !== void 0 ? _c : "";
        message.tokenIds = ((_d = object.tokenIds) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        message.tokenUris = ((_e = object.tokenUris) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        message.tokenData = ((_f = object.tokenData) === null || _f === void 0 ? void 0 : _f.map((e) => e)) || [];
        message.sender = (_g = object.sender) !== null && _g !== void 0 ? _g : "";
        message.receiver = (_h = object.receiver) !== null && _h !== void 0 ? _h : "";
        message.memo = (_j = object.memo) !== null && _j !== void 0 ? _j : "";
        return message;
    },
};
function createBaseNonFungibleTokenPacketDataWasm() {
    return {
        classId: "",
        classUri: "",
        classData: "",
        tokenIds: [],
        tokenUris: [],
        tokenData: [],
        sender: "",
        receiver: "",
        memo: "",
    };
}
exports.NonFungibleTokenPacketDataWasm = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.classId !== "") {
            writer.uint32(10).string(message.classId);
        }
        if (message.classUri !== "") {
            writer.uint32(18).string(message.classUri);
        }
        if (message.classData !== "") {
            writer.uint32(26).string(message.classData);
        }
        for (const v of message.tokenIds) {
            writer.uint32(34).string(v);
        }
        for (const v of message.tokenUris) {
            writer.uint32(42).string(v);
        }
        for (const v of message.tokenData) {
            writer.uint32(50).string(v);
        }
        if (message.sender !== "") {
            writer.uint32(58).string(message.sender);
        }
        if (message.receiver !== "") {
            writer.uint32(66).string(message.receiver);
        }
        if (message.memo !== "") {
            writer.uint32(74).string(message.memo);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNonFungibleTokenPacketDataWasm();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.classId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.classUri = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.classData = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.tokenIds.push(reader.string());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.tokenUris.push(reader.string());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.tokenData.push(reader.string());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.receiver = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.memo = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            classId: isSet(object.classId) ? globalThis.String(object.classId) : "",
            classUri: isSet(object.classUri) ? globalThis.String(object.classUri) : "",
            classData: isSet(object.classData) ? globalThis.String(object.classData) : "",
            tokenIds: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.tokenIds)
                ? object.tokenIds.map((e) => globalThis.String(e))
                : [],
            tokenUris: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.tokenUris)
                ? object.tokenUris.map((e) => globalThis.String(e))
                : [],
            tokenData: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.tokenData)
                ? object.tokenData.map((e) => globalThis.String(e))
                : [],
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            receiver: isSet(object.receiver) ? globalThis.String(object.receiver) : "",
            memo: isSet(object.memo) ? globalThis.String(object.memo) : "",
        };
    },
    toJSON(message) {
        var _a, _b, _c;
        const obj = {};
        if (message.classId !== "") {
            obj.classId = message.classId;
        }
        if (message.classUri !== "") {
            obj.classUri = message.classUri;
        }
        if (message.classData !== "") {
            obj.classData = message.classData;
        }
        if ((_a = message.tokenIds) === null || _a === void 0 ? void 0 : _a.length) {
            obj.tokenIds = message.tokenIds;
        }
        if ((_b = message.tokenUris) === null || _b === void 0 ? void 0 : _b.length) {
            obj.tokenUris = message.tokenUris;
        }
        if ((_c = message.tokenData) === null || _c === void 0 ? void 0 : _c.length) {
            obj.tokenData = message.tokenData;
        }
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.receiver !== "") {
            obj.receiver = message.receiver;
        }
        if (message.memo !== "") {
            obj.memo = message.memo;
        }
        return obj;
    },
    create(base) {
        return exports.NonFungibleTokenPacketDataWasm.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseNonFungibleTokenPacketDataWasm();
        message.classId = (_a = object.classId) !== null && _a !== void 0 ? _a : "";
        message.classUri = (_b = object.classUri) !== null && _b !== void 0 ? _b : "";
        message.classData = (_c = object.classData) !== null && _c !== void 0 ? _c : "";
        message.tokenIds = ((_d = object.tokenIds) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        message.tokenUris = ((_e = object.tokenUris) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        message.tokenData = ((_f = object.tokenData) === null || _f === void 0 ? void 0 : _f.map((e) => e)) || [];
        message.sender = (_g = object.sender) !== null && _g !== void 0 ? _g : "";
        message.receiver = (_h = object.receiver) !== null && _h !== void 0 ? _h : "";
        message.memo = (_j = object.memo) !== null && _j !== void 0 ? _j : "";
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=packet.js.map