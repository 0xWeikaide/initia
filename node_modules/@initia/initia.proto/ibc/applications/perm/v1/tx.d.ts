import { grpc } from "@improbable-eng/grpc-web";
import Long from "long";
import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "ibc.applications.perm.v1";
/**
 * MsgSetPermissionedRelayer defines msg to set permissioned relyer for
 * the specific ibc channel.
 */
export interface MsgSetPermissionedRelayer {
    /**
     * authority is the address that controls the module
     * (defaults to x/gov unless overwritten).
     */
    authority: string;
    portId: string;
    channelId: string;
    relayer: string;
}
/** MsgSetPermissionedRelayerResponse defines the Msg/SetPermissionedRelayer response type. */
export interface MsgSetPermissionedRelayerResponse {
}
export declare const MsgSetPermissionedRelayer: {
    encode(message: MsgSetPermissionedRelayer, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgSetPermissionedRelayer;
    fromJSON(object: any): MsgSetPermissionedRelayer;
    toJSON(message: MsgSetPermissionedRelayer): unknown;
    create(base?: DeepPartial<MsgSetPermissionedRelayer>): MsgSetPermissionedRelayer;
    fromPartial(object: DeepPartial<MsgSetPermissionedRelayer>): MsgSetPermissionedRelayer;
};
export declare const MsgSetPermissionedRelayerResponse: {
    encode(_: MsgSetPermissionedRelayerResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgSetPermissionedRelayerResponse;
    fromJSON(_: any): MsgSetPermissionedRelayerResponse;
    toJSON(_: MsgSetPermissionedRelayerResponse): unknown;
    create(base?: DeepPartial<MsgSetPermissionedRelayerResponse>): MsgSetPermissionedRelayerResponse;
    fromPartial(_: DeepPartial<MsgSetPermissionedRelayerResponse>): MsgSetPermissionedRelayerResponse;
};
/** Msg defines the ibc/perm Msg service */
export interface Msg {
    /** SetPermissionedRelayer defines a rpc handler method for MsgSetPermissionedRelayer. */
    SetPermissionedRelayer(request: DeepPartial<MsgSetPermissionedRelayer>, metadata?: grpc.Metadata): Promise<MsgSetPermissionedRelayerResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    constructor(rpc: Rpc);
    SetPermissionedRelayer(request: DeepPartial<MsgSetPermissionedRelayer>, metadata?: grpc.Metadata): Promise<MsgSetPermissionedRelayerResponse>;
}
export declare const MsgDesc: {
    serviceName: string;
};
export declare const MsgSetPermissionedRelayerDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
        upStreamRetryCodes?: number[];
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export declare class GrpcWebError extends globalThis.Error {
    code: grpc.Code;
    metadata: grpc.Metadata;
    constructor(message: string, code: grpc.Code, metadata: grpc.Metadata);
}
export {};
