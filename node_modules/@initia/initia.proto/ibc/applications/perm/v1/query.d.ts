import { grpc } from "@improbable-eng/grpc-web";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { PageRequest, PageResponse } from "../../../../cosmos/base/query/v1beta1/pagination";
import { PermissionedRelayer } from "./types";
export declare const protobufPackage = "ibc.applications.perm.v1";
/**
 * QueryPermissionedRelayerRequest is the request type for the Query/PermissionedRelayer RPC
 * method
 */
export interface QueryPermissionedRelayerRequest {
    portId: string;
    channelId: string;
}
/**
 * QueryPermissionedRelayerResponse is the response type for the Query/PermissionedRelayer RPC
 * method.
 */
export interface QueryPermissionedRelayerResponse {
    /** class_trace returns the requested class id trace information. */
    permissionedRelayer?: PermissionedRelayer | undefined;
}
/**
 * QueryPermissionedRelayersRequest is the request type for the Query/PermissionedRelayers RPC
 * method
 */
export interface QueryPermissionedRelayersRequest {
    /** pagination defines an optional pagination for the request. */
    pagination?: PageRequest | undefined;
}
/**
 * QueryPermissionedRelayersResponse is the response type for the Query/PermissionedRelayers RPC
 * method.
 */
export interface QueryPermissionedRelayersResponse {
    /** class_trace returns the requested class id trace information. */
    permissionedRelayers: PermissionedRelayer[];
    /** pagination defines the pagination in the response. */
    pagination?: PageResponse | undefined;
}
export declare const QueryPermissionedRelayerRequest: {
    encode(message: QueryPermissionedRelayerRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryPermissionedRelayerRequest;
    fromJSON(object: any): QueryPermissionedRelayerRequest;
    toJSON(message: QueryPermissionedRelayerRequest): unknown;
    create(base?: DeepPartial<QueryPermissionedRelayerRequest>): QueryPermissionedRelayerRequest;
    fromPartial(object: DeepPartial<QueryPermissionedRelayerRequest>): QueryPermissionedRelayerRequest;
};
export declare const QueryPermissionedRelayerResponse: {
    encode(message: QueryPermissionedRelayerResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryPermissionedRelayerResponse;
    fromJSON(object: any): QueryPermissionedRelayerResponse;
    toJSON(message: QueryPermissionedRelayerResponse): unknown;
    create(base?: DeepPartial<QueryPermissionedRelayerResponse>): QueryPermissionedRelayerResponse;
    fromPartial(object: DeepPartial<QueryPermissionedRelayerResponse>): QueryPermissionedRelayerResponse;
};
export declare const QueryPermissionedRelayersRequest: {
    encode(message: QueryPermissionedRelayersRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryPermissionedRelayersRequest;
    fromJSON(object: any): QueryPermissionedRelayersRequest;
    toJSON(message: QueryPermissionedRelayersRequest): unknown;
    create(base?: DeepPartial<QueryPermissionedRelayersRequest>): QueryPermissionedRelayersRequest;
    fromPartial(object: DeepPartial<QueryPermissionedRelayersRequest>): QueryPermissionedRelayersRequest;
};
export declare const QueryPermissionedRelayersResponse: {
    encode(message: QueryPermissionedRelayersResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryPermissionedRelayersResponse;
    fromJSON(object: any): QueryPermissionedRelayersResponse;
    toJSON(message: QueryPermissionedRelayersResponse): unknown;
    create(base?: DeepPartial<QueryPermissionedRelayersResponse>): QueryPermissionedRelayersResponse;
    fromPartial(object: DeepPartial<QueryPermissionedRelayersResponse>): QueryPermissionedRelayersResponse;
};
/** Query provides defines the gRPC querier service. */
export interface Query {
    /** PermissionedRelayer queries a permissioned ibc relayer for the specific channel. */
    PermissionedRelayer(request: DeepPartial<QueryPermissionedRelayerRequest>, metadata?: grpc.Metadata): Promise<QueryPermissionedRelayerResponse>;
    /** PermissionedRelayers queries a permissioned ibc relayers. */
    PermissionedRelayers(request: DeepPartial<QueryPermissionedRelayersRequest>, metadata?: grpc.Metadata): Promise<QueryPermissionedRelayersResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    PermissionedRelayer(request: DeepPartial<QueryPermissionedRelayerRequest>, metadata?: grpc.Metadata): Promise<QueryPermissionedRelayerResponse>;
    PermissionedRelayers(request: DeepPartial<QueryPermissionedRelayersRequest>, metadata?: grpc.Metadata): Promise<QueryPermissionedRelayersResponse>;
}
export declare const QueryDesc: {
    serviceName: string;
};
export declare const QueryPermissionedRelayerDesc: UnaryMethodDefinitionish;
export declare const QueryPermissionedRelayersDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
        upStreamRetryCodes?: number[];
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export declare class GrpcWebError extends globalThis.Error {
    code: grpc.Code;
    metadata: grpc.Metadata;
    constructor(message: string, code: grpc.Code, metadata: grpc.Metadata);
}
export {};
