"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Params = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const duration_1 = require("../../../../google/protobuf/duration");
exports.protobufPackage = "ibc.applications.fetchprice.v1";
function createBaseParams() {
    return { fetchEnabled: false, fetchActivated: false, timeoutDuration: undefined };
}
exports.Params = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.fetchEnabled === true) {
            writer.uint32(8).bool(message.fetchEnabled);
        }
        if (message.fetchActivated === true) {
            writer.uint32(16).bool(message.fetchActivated);
        }
        if (message.timeoutDuration !== undefined) {
            duration_1.Duration.encode(message.timeoutDuration, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.fetchEnabled = reader.bool();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.fetchActivated = reader.bool();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.timeoutDuration = duration_1.Duration.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            fetchEnabled: isSet(object.fetchEnabled) ? globalThis.Boolean(object.fetchEnabled) : false,
            fetchActivated: isSet(object.fetchActivated) ? globalThis.Boolean(object.fetchActivated) : false,
            timeoutDuration: isSet(object.timeoutDuration) ? duration_1.Duration.fromJSON(object.timeoutDuration) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.fetchEnabled === true) {
            obj.fetchEnabled = message.fetchEnabled;
        }
        if (message.fetchActivated === true) {
            obj.fetchActivated = message.fetchActivated;
        }
        if (message.timeoutDuration !== undefined) {
            obj.timeoutDuration = duration_1.Duration.toJSON(message.timeoutDuration);
        }
        return obj;
    },
    create(base) {
        return exports.Params.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseParams();
        message.fetchEnabled = (_a = object.fetchEnabled) !== null && _a !== void 0 ? _a : false;
        message.fetchActivated = (_b = object.fetchActivated) !== null && _b !== void 0 ? _b : false;
        message.timeoutDuration =
            object.timeoutDuration !== undefined && object.timeoutDuration !== null
                ? duration_1.Duration.fromPartial(object.timeoutDuration)
                : undefined;
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=types.js.map