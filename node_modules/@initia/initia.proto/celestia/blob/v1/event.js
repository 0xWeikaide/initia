"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventPayForBlobs = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "celestia.blob.v1";
function createBaseEventPayForBlobs() {
    return { signer: "", blobSizes: [], namespaces: [] };
}
exports.EventPayForBlobs = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.signer !== "") {
            writer.uint32(10).string(message.signer);
        }
        writer.uint32(18).fork();
        for (const v of message.blobSizes) {
            writer.uint32(v);
        }
        writer.ldelim();
        for (const v of message.namespaces) {
            writer.uint32(26).bytes(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventPayForBlobs();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.signer = reader.string();
                    continue;
                case 2:
                    if (tag === 16) {
                        message.blobSizes.push(reader.uint32());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.blobSizes.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.namespaces.push(reader.bytes());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
            blobSizes: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.blobSizes)
                ? object.blobSizes.map((e) => globalThis.Number(e))
                : [],
            namespaces: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.namespaces)
                ? object.namespaces.map((e) => bytesFromBase64(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.signer !== "") {
            obj.signer = message.signer;
        }
        if ((_a = message.blobSizes) === null || _a === void 0 ? void 0 : _a.length) {
            obj.blobSizes = message.blobSizes.map((e) => Math.round(e));
        }
        if ((_b = message.namespaces) === null || _b === void 0 ? void 0 : _b.length) {
            obj.namespaces = message.namespaces.map((e) => base64FromBytes(e));
        }
        return obj;
    },
    create(base) {
        return exports.EventPayForBlobs.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseEventPayForBlobs();
        message.signer = (_a = object.signer) !== null && _a !== void 0 ? _a : "";
        message.blobSizes = ((_b = object.blobSizes) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.namespaces = ((_c = object.namespaces) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=event.js.map