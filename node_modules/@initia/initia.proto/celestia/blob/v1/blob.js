"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlobTx = exports.Blob = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "celestia.core.v1.blob";
function createBaseBlob() {
    return { namespaceId: new Uint8Array(0), data: new Uint8Array(0), shareVersion: 0, namespaceVersion: 0 };
}
exports.Blob = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.namespaceId.length !== 0) {
            writer.uint32(10).bytes(message.namespaceId);
        }
        if (message.data.length !== 0) {
            writer.uint32(18).bytes(message.data);
        }
        if (message.shareVersion !== 0) {
            writer.uint32(24).uint32(message.shareVersion);
        }
        if (message.namespaceVersion !== 0) {
            writer.uint32(32).uint32(message.namespaceVersion);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlob();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.namespaceId = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.data = reader.bytes();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.shareVersion = reader.uint32();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.namespaceVersion = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            namespaceId: isSet(object.namespaceId) ? bytesFromBase64(object.namespaceId) : new Uint8Array(0),
            data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
            shareVersion: isSet(object.shareVersion) ? globalThis.Number(object.shareVersion) : 0,
            namespaceVersion: isSet(object.namespaceVersion) ? globalThis.Number(object.namespaceVersion) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.namespaceId.length !== 0) {
            obj.namespaceId = base64FromBytes(message.namespaceId);
        }
        if (message.data.length !== 0) {
            obj.data = base64FromBytes(message.data);
        }
        if (message.shareVersion !== 0) {
            obj.shareVersion = Math.round(message.shareVersion);
        }
        if (message.namespaceVersion !== 0) {
            obj.namespaceVersion = Math.round(message.namespaceVersion);
        }
        return obj;
    },
    create(base) {
        return exports.Blob.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseBlob();
        message.namespaceId = (_a = object.namespaceId) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.data = (_b = object.data) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        message.shareVersion = (_c = object.shareVersion) !== null && _c !== void 0 ? _c : 0;
        message.namespaceVersion = (_d = object.namespaceVersion) !== null && _d !== void 0 ? _d : 0;
        return message;
    },
};
function createBaseBlobTx() {
    return { tx: new Uint8Array(0), blobs: [], typeId: "" };
}
exports.BlobTx = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.tx.length !== 0) {
            writer.uint32(10).bytes(message.tx);
        }
        for (const v of message.blobs) {
            exports.Blob.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.typeId !== "") {
            writer.uint32(26).string(message.typeId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlobTx();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.tx = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.blobs.push(exports.Blob.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.typeId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            tx: isSet(object.tx) ? bytesFromBase64(object.tx) : new Uint8Array(0),
            blobs: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.blobs) ? object.blobs.map((e) => exports.Blob.fromJSON(e)) : [],
            typeId: isSet(object.typeId) ? globalThis.String(object.typeId) : "",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.tx.length !== 0) {
            obj.tx = base64FromBytes(message.tx);
        }
        if ((_a = message.blobs) === null || _a === void 0 ? void 0 : _a.length) {
            obj.blobs = message.blobs.map((e) => exports.Blob.toJSON(e));
        }
        if (message.typeId !== "") {
            obj.typeId = message.typeId;
        }
        return obj;
    },
    create(base) {
        return exports.BlobTx.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseBlobTx();
        message.tx = (_a = object.tx) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.blobs = ((_b = object.blobs) === null || _b === void 0 ? void 0 : _b.map((e) => exports.Blob.fromPartial(e))) || [];
        message.typeId = (_c = object.typeId) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=blob.js.map