"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcWebError = exports.GrpcWebImpl = exports.QueryStatsByChannelDesc = exports.QueryAddressDesc = exports.QueryDesc = exports.QueryClientImpl = exports.QueryStatsByChannelResponse = exports.QueryStatsByChannel = exports.QueryAddressResponse = exports.QueryAddress = exports.protobufPackage = void 0;
/* eslint-disable */
const grpc_web_1 = require("@improbable-eng/grpc-web");
const browser_headers_1 = require("browser-headers");
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
exports.protobufPackage = "noble.forwarding.v1";
function createBaseQueryAddress() {
    return { channel: "", recipient: "" };
}
exports.QueryAddress = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channel !== "") {
            writer.uint32(10).string(message.channel);
        }
        if (message.recipient !== "") {
            writer.uint32(18).string(message.recipient);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAddress();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.recipient = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channel: isSet(object.channel) ? globalThis.String(object.channel) : "",
            recipient: isSet(object.recipient) ? globalThis.String(object.recipient) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.channel !== "") {
            obj.channel = message.channel;
        }
        if (message.recipient !== "") {
            obj.recipient = message.recipient;
        }
        return obj;
    },
    create(base) {
        return exports.QueryAddress.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryAddress();
        message.channel = (_a = object.channel) !== null && _a !== void 0 ? _a : "";
        message.recipient = (_b = object.recipient) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryAddressResponse() {
    return { address: "", exists: false };
}
exports.QueryAddressResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.exists === true) {
            writer.uint32(16).bool(message.exists);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAddressResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.exists = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            exists: isSet(object.exists) ? globalThis.Boolean(object.exists) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.exists === true) {
            obj.exists = message.exists;
        }
        return obj;
    },
    create(base) {
        return exports.QueryAddressResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryAddressResponse();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        message.exists = (_b = object.exists) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
function createBaseQueryStatsByChannel() {
    return { channel: "" };
}
exports.QueryStatsByChannel = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channel !== "") {
            writer.uint32(10).string(message.channel);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStatsByChannel();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { channel: isSet(object.channel) ? globalThis.String(object.channel) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.channel !== "") {
            obj.channel = message.channel;
        }
        return obj;
    },
    create(base) {
        return exports.QueryStatsByChannel.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryStatsByChannel();
        message.channel = (_a = object.channel) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryStatsByChannelResponse() {
    return { numOfAccounts: long_1.default.UZERO, numOfForwards: long_1.default.UZERO, totalForwarded: [] };
}
exports.QueryStatsByChannelResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.numOfAccounts.isZero()) {
            writer.uint32(8).uint64(message.numOfAccounts);
        }
        if (!message.numOfForwards.isZero()) {
            writer.uint32(16).uint64(message.numOfForwards);
        }
        for (const v of message.totalForwarded) {
            coin_1.Coin.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStatsByChannelResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.numOfAccounts = reader.uint64();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.numOfForwards = reader.uint64();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.totalForwarded.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            numOfAccounts: isSet(object.numOfAccounts) ? long_1.default.fromValue(object.numOfAccounts) : long_1.default.UZERO,
            numOfForwards: isSet(object.numOfForwards) ? long_1.default.fromValue(object.numOfForwards) : long_1.default.UZERO,
            totalForwarded: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.totalForwarded)
                ? object.totalForwarded.map((e) => coin_1.Coin.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (!message.numOfAccounts.isZero()) {
            obj.numOfAccounts = (message.numOfAccounts || long_1.default.UZERO).toString();
        }
        if (!message.numOfForwards.isZero()) {
            obj.numOfForwards = (message.numOfForwards || long_1.default.UZERO).toString();
        }
        if ((_a = message.totalForwarded) === null || _a === void 0 ? void 0 : _a.length) {
            obj.totalForwarded = message.totalForwarded.map((e) => coin_1.Coin.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.QueryStatsByChannelResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryStatsByChannelResponse();
        message.numOfAccounts =
            object.numOfAccounts !== undefined && object.numOfAccounts !== null
                ? long_1.default.fromValue(object.numOfAccounts)
                : long_1.default.UZERO;
        message.numOfForwards =
            object.numOfForwards !== undefined && object.numOfForwards !== null
                ? long_1.default.fromValue(object.numOfForwards)
                : long_1.default.UZERO;
        message.totalForwarded = ((_a = object.totalForwarded) === null || _a === void 0 ? void 0 : _a.map((e) => coin_1.Coin.fromPartial(e))) || [];
        return message;
    },
};
class QueryClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.Address = this.Address.bind(this);
        this.StatsByChannel = this.StatsByChannel.bind(this);
    }
    Address(request, metadata) {
        return this.rpc.unary(exports.QueryAddressDesc, exports.QueryAddress.fromPartial(request), metadata);
    }
    StatsByChannel(request, metadata) {
        return this.rpc.unary(exports.QueryStatsByChannelDesc, exports.QueryStatsByChannel.fromPartial(request), metadata);
    }
}
exports.QueryClientImpl = QueryClientImpl;
exports.QueryDesc = { serviceName: "noble.forwarding.v1.Query" };
exports.QueryAddressDesc = {
    methodName: "Address",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryAddress.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryAddressResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.QueryStatsByChannelDesc = {
    methodName: "StatsByChannel",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryStatsByChannel.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryStatsByChannelResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        var _a;
        const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_1.BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap))
            : metadata !== null && metadata !== void 0 ? metadata : this.options.metadata;
        return new Promise((resolve, reject) => {
            var _a;
            grpc_web_1.grpc.unary(methodDesc, Object.assign(Object.assign({ request, host: this.host, metadata: maybeCombinedMetadata !== null && maybeCombinedMetadata !== void 0 ? maybeCombinedMetadata : {} }, (this.options.transport !== undefined ? { transport: this.options.transport } : {})), { debug: (_a = this.options.debug) !== null && _a !== void 0 ? _a : false, onEnd: function (response) {
                    if (response.status === grpc_web_1.grpc.Code.OK) {
                        resolve(response.message.toObject());
                    }
                    else {
                        const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
                        reject(err);
                    }
                } }));
        });
    }
}
exports.GrpcWebImpl = GrpcWebImpl;
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
class GrpcWebError extends globalThis.Error {
    constructor(message, code, metadata) {
        super(message);
        this.code = code;
        this.metadata = metadata;
    }
}
exports.GrpcWebError = GrpcWebError;
//# sourceMappingURL=query.js.map