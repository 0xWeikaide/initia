import { grpc } from "@improbable-eng/grpc-web";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Any } from "../../../google/protobuf/any";
import { Alert } from "./alerts";
import { Params } from "./genesis";
export declare const protobufPackage = "slinky.alerts.v1";
/** MsgAlert defines a message to create an alert. */
export interface MsgAlert {
    /** alert is the alert to be filed */
    alert?: Alert | undefined;
}
export interface MsgAlertResponse {
}
/**
 * MsgConclusion defines a message carrying a Conclusion made by the SecondTier,
 * which will be used to close an alert. And trigger any ramifications of the
 * conclusion.
 */
export interface MsgConclusion {
    /**
     * signer is the signer of this transaction (notice, this may not always be a
     * node from the SecondTier)
     */
    signer: string;
    /** conclusion is the conclusion to be filed */
    conclusion?: Any | undefined;
}
export interface MsgConclusionResponse {
}
/**
 * MsgUpdateParams defines the message type expected by the UpdateParams rpc. It
 * contains an authority address, and the new Params for the x/alerts module.
 */
export interface MsgUpdateParams {
    /** authority is the address of the authority that is submitting the update */
    authority: string;
    /** params is the new set of parameters for the x/alerts module */
    params?: Params | undefined;
}
export interface MsgUpdateParamsResponse {
}
export declare const MsgAlert: {
    encode(message: MsgAlert, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgAlert;
    fromJSON(object: any): MsgAlert;
    toJSON(message: MsgAlert): unknown;
    create(base?: DeepPartial<MsgAlert>): MsgAlert;
    fromPartial(object: DeepPartial<MsgAlert>): MsgAlert;
};
export declare const MsgAlertResponse: {
    encode(_: MsgAlertResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgAlertResponse;
    fromJSON(_: any): MsgAlertResponse;
    toJSON(_: MsgAlertResponse): unknown;
    create(base?: DeepPartial<MsgAlertResponse>): MsgAlertResponse;
    fromPartial(_: DeepPartial<MsgAlertResponse>): MsgAlertResponse;
};
export declare const MsgConclusion: {
    encode(message: MsgConclusion, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgConclusion;
    fromJSON(object: any): MsgConclusion;
    toJSON(message: MsgConclusion): unknown;
    create(base?: DeepPartial<MsgConclusion>): MsgConclusion;
    fromPartial(object: DeepPartial<MsgConclusion>): MsgConclusion;
};
export declare const MsgConclusionResponse: {
    encode(_: MsgConclusionResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgConclusionResponse;
    fromJSON(_: any): MsgConclusionResponse;
    toJSON(_: MsgConclusionResponse): unknown;
    create(base?: DeepPartial<MsgConclusionResponse>): MsgConclusionResponse;
    fromPartial(_: DeepPartial<MsgConclusionResponse>): MsgConclusionResponse;
};
export declare const MsgUpdateParams: {
    encode(message: MsgUpdateParams, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParams;
    fromJSON(object: any): MsgUpdateParams;
    toJSON(message: MsgUpdateParams): unknown;
    create(base?: DeepPartial<MsgUpdateParams>): MsgUpdateParams;
    fromPartial(object: DeepPartial<MsgUpdateParams>): MsgUpdateParams;
};
export declare const MsgUpdateParamsResponse: {
    encode(_: MsgUpdateParamsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParamsResponse;
    fromJSON(_: any): MsgUpdateParamsResponse;
    toJSON(_: MsgUpdateParamsResponse): unknown;
    create(base?: DeepPartial<MsgUpdateParamsResponse>): MsgUpdateParamsResponse;
    fromPartial(_: DeepPartial<MsgUpdateParamsResponse>): MsgUpdateParamsResponse;
};
/** Msg is the message service for the x/alerts module. */
export interface Msg {
    /**
     * Alert creates a new alert. On alert creation (if valid), the alert will be
     * saved to state, and its bond will be escrowed until a corresponding
     * Conclusion is filed to close the alert.
     */
    Alert(request: DeepPartial<MsgAlert>, metadata?: grpc.Metadata): Promise<MsgAlertResponse>;
    /**
     * Conclusion closes an alert. On alert conclusion (if valid), the alert will
     * be marked as Concluded, the bond for the alert will either be burned or
     * returned, and a set of incentives will be issued to the validators deemed
     * malicious by the conclusion.
     */
    Conclusion(request: DeepPartial<MsgConclusion>, metadata?: grpc.Metadata): Promise<MsgConclusionResponse>;
    /**
     * UpdateParams updates the parameters of the alerts module. Specifically, the
     * only address that is capable of submitting this Msg is the
     * module-authority, in general, the x/gov module-account. The process for
     * executing this message will be via governance proposal
     */
    UpdateParams(request: DeepPartial<MsgUpdateParams>, metadata?: grpc.Metadata): Promise<MsgUpdateParamsResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    constructor(rpc: Rpc);
    Alert(request: DeepPartial<MsgAlert>, metadata?: grpc.Metadata): Promise<MsgAlertResponse>;
    Conclusion(request: DeepPartial<MsgConclusion>, metadata?: grpc.Metadata): Promise<MsgConclusionResponse>;
    UpdateParams(request: DeepPartial<MsgUpdateParams>, metadata?: grpc.Metadata): Promise<MsgUpdateParamsResponse>;
}
export declare const MsgDesc: {
    serviceName: string;
};
export declare const MsgAlertDesc: UnaryMethodDefinitionish;
export declare const MsgConclusionDesc: UnaryMethodDefinitionish;
export declare const MsgUpdateParamsDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
        upStreamRetryCodes?: number[];
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export declare class GrpcWebError extends globalThis.Error {
    code: grpc.Code;
    metadata: grpc.Metadata;
    constructor(message: string, code: grpc.Code, metadata: grpc.Metadata);
}
export {};
