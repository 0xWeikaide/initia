"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcWebError = exports.GrpcWebImpl = exports.QueryParamsDesc = exports.QueryAlertsDesc = exports.QueryDesc = exports.QueryClientImpl = exports.ParamsResponse = exports.ParamsRequest = exports.AlertsResponse = exports.AlertsRequest = exports.alertStatusIDToJSON = exports.alertStatusIDFromJSON = exports.AlertStatusID = exports.protobufPackage = void 0;
/* eslint-disable */
const grpc_web_1 = require("@improbable-eng/grpc-web");
const browser_headers_1 = require("browser-headers");
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const alerts_1 = require("./alerts");
const genesis_1 = require("./genesis");
exports.protobufPackage = "slinky.alerts.v1";
/**
 * AlertStatus is the type for the status of an Alert, it can be Unconcluded or
 * Concluded.
 */
var AlertStatusID;
(function (AlertStatusID) {
    AlertStatusID[AlertStatusID["CONCLUSION_STATUS_UNSPECIFIED"] = 0] = "CONCLUSION_STATUS_UNSPECIFIED";
    AlertStatusID[AlertStatusID["CONCLUSION_STATUS_UNCONCLUDED"] = 1] = "CONCLUSION_STATUS_UNCONCLUDED";
    AlertStatusID[AlertStatusID["CONCLUSION_STATUS_CONCLUDED"] = 2] = "CONCLUSION_STATUS_CONCLUDED";
    AlertStatusID[AlertStatusID["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(AlertStatusID || (exports.AlertStatusID = AlertStatusID = {}));
function alertStatusIDFromJSON(object) {
    switch (object) {
        case 0:
        case "CONCLUSION_STATUS_UNSPECIFIED":
            return AlertStatusID.CONCLUSION_STATUS_UNSPECIFIED;
        case 1:
        case "CONCLUSION_STATUS_UNCONCLUDED":
            return AlertStatusID.CONCLUSION_STATUS_UNCONCLUDED;
        case 2:
        case "CONCLUSION_STATUS_CONCLUDED":
            return AlertStatusID.CONCLUSION_STATUS_CONCLUDED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return AlertStatusID.UNRECOGNIZED;
    }
}
exports.alertStatusIDFromJSON = alertStatusIDFromJSON;
function alertStatusIDToJSON(object) {
    switch (object) {
        case AlertStatusID.CONCLUSION_STATUS_UNSPECIFIED:
            return "CONCLUSION_STATUS_UNSPECIFIED";
        case AlertStatusID.CONCLUSION_STATUS_UNCONCLUDED:
            return "CONCLUSION_STATUS_UNCONCLUDED";
        case AlertStatusID.CONCLUSION_STATUS_CONCLUDED:
            return "CONCLUSION_STATUS_CONCLUDED";
        case AlertStatusID.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.alertStatusIDToJSON = alertStatusIDToJSON;
function createBaseAlertsRequest() {
    return { status: 0 };
}
exports.AlertsRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.status !== 0) {
            writer.uint32(8).int32(message.status);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlertsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { status: isSet(object.status) ? alertStatusIDFromJSON(object.status) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.status !== 0) {
            obj.status = alertStatusIDToJSON(message.status);
        }
        return obj;
    },
    create(base) {
        return exports.AlertsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAlertsRequest();
        message.status = (_a = object.status) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseAlertsResponse() {
    return { alerts: [] };
}
exports.AlertsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.alerts) {
            alerts_1.Alert.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlertsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.alerts.push(alerts_1.Alert.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            alerts: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.alerts)
                ? object.alerts.map((e) => alerts_1.Alert.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.alerts) === null || _a === void 0 ? void 0 : _a.length) {
            obj.alerts = message.alerts.map((e) => alerts_1.Alert.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.AlertsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAlertsResponse();
        message.alerts = ((_a = object.alerts) === null || _a === void 0 ? void 0 : _a.map((e) => alerts_1.Alert.fromPartial(e))) || [];
        return message;
    },
};
function createBaseParamsRequest() {
    return {};
}
exports.ParamsRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.ParamsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseParamsRequest();
        return message;
    },
};
function createBaseParamsResponse() {
    return { params: undefined };
}
exports.ParamsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.params !== undefined) {
            genesis_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.params = genesis_1.Params.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { params: isSet(object.params) ? genesis_1.Params.fromJSON(object.params) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.params !== undefined) {
            obj.params = genesis_1.Params.toJSON(message.params);
        }
        return obj;
    },
    create(base) {
        return exports.ParamsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseParamsResponse();
        message.params =
            object.params !== undefined && object.params !== null ? genesis_1.Params.fromPartial(object.params) : undefined;
        return message;
    },
};
class QueryClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.Alerts = this.Alerts.bind(this);
        this.Params = this.Params.bind(this);
    }
    Alerts(request, metadata) {
        return this.rpc.unary(exports.QueryAlertsDesc, exports.AlertsRequest.fromPartial(request), metadata);
    }
    Params(request, metadata) {
        return this.rpc.unary(exports.QueryParamsDesc, exports.ParamsRequest.fromPartial(request), metadata);
    }
}
exports.QueryClientImpl = QueryClientImpl;
exports.QueryDesc = { serviceName: "slinky.alerts.v1.Query" };
exports.QueryAlertsDesc = {
    methodName: "Alerts",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.AlertsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.AlertsResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.QueryParamsDesc = {
    methodName: "Params",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.ParamsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.ParamsResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        var _a;
        const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_1.BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap))
            : metadata !== null && metadata !== void 0 ? metadata : this.options.metadata;
        return new Promise((resolve, reject) => {
            var _a;
            grpc_web_1.grpc.unary(methodDesc, Object.assign(Object.assign({ request, host: this.host, metadata: maybeCombinedMetadata !== null && maybeCombinedMetadata !== void 0 ? maybeCombinedMetadata : {} }, (this.options.transport !== undefined ? { transport: this.options.transport } : {})), { debug: (_a = this.options.debug) !== null && _a !== void 0 ? _a : false, onEnd: function (response) {
                    if (response.status === grpc_web_1.grpc.Code.OK) {
                        resolve(response.message.toObject());
                    }
                    else {
                        const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
                        reject(err);
                    }
                } }));
        });
    }
}
exports.GrpcWebImpl = GrpcWebImpl;
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
class GrpcWebError extends globalThis.Error {
    constructor(message, code, metadata) {
        super(message);
        this.code = code;
        this.metadata = metadata;
    }
}
exports.GrpcWebError = GrpcWebError;
//# sourceMappingURL=query.js.map