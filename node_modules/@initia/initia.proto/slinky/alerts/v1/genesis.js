"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenesisState = exports.Params = exports.PruningParams = exports.AlertParams = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
const any_1 = require("../../../google/protobuf/any");
const alerts_1 = require("./alerts");
exports.protobufPackage = "slinky.alerts.v1";
function createBaseAlertParams() {
    return { enabled: false, bondAmount: undefined, maxBlockAge: long_1.default.UZERO };
}
exports.AlertParams = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.enabled === true) {
            writer.uint32(8).bool(message.enabled);
        }
        if (message.bondAmount !== undefined) {
            coin_1.Coin.encode(message.bondAmount, writer.uint32(18).fork()).ldelim();
        }
        if (!message.maxBlockAge.isZero()) {
            writer.uint32(24).uint64(message.maxBlockAge);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlertParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.enabled = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.bondAmount = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.maxBlockAge = reader.uint64();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
            bondAmount: isSet(object.bondAmount) ? coin_1.Coin.fromJSON(object.bondAmount) : undefined,
            maxBlockAge: isSet(object.maxBlockAge) ? long_1.default.fromValue(object.maxBlockAge) : long_1.default.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.enabled === true) {
            obj.enabled = message.enabled;
        }
        if (message.bondAmount !== undefined) {
            obj.bondAmount = coin_1.Coin.toJSON(message.bondAmount);
        }
        if (!message.maxBlockAge.isZero()) {
            obj.maxBlockAge = (message.maxBlockAge || long_1.default.UZERO).toString();
        }
        return obj;
    },
    create(base) {
        return exports.AlertParams.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAlertParams();
        message.enabled = (_a = object.enabled) !== null && _a !== void 0 ? _a : false;
        message.bondAmount =
            object.bondAmount !== undefined && object.bondAmount !== null
                ? coin_1.Coin.fromPartial(object.bondAmount)
                : undefined;
        message.maxBlockAge =
            object.maxBlockAge !== undefined && object.maxBlockAge !== null
                ? long_1.default.fromValue(object.maxBlockAge)
                : long_1.default.UZERO;
        return message;
    },
};
function createBasePruningParams() {
    return { enabled: false, blocksToPrune: long_1.default.UZERO };
}
exports.PruningParams = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.enabled === true) {
            writer.uint32(8).bool(message.enabled);
        }
        if (!message.blocksToPrune.isZero()) {
            writer.uint32(16).uint64(message.blocksToPrune);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePruningParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.enabled = reader.bool();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.blocksToPrune = reader.uint64();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
            blocksToPrune: isSet(object.blocksToPrune) ? long_1.default.fromValue(object.blocksToPrune) : long_1.default.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.enabled === true) {
            obj.enabled = message.enabled;
        }
        if (!message.blocksToPrune.isZero()) {
            obj.blocksToPrune = (message.blocksToPrune || long_1.default.UZERO).toString();
        }
        return obj;
    },
    create(base) {
        return exports.PruningParams.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBasePruningParams();
        message.enabled = (_a = object.enabled) !== null && _a !== void 0 ? _a : false;
        message.blocksToPrune =
            object.blocksToPrune !== undefined && object.blocksToPrune !== null
                ? long_1.default.fromValue(object.blocksToPrune)
                : long_1.default.UZERO;
        return message;
    },
};
function createBaseParams() {
    return { alertParams: undefined, conclusionVerificationParams: undefined, pruningParams: undefined };
}
exports.Params = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.alertParams !== undefined) {
            exports.AlertParams.encode(message.alertParams, writer.uint32(10).fork()).ldelim();
        }
        if (message.conclusionVerificationParams !== undefined) {
            any_1.Any.encode(message.conclusionVerificationParams, writer.uint32(18).fork()).ldelim();
        }
        if (message.pruningParams !== undefined) {
            exports.PruningParams.encode(message.pruningParams, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.alertParams = exports.AlertParams.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.conclusionVerificationParams = any_1.Any.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.pruningParams = exports.PruningParams.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            alertParams: isSet(object.alertParams) ? exports.AlertParams.fromJSON(object.alertParams) : undefined,
            conclusionVerificationParams: isSet(object.conclusionVerificationParams)
                ? any_1.Any.fromJSON(object.conclusionVerificationParams)
                : undefined,
            pruningParams: isSet(object.pruningParams) ? exports.PruningParams.fromJSON(object.pruningParams) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.alertParams !== undefined) {
            obj.alertParams = exports.AlertParams.toJSON(message.alertParams);
        }
        if (message.conclusionVerificationParams !== undefined) {
            obj.conclusionVerificationParams = any_1.Any.toJSON(message.conclusionVerificationParams);
        }
        if (message.pruningParams !== undefined) {
            obj.pruningParams = exports.PruningParams.toJSON(message.pruningParams);
        }
        return obj;
    },
    create(base) {
        return exports.Params.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseParams();
        message.alertParams =
            object.alertParams !== undefined && object.alertParams !== null
                ? exports.AlertParams.fromPartial(object.alertParams)
                : undefined;
        message.conclusionVerificationParams =
            object.conclusionVerificationParams !== undefined && object.conclusionVerificationParams !== null
                ? any_1.Any.fromPartial(object.conclusionVerificationParams)
                : undefined;
        message.pruningParams =
            object.pruningParams !== undefined && object.pruningParams !== null
                ? exports.PruningParams.fromPartial(object.pruningParams)
                : undefined;
        return message;
    },
};
function createBaseGenesisState() {
    return { params: undefined, alerts: [] };
}
exports.GenesisState = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.params !== undefined) {
            exports.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.alerts) {
            alerts_1.AlertWithStatus.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.params = exports.Params.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.alerts.push(alerts_1.AlertWithStatus.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: isSet(object.params) ? exports.Params.fromJSON(object.params) : undefined,
            alerts: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.alerts)
                ? object.alerts.map((e) => alerts_1.AlertWithStatus.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.params !== undefined) {
            obj.params = exports.Params.toJSON(message.params);
        }
        if ((_a = message.alerts) === null || _a === void 0 ? void 0 : _a.length) {
            obj.alerts = message.alerts.map((e) => alerts_1.AlertWithStatus.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GenesisState.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGenesisState();
        message.params =
            object.params !== undefined && object.params !== null ? exports.Params.fromPartial(object.params) : undefined;
        message.alerts = ((_a = object.alerts) === null || _a === void 0 ? void 0 : _a.map((e) => alerts_1.AlertWithStatus.fromPartial(e))) || [];
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=genesis.js.map