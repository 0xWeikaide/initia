import Long from "long";
import _m0 from "protobufjs/minimal";
import { Validator } from "../../../tendermint/abci/types";
export declare const protobufPackage = "slinky.alerts.v1";
/**
 * ValidatorAlertIncentive defines the incentive strategy to be executed for a
 * validator that has been confirmed to have at fault for an x/alerts alert.
 * This strategy is expected to slash half of the validator's stake.
 */
export interface ValidatorAlertIncentive {
    /** The validator that has been confirmed to have been at fault for an alert. */
    validator?: Validator | undefined;
    /**
     * AlertSigner is the signer of the alert referenced by the conclusion that
     * created this incentive.
     */
    alertSigner: string;
    /** AlertHeight is the height at which the infraction occurred */
    alertHeight: Long;
}
export declare const ValidatorAlertIncentive: {
    encode(message: ValidatorAlertIncentive, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ValidatorAlertIncentive;
    fromJSON(object: any): ValidatorAlertIncentive;
    toJSON(message: ValidatorAlertIncentive): unknown;
    create(base?: DeepPartial<ValidatorAlertIncentive>): ValidatorAlertIncentive;
    fromPartial(object: DeepPartial<ValidatorAlertIncentive>): ValidatorAlertIncentive;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
