"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidatorAlertIncentive = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const types_1 = require("../../../tendermint/abci/types");
exports.protobufPackage = "slinky.alerts.v1";
function createBaseValidatorAlertIncentive() {
    return { validator: undefined, alertSigner: "", alertHeight: long_1.default.UZERO };
}
exports.ValidatorAlertIncentive = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.validator !== undefined) {
            types_1.Validator.encode(message.validator, writer.uint32(10).fork()).ldelim();
        }
        if (message.alertSigner !== "") {
            writer.uint32(18).string(message.alertSigner);
        }
        if (!message.alertHeight.isZero()) {
            writer.uint32(24).uint64(message.alertHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseValidatorAlertIncentive();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.validator = types_1.Validator.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.alertSigner = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.alertHeight = reader.uint64();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            validator: isSet(object.validator) ? types_1.Validator.fromJSON(object.validator) : undefined,
            alertSigner: isSet(object.alertSigner) ? globalThis.String(object.alertSigner) : "",
            alertHeight: isSet(object.alertHeight) ? long_1.default.fromValue(object.alertHeight) : long_1.default.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.validator !== undefined) {
            obj.validator = types_1.Validator.toJSON(message.validator);
        }
        if (message.alertSigner !== "") {
            obj.alertSigner = message.alertSigner;
        }
        if (!message.alertHeight.isZero()) {
            obj.alertHeight = (message.alertHeight || long_1.default.UZERO).toString();
        }
        return obj;
    },
    create(base) {
        return exports.ValidatorAlertIncentive.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseValidatorAlertIncentive();
        message.validator =
            object.validator !== undefined && object.validator !== null
                ? types_1.Validator.fromPartial(object.validator)
                : undefined;
        message.alertSigner = (_a = object.alertSigner) !== null && _a !== void 0 ? _a : "";
        message.alertHeight =
            object.alertHeight !== undefined && object.alertHeight !== null
                ? long_1.default.fromValue(object.alertHeight)
                : long_1.default.UZERO;
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=strategies.js.map