import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { Any } from "../../../google/protobuf/any";
import { AlertWithStatus } from "./alerts";
export declare const protobufPackage = "slinky.alerts.v1";
/**
 * AlertParams is the set of parameters for the x/Alerts module's Alerting. It
 * defines whether or not Alerts can be submitted, and if so, the minimum
 * bond amount required to submit an Alert.
 */
export interface AlertParams {
    /**
     * Enabled is a boolean defining whether or not Alerts can be submitted
     * to the module
     */
    enabled: boolean;
    /**
     * BondAmount is the minimum amount of bond required to submit an
     * Alert
     */
    bondAmount?: Coin | undefined;
    /**
     * MaxBlockAge defines the maximum age of an Alert before it is pruned, notice
     * this is defined wrt. the height that the Alert references, i.e Alerts are
     * only relevant until Alert.Height + MaxBlockAge is reached.
     */
    maxBlockAge: Long;
}
/** PruningParams defines the criterion for pruning Alerts from the state. */
export interface PruningParams {
    /** Enabled defines whether Alerts are to be pruned */
    enabled: boolean;
    /**
     * BlocksToPrune defines the number of blocks until an Alert will be pruned
     * from state, notice this is defined wrt. the current block height, i.e
     * Alerts will be stored in state until current_height + BlocksToPrune is
     * reached.
     */
    blocksToPrune: Long;
}
/** Params is the set of parameters for the x/Alerts module. */
export interface Params {
    /** AlertParams is the set of parameters for the x/Alerts module's Alerting. */
    alertParams?: AlertParams | undefined;
    /**
     * ConclusionVerificationParams is the set of parameters for the x/Alerts
     * module's conclusion verification.
     */
    conclusionVerificationParams?: Any | undefined;
    /** PruningParams is the set of parameters for the x/Alerts module's pruning. */
    pruningParams?: PruningParams | undefined;
}
/**
 * GenesisState is the state that must be provided at genesis. It contains
 * params for the module, and the set initial Alerts.
 */
export interface GenesisState {
    /** Params is the set of x/Alerts parameters */
    params?: Params | undefined;
    /** Alerts is the set of Alerts that have been submitted to the module */
    alerts: AlertWithStatus[];
}
export declare const AlertParams: {
    encode(message: AlertParams, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AlertParams;
    fromJSON(object: any): AlertParams;
    toJSON(message: AlertParams): unknown;
    create(base?: DeepPartial<AlertParams>): AlertParams;
    fromPartial(object: DeepPartial<AlertParams>): AlertParams;
};
export declare const PruningParams: {
    encode(message: PruningParams, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PruningParams;
    fromJSON(object: any): PruningParams;
    toJSON(message: PruningParams): unknown;
    create(base?: DeepPartial<PruningParams>): PruningParams;
    fromPartial(object: DeepPartial<PruningParams>): PruningParams;
};
export declare const Params: {
    encode(message: Params, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Params;
    fromJSON(object: any): Params;
    toJSON(message: Params): unknown;
    create(base?: DeepPartial<Params>): Params;
    fromPartial(object: DeepPartial<Params>): Params;
};
export declare const GenesisState: {
    encode(message: GenesisState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState;
    fromJSON(object: any): GenesisState;
    toJSON(message: GenesisState): unknown;
    create(base?: DeepPartial<GenesisState>): GenesisState;
    fromPartial(object: DeepPartial<GenesisState>): GenesisState;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
