"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PriceBound = exports.MultiSigConclusionVerificationParams = exports.MultiSigConclusion = exports.Signature = exports.AlertWithStatus = exports.AlertStatus = exports.Alert = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const any_1 = require("../../../google/protobuf/any");
const types_1 = require("../../../tendermint/abci/types");
const genesis_1 = require("../../oracle/v1/genesis");
exports.protobufPackage = "slinky.alerts.v1";
function createBaseAlert() {
    return { height: long_1.default.UZERO, signer: "", currencyPair: undefined };
}
exports.Alert = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.height.isZero()) {
            writer.uint32(8).uint64(message.height);
        }
        if (message.signer !== "") {
            writer.uint32(18).string(message.signer);
        }
        if (message.currencyPair !== undefined) {
            genesis_1.CurrencyPair.encode(message.currencyPair, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlert();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.height = reader.uint64();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.signer = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.currencyPair = genesis_1.CurrencyPair.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            height: isSet(object.height) ? long_1.default.fromValue(object.height) : long_1.default.UZERO,
            signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
            currencyPair: isSet(object.currencyPair) ? genesis_1.CurrencyPair.fromJSON(object.currencyPair) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (!message.height.isZero()) {
            obj.height = (message.height || long_1.default.UZERO).toString();
        }
        if (message.signer !== "") {
            obj.signer = message.signer;
        }
        if (message.currencyPair !== undefined) {
            obj.currencyPair = genesis_1.CurrencyPair.toJSON(message.currencyPair);
        }
        return obj;
    },
    create(base) {
        return exports.Alert.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAlert();
        message.height =
            object.height !== undefined && object.height !== null ? long_1.default.fromValue(object.height) : long_1.default.UZERO;
        message.signer = (_a = object.signer) !== null && _a !== void 0 ? _a : "";
        message.currencyPair =
            object.currencyPair !== undefined && object.currencyPair !== null
                ? genesis_1.CurrencyPair.fromPartial(object.currencyPair)
                : undefined;
        return message;
    },
};
function createBaseAlertStatus() {
    return {
        conclusionStatus: long_1.default.UZERO,
        submissionHeight: long_1.default.UZERO,
        submissionTimestamp: long_1.default.UZERO,
        purgeHeight: long_1.default.UZERO,
    };
}
exports.AlertStatus = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.conclusionStatus.isZero()) {
            writer.uint32(8).uint64(message.conclusionStatus);
        }
        if (!message.submissionHeight.isZero()) {
            writer.uint32(16).uint64(message.submissionHeight);
        }
        if (!message.submissionTimestamp.isZero()) {
            writer.uint32(24).uint64(message.submissionTimestamp);
        }
        if (!message.purgeHeight.isZero()) {
            writer.uint32(32).uint64(message.purgeHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlertStatus();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.conclusionStatus = reader.uint64();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.submissionHeight = reader.uint64();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.submissionTimestamp = reader.uint64();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.purgeHeight = reader.uint64();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            conclusionStatus: isSet(object.conclusionStatus) ? long_1.default.fromValue(object.conclusionStatus) : long_1.default.UZERO,
            submissionHeight: isSet(object.submissionHeight) ? long_1.default.fromValue(object.submissionHeight) : long_1.default.UZERO,
            submissionTimestamp: isSet(object.submissionTimestamp)
                ? long_1.default.fromValue(object.submissionTimestamp)
                : long_1.default.UZERO,
            purgeHeight: isSet(object.purgeHeight) ? long_1.default.fromValue(object.purgeHeight) : long_1.default.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        if (!message.conclusionStatus.isZero()) {
            obj.conclusionStatus = (message.conclusionStatus || long_1.default.UZERO).toString();
        }
        if (!message.submissionHeight.isZero()) {
            obj.submissionHeight = (message.submissionHeight || long_1.default.UZERO).toString();
        }
        if (!message.submissionTimestamp.isZero()) {
            obj.submissionTimestamp = (message.submissionTimestamp || long_1.default.UZERO).toString();
        }
        if (!message.purgeHeight.isZero()) {
            obj.purgeHeight = (message.purgeHeight || long_1.default.UZERO).toString();
        }
        return obj;
    },
    create(base) {
        return exports.AlertStatus.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseAlertStatus();
        message.conclusionStatus =
            object.conclusionStatus !== undefined && object.conclusionStatus !== null
                ? long_1.default.fromValue(object.conclusionStatus)
                : long_1.default.UZERO;
        message.submissionHeight =
            object.submissionHeight !== undefined && object.submissionHeight !== null
                ? long_1.default.fromValue(object.submissionHeight)
                : long_1.default.UZERO;
        message.submissionTimestamp =
            object.submissionTimestamp !== undefined && object.submissionTimestamp !== null
                ? long_1.default.fromValue(object.submissionTimestamp)
                : long_1.default.UZERO;
        message.purgeHeight =
            object.purgeHeight !== undefined && object.purgeHeight !== null
                ? long_1.default.fromValue(object.purgeHeight)
                : long_1.default.UZERO;
        return message;
    },
};
function createBaseAlertWithStatus() {
    return { alert: undefined, status: undefined };
}
exports.AlertWithStatus = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.alert !== undefined) {
            exports.Alert.encode(message.alert, writer.uint32(10).fork()).ldelim();
        }
        if (message.status !== undefined) {
            exports.AlertStatus.encode(message.status, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlertWithStatus();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.alert = exports.Alert.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.status = exports.AlertStatus.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            alert: isSet(object.alert) ? exports.Alert.fromJSON(object.alert) : undefined,
            status: isSet(object.status) ? exports.AlertStatus.fromJSON(object.status) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.alert !== undefined) {
            obj.alert = exports.Alert.toJSON(message.alert);
        }
        if (message.status !== undefined) {
            obj.status = exports.AlertStatus.toJSON(message.status);
        }
        return obj;
    },
    create(base) {
        return exports.AlertWithStatus.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseAlertWithStatus();
        message.alert =
            object.alert !== undefined && object.alert !== null ? exports.Alert.fromPartial(object.alert) : undefined;
        message.status =
            object.status !== undefined && object.status !== null
                ? exports.AlertStatus.fromPartial(object.status)
                : undefined;
        return message;
    },
};
function createBaseSignature() {
    return { signer: "", signature: new Uint8Array(0) };
}
exports.Signature = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.signer !== "") {
            writer.uint32(10).string(message.signer);
        }
        if (message.signature.length !== 0) {
            writer.uint32(18).bytes(message.signature);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSignature();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.signer = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.signature = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
            signature: isSet(object.signature) ? bytesFromBase64(object.signature) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.signer !== "") {
            obj.signer = message.signer;
        }
        if (message.signature.length !== 0) {
            obj.signature = base64FromBytes(message.signature);
        }
        return obj;
    },
    create(base) {
        return exports.Signature.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseSignature();
        message.signer = (_a = object.signer) !== null && _a !== void 0 ? _a : "";
        message.signature = (_b = object.signature) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        return message;
    },
};
function createBaseMultiSigConclusion() {
    return {
        alert: undefined,
        extendedCommitInfo: undefined,
        signatures: [],
        priceBound: undefined,
        status: false,
        currencyPairID: long_1.default.UZERO,
    };
}
exports.MultiSigConclusion = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.alert !== undefined) {
            exports.Alert.encode(message.alert, writer.uint32(10).fork()).ldelim();
        }
        if (message.extendedCommitInfo !== undefined) {
            types_1.ExtendedCommitInfo.encode(message.extendedCommitInfo, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.signatures) {
            exports.Signature.encode(v, writer.uint32(26).fork()).ldelim();
        }
        if (message.priceBound !== undefined) {
            exports.PriceBound.encode(message.priceBound, writer.uint32(34).fork()).ldelim();
        }
        if (message.status === true) {
            writer.uint32(40).bool(message.status);
        }
        if (!message.currencyPairID.isZero()) {
            writer.uint32(48).uint64(message.currencyPairID);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMultiSigConclusion();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.alert = exports.Alert.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.extendedCommitInfo = types_1.ExtendedCommitInfo.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.signatures.push(exports.Signature.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.priceBound = exports.PriceBound.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.status = reader.bool();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.currencyPairID = reader.uint64();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            alert: isSet(object.alert) ? exports.Alert.fromJSON(object.alert) : undefined,
            extendedCommitInfo: isSet(object.extendedCommitInfo)
                ? types_1.ExtendedCommitInfo.fromJSON(object.extendedCommitInfo)
                : undefined,
            signatures: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.signatures)
                ? object.signatures.map((e) => exports.Signature.fromJSON(e))
                : [],
            priceBound: isSet(object.priceBound) ? exports.PriceBound.fromJSON(object.priceBound) : undefined,
            status: isSet(object.status) ? globalThis.Boolean(object.status) : false,
            currencyPairID: isSet(object.currencyPairID) ? long_1.default.fromValue(object.currencyPairID) : long_1.default.UZERO,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.alert !== undefined) {
            obj.alert = exports.Alert.toJSON(message.alert);
        }
        if (message.extendedCommitInfo !== undefined) {
            obj.extendedCommitInfo = types_1.ExtendedCommitInfo.toJSON(message.extendedCommitInfo);
        }
        if ((_a = message.signatures) === null || _a === void 0 ? void 0 : _a.length) {
            obj.signatures = message.signatures.map((e) => exports.Signature.toJSON(e));
        }
        if (message.priceBound !== undefined) {
            obj.priceBound = exports.PriceBound.toJSON(message.priceBound);
        }
        if (message.status === true) {
            obj.status = message.status;
        }
        if (!message.currencyPairID.isZero()) {
            obj.currencyPairID = (message.currencyPairID || long_1.default.UZERO).toString();
        }
        return obj;
    },
    create(base) {
        return exports.MultiSigConclusion.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMultiSigConclusion();
        message.alert =
            object.alert !== undefined && object.alert !== null ? exports.Alert.fromPartial(object.alert) : undefined;
        message.extendedCommitInfo =
            object.extendedCommitInfo !== undefined && object.extendedCommitInfo !== null
                ? types_1.ExtendedCommitInfo.fromPartial(object.extendedCommitInfo)
                : undefined;
        message.signatures = ((_a = object.signatures) === null || _a === void 0 ? void 0 : _a.map((e) => exports.Signature.fromPartial(e))) || [];
        message.priceBound =
            object.priceBound !== undefined && object.priceBound !== null
                ? exports.PriceBound.fromPartial(object.priceBound)
                : undefined;
        message.status = (_b = object.status) !== null && _b !== void 0 ? _b : false;
        message.currencyPairID =
            object.currencyPairID !== undefined && object.currencyPairID !== null
                ? long_1.default.fromValue(object.currencyPairID)
                : long_1.default.UZERO;
        return message;
    },
};
function createBaseMultiSigConclusionVerificationParams() {
    return { signers: [] };
}
exports.MultiSigConclusionVerificationParams = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.signers) {
            any_1.Any.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMultiSigConclusionVerificationParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.signers.push(any_1.Any.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            signers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.signers)
                ? object.signers.map((e) => any_1.Any.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.signers) === null || _a === void 0 ? void 0 : _a.length) {
            obj.signers = message.signers.map((e) => any_1.Any.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.MultiSigConclusionVerificationParams.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMultiSigConclusionVerificationParams();
        message.signers = ((_a = object.signers) === null || _a === void 0 ? void 0 : _a.map((e) => any_1.Any.fromPartial(e))) || [];
        return message;
    },
};
function createBasePriceBound() {
    return { high: "", low: "" };
}
exports.PriceBound = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.high !== "") {
            writer.uint32(10).string(message.high);
        }
        if (message.low !== "") {
            writer.uint32(18).string(message.low);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePriceBound();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.high = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.low = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            high: isSet(object.high) ? globalThis.String(object.high) : "",
            low: isSet(object.low) ? globalThis.String(object.low) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.high !== "") {
            obj.high = message.high;
        }
        if (message.low !== "") {
            obj.low = message.low;
        }
        return obj;
    },
    create(base) {
        return exports.PriceBound.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBasePriceBound();
        message.high = (_a = object.high) !== null && _a !== void 0 ? _a : "";
        message.low = (_b = object.low) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=alerts.js.map