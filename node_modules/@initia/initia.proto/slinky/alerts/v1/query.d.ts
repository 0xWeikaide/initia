import { grpc } from "@improbable-eng/grpc-web";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Alert } from "./alerts";
import { Params } from "./genesis";
export declare const protobufPackage = "slinky.alerts.v1";
/**
 * AlertStatus is the type for the status of an Alert, it can be Unconcluded or
 * Concluded.
 */
export declare enum AlertStatusID {
    CONCLUSION_STATUS_UNSPECIFIED = 0,
    CONCLUSION_STATUS_UNCONCLUDED = 1,
    CONCLUSION_STATUS_CONCLUDED = 2,
    UNRECOGNIZED = -1
}
export declare function alertStatusIDFromJSON(object: any): AlertStatusID;
export declare function alertStatusIDToJSON(object: AlertStatusID): string;
/**
 * AlertsRequest is the request type for the Query.Alerts RPC method, the status
 * field indicates whether the request should return only Unconcluded /
 * Concluded Alerts, or all Alerts.
 */
export interface AlertsRequest {
    status: AlertStatusID;
}
/**
 * AlertsResponse is the response type for the Query.Alerts RPC method, it
 * contains the list of Alerts that are being tracked by the alerts module.
 */
export interface AlertsResponse {
    alerts: Alert[];
}
/** ParamsRequest is the request type for the Query.Params RPC method. */
export interface ParamsRequest {
}
/**
 * ParamsResponse is the response type for the Query.Params RPC method, it
 * contains the Params of the module.
 */
export interface ParamsResponse {
    params?: Params | undefined;
}
export declare const AlertsRequest: {
    encode(message: AlertsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AlertsRequest;
    fromJSON(object: any): AlertsRequest;
    toJSON(message: AlertsRequest): unknown;
    create(base?: DeepPartial<AlertsRequest>): AlertsRequest;
    fromPartial(object: DeepPartial<AlertsRequest>): AlertsRequest;
};
export declare const AlertsResponse: {
    encode(message: AlertsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AlertsResponse;
    fromJSON(object: any): AlertsResponse;
    toJSON(message: AlertsResponse): unknown;
    create(base?: DeepPartial<AlertsResponse>): AlertsResponse;
    fromPartial(object: DeepPartial<AlertsResponse>): AlertsResponse;
};
export declare const ParamsRequest: {
    encode(_: ParamsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ParamsRequest;
    fromJSON(_: any): ParamsRequest;
    toJSON(_: ParamsRequest): unknown;
    create(base?: DeepPartial<ParamsRequest>): ParamsRequest;
    fromPartial(_: DeepPartial<ParamsRequest>): ParamsRequest;
};
export declare const ParamsResponse: {
    encode(message: ParamsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ParamsResponse;
    fromJSON(object: any): ParamsResponse;
    toJSON(message: ParamsResponse): unknown;
    create(base?: DeepPartial<ParamsResponse>): ParamsResponse;
    fromPartial(object: DeepPartial<ParamsResponse>): ParamsResponse;
};
/** Query is the query service for the x/alerts module. */
export interface Query {
    /**
     * Alerts gets all alerts in state under the given status. If no status is
     * given, all Alerts are returned
     */
    Alerts(request: DeepPartial<AlertsRequest>, metadata?: grpc.Metadata): Promise<AlertsResponse>;
    Params(request: DeepPartial<ParamsRequest>, metadata?: grpc.Metadata): Promise<ParamsResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    Alerts(request: DeepPartial<AlertsRequest>, metadata?: grpc.Metadata): Promise<AlertsResponse>;
    Params(request: DeepPartial<ParamsRequest>, metadata?: grpc.Metadata): Promise<ParamsResponse>;
}
export declare const QueryDesc: {
    serviceName: string;
};
export declare const QueryAlertsDesc: UnaryMethodDefinitionish;
export declare const QueryParamsDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
        upStreamRetryCodes?: number[];
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export declare class GrpcWebError extends globalThis.Error {
    code: grpc.Code;
    metadata: grpc.Metadata;
    constructor(message: string, code: grpc.Code, metadata: grpc.Metadata);
}
export {};
