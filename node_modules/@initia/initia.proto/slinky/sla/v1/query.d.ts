import { grpc } from "@improbable-eng/grpc-web";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Params, PriceFeed, PriceFeedSLA } from "./genesis";
export declare const protobufPackage = "slinky.sla.v1";
/** QueryAllSLAsRequest is the request type for the Query/GetAllSLAs RPC method. */
export interface GetAllSLAsRequest {
}
/**
 * QueryAllSLAsResponse is the response type for the Query/GetAllSLAs RPC
 * method.
 */
export interface GetAllSLAsResponse {
    slas: PriceFeedSLA[];
}
/**
 * QueryGetPriceFeedsRequest is the request type for the Query/GetPriceFeeds RPC
 * method.
 */
export interface GetPriceFeedsRequest {
    /** ID defines the SLA to query price feeds for. */
    id: string;
}
/**
 * QueryGetPriceFeedsResponse is the response type for the Query/GetPriceFeeds
 * RPC method.
 */
export interface GetPriceFeedsResponse {
    /** PriceFeeds defines the price feeds for the given SLA. */
    priceFeeds: PriceFeed[];
}
/** QueryParamsRequest is the request type for the Query/Params RPC method. */
export interface ParamsRequest {
}
/** QueryParamsResponse is the response type for the Query/Params RPC method. */
export interface ParamsResponse {
    params?: Params | undefined;
}
export declare const GetAllSLAsRequest: {
    encode(_: GetAllSLAsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetAllSLAsRequest;
    fromJSON(_: any): GetAllSLAsRequest;
    toJSON(_: GetAllSLAsRequest): unknown;
    create(base?: DeepPartial<GetAllSLAsRequest>): GetAllSLAsRequest;
    fromPartial(_: DeepPartial<GetAllSLAsRequest>): GetAllSLAsRequest;
};
export declare const GetAllSLAsResponse: {
    encode(message: GetAllSLAsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetAllSLAsResponse;
    fromJSON(object: any): GetAllSLAsResponse;
    toJSON(message: GetAllSLAsResponse): unknown;
    create(base?: DeepPartial<GetAllSLAsResponse>): GetAllSLAsResponse;
    fromPartial(object: DeepPartial<GetAllSLAsResponse>): GetAllSLAsResponse;
};
export declare const GetPriceFeedsRequest: {
    encode(message: GetPriceFeedsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetPriceFeedsRequest;
    fromJSON(object: any): GetPriceFeedsRequest;
    toJSON(message: GetPriceFeedsRequest): unknown;
    create(base?: DeepPartial<GetPriceFeedsRequest>): GetPriceFeedsRequest;
    fromPartial(object: DeepPartial<GetPriceFeedsRequest>): GetPriceFeedsRequest;
};
export declare const GetPriceFeedsResponse: {
    encode(message: GetPriceFeedsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetPriceFeedsResponse;
    fromJSON(object: any): GetPriceFeedsResponse;
    toJSON(message: GetPriceFeedsResponse): unknown;
    create(base?: DeepPartial<GetPriceFeedsResponse>): GetPriceFeedsResponse;
    fromPartial(object: DeepPartial<GetPriceFeedsResponse>): GetPriceFeedsResponse;
};
export declare const ParamsRequest: {
    encode(_: ParamsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ParamsRequest;
    fromJSON(_: any): ParamsRequest;
    toJSON(_: ParamsRequest): unknown;
    create(base?: DeepPartial<ParamsRequest>): ParamsRequest;
    fromPartial(_: DeepPartial<ParamsRequest>): ParamsRequest;
};
export declare const ParamsResponse: {
    encode(message: ParamsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ParamsResponse;
    fromJSON(object: any): ParamsResponse;
    toJSON(message: ParamsResponse): unknown;
    create(base?: DeepPartial<ParamsResponse>): ParamsResponse;
    fromPartial(object: DeepPartial<ParamsResponse>): ParamsResponse;
};
/** Query is the query service for the x/sla module. */
export interface Query {
    /** GetAllSLAs returns all SLAs that the module is currently enforcing. */
    GetAllSLAs(request: DeepPartial<GetAllSLAsRequest>, metadata?: grpc.Metadata): Promise<GetAllSLAsResponse>;
    /**
     * GetPriceFeeds returns all price feeds that the module is currently
     * tracking. This request type inputs the SLA ID to query price feeds for.
     */
    GetPriceFeeds(request: DeepPartial<GetPriceFeedsRequest>, metadata?: grpc.Metadata): Promise<GetPriceFeedsResponse>;
    /** Params returns the current SLA module parameters. */
    Params(request: DeepPartial<ParamsRequest>, metadata?: grpc.Metadata): Promise<ParamsResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    GetAllSLAs(request: DeepPartial<GetAllSLAsRequest>, metadata?: grpc.Metadata): Promise<GetAllSLAsResponse>;
    GetPriceFeeds(request: DeepPartial<GetPriceFeedsRequest>, metadata?: grpc.Metadata): Promise<GetPriceFeedsResponse>;
    Params(request: DeepPartial<ParamsRequest>, metadata?: grpc.Metadata): Promise<ParamsResponse>;
}
export declare const QueryDesc: {
    serviceName: string;
};
export declare const QueryGetAllSLAsDesc: UnaryMethodDefinitionish;
export declare const QueryGetPriceFeedsDesc: UnaryMethodDefinitionish;
export declare const QueryParamsDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
        upStreamRetryCodes?: number[];
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export declare class GrpcWebError extends globalThis.Error {
    code: grpc.Code;
    metadata: grpc.Metadata;
    constructor(message: string, code: grpc.Code, metadata: grpc.Metadata);
}
export {};
