import { grpc } from "@improbable-eng/grpc-web";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Params, PriceFeedSLA } from "./genesis";
export declare const protobufPackage = "slinky.sla.v1";
/**
 * MsgAddSLAs defines the Msg/AddSLAs request type. It contains the
 * SLAs to be added to the store.
 */
export interface MsgAddSLAs {
    /** SLAs defines the SLAs to be added to the store. */
    slas: PriceFeedSLA[];
    /** Authority defines the authority that is adding the SLAs. */
    authority: string;
}
/** MsgAddSLAsResponse defines the Msg/AddSLAs response type. */
export interface MsgAddSLAsResponse {
}
/**
 * MsgRemoveSLAs defines the Msg/RemoveSLAs request type. It contains the
 * IDs of the SLAs to be removed from the store.
 */
export interface MsgRemoveSLAs {
    /** IDs defines the IDs of the SLAs to be removed from the store. */
    ids: string[];
    /** Authority defines the authority that is removing the SLAs. */
    authority: string;
}
/** MsgRemoveSLAsResponse defines the Msg/RemoveSLAs response type. */
export interface MsgRemoveSLAsResponse {
}
/**
 * MsgParams defines the Msg/Params request type. It contains the
 * new parameters for the SLA module.
 */
export interface MsgParams {
    /** Params defines the new parameters for the SLA module. */
    params?: Params | undefined;
    /** Authority defines the authority that is updating the SLA module parameters. */
    authority: string;
}
/** MsgParamsResponse defines the Msg/Params response type. */
export interface MsgParamsResponse {
}
export declare const MsgAddSLAs: {
    encode(message: MsgAddSLAs, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgAddSLAs;
    fromJSON(object: any): MsgAddSLAs;
    toJSON(message: MsgAddSLAs): unknown;
    create(base?: DeepPartial<MsgAddSLAs>): MsgAddSLAs;
    fromPartial(object: DeepPartial<MsgAddSLAs>): MsgAddSLAs;
};
export declare const MsgAddSLAsResponse: {
    encode(_: MsgAddSLAsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgAddSLAsResponse;
    fromJSON(_: any): MsgAddSLAsResponse;
    toJSON(_: MsgAddSLAsResponse): unknown;
    create(base?: DeepPartial<MsgAddSLAsResponse>): MsgAddSLAsResponse;
    fromPartial(_: DeepPartial<MsgAddSLAsResponse>): MsgAddSLAsResponse;
};
export declare const MsgRemoveSLAs: {
    encode(message: MsgRemoveSLAs, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgRemoveSLAs;
    fromJSON(object: any): MsgRemoveSLAs;
    toJSON(message: MsgRemoveSLAs): unknown;
    create(base?: DeepPartial<MsgRemoveSLAs>): MsgRemoveSLAs;
    fromPartial(object: DeepPartial<MsgRemoveSLAs>): MsgRemoveSLAs;
};
export declare const MsgRemoveSLAsResponse: {
    encode(_: MsgRemoveSLAsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgRemoveSLAsResponse;
    fromJSON(_: any): MsgRemoveSLAsResponse;
    toJSON(_: MsgRemoveSLAsResponse): unknown;
    create(base?: DeepPartial<MsgRemoveSLAsResponse>): MsgRemoveSLAsResponse;
    fromPartial(_: DeepPartial<MsgRemoveSLAsResponse>): MsgRemoveSLAsResponse;
};
export declare const MsgParams: {
    encode(message: MsgParams, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgParams;
    fromJSON(object: any): MsgParams;
    toJSON(message: MsgParams): unknown;
    create(base?: DeepPartial<MsgParams>): MsgParams;
    fromPartial(object: DeepPartial<MsgParams>): MsgParams;
};
export declare const MsgParamsResponse: {
    encode(_: MsgParamsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgParamsResponse;
    fromJSON(_: any): MsgParamsResponse;
    toJSON(_: MsgParamsResponse): unknown;
    create(base?: DeepPartial<MsgParamsResponse>): MsgParamsResponse;
    fromPartial(_: DeepPartial<MsgParamsResponse>): MsgParamsResponse;
};
/** Msg is the message service for the x/sla module. */
export interface Msg {
    /**
     * AddSLA defines a method for adding a new SLAs to the store. Note, this will
     * overwrite any existing SLA with the same ID.
     */
    AddSLAs(request: DeepPartial<MsgAddSLAs>, metadata?: grpc.Metadata): Promise<MsgAddSLAsResponse>;
    /**
     * RemoveSLA defines a method for removing existing SLAs from the store. Note,
     * this will not panic if the SLA does not exist.
     */
    RemoveSLAs(request: DeepPartial<MsgRemoveSLAs>, metadata?: grpc.Metadata): Promise<MsgRemoveSLAsResponse>;
    /** Params defines a method for updating the SLA module parameters. */
    Params(request: DeepPartial<MsgParams>, metadata?: grpc.Metadata): Promise<MsgParamsResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    constructor(rpc: Rpc);
    AddSLAs(request: DeepPartial<MsgAddSLAs>, metadata?: grpc.Metadata): Promise<MsgAddSLAsResponse>;
    RemoveSLAs(request: DeepPartial<MsgRemoveSLAs>, metadata?: grpc.Metadata): Promise<MsgRemoveSLAsResponse>;
    Params(request: DeepPartial<MsgParams>, metadata?: grpc.Metadata): Promise<MsgParamsResponse>;
}
export declare const MsgDesc: {
    serviceName: string;
};
export declare const MsgAddSLAsDesc: UnaryMethodDefinitionish;
export declare const MsgRemoveSLAsDesc: UnaryMethodDefinitionish;
export declare const MsgParamsDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
        upStreamRetryCodes?: number[];
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export declare class GrpcWebError extends globalThis.Error {
    code: grpc.Code;
    metadata: grpc.Metadata;
    constructor(message: string, code: grpc.Code, metadata: grpc.Metadata);
}
export {};
