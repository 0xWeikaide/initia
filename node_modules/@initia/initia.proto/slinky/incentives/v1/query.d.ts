import { grpc } from "@improbable-eng/grpc-web";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { IncentivesByType } from "./genesis";
export declare const protobufPackage = "slinky.incentives.v1";
/**
 * GetIncentivesByTypeRequest is the request type for the
 * Query/GetIncentivesByType RPC method.
 */
export interface GetIncentivesByTypeRequest {
    /**
     * IncentiveType is the incentive type i.e. (BadPriceIncentiveType,
     * GoodPriceIncentiveType).
     */
    incentiveType: string;
}
/**
 * GetIncentivesByTypeResponse is the response type for the
 * Query/GetIncentivesByType RPC method.
 */
export interface GetIncentivesByTypeResponse {
    /** Entries is the list of incentives of the given type. */
    entries: Uint8Array[];
}
/**
 * GetAllIncentivesRequest is the request type for the Query/GetAllIncentives
 * RPC method.
 */
export interface GetAllIncentivesRequest {
}
/**
 * GetAllIncentivesResponse is the response type for the Query/GetAllIncentives
 * RPC method.
 */
export interface GetAllIncentivesResponse {
    /** Registry is the list of all incentives, grouped by type. */
    registry: IncentivesByType[];
}
export declare const GetIncentivesByTypeRequest: {
    encode(message: GetIncentivesByTypeRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetIncentivesByTypeRequest;
    fromJSON(object: any): GetIncentivesByTypeRequest;
    toJSON(message: GetIncentivesByTypeRequest): unknown;
    create(base?: DeepPartial<GetIncentivesByTypeRequest>): GetIncentivesByTypeRequest;
    fromPartial(object: DeepPartial<GetIncentivesByTypeRequest>): GetIncentivesByTypeRequest;
};
export declare const GetIncentivesByTypeResponse: {
    encode(message: GetIncentivesByTypeResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetIncentivesByTypeResponse;
    fromJSON(object: any): GetIncentivesByTypeResponse;
    toJSON(message: GetIncentivesByTypeResponse): unknown;
    create(base?: DeepPartial<GetIncentivesByTypeResponse>): GetIncentivesByTypeResponse;
    fromPartial(object: DeepPartial<GetIncentivesByTypeResponse>): GetIncentivesByTypeResponse;
};
export declare const GetAllIncentivesRequest: {
    encode(_: GetAllIncentivesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetAllIncentivesRequest;
    fromJSON(_: any): GetAllIncentivesRequest;
    toJSON(_: GetAllIncentivesRequest): unknown;
    create(base?: DeepPartial<GetAllIncentivesRequest>): GetAllIncentivesRequest;
    fromPartial(_: DeepPartial<GetAllIncentivesRequest>): GetAllIncentivesRequest;
};
export declare const GetAllIncentivesResponse: {
    encode(message: GetAllIncentivesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetAllIncentivesResponse;
    fromJSON(object: any): GetAllIncentivesResponse;
    toJSON(message: GetAllIncentivesResponse): unknown;
    create(base?: DeepPartial<GetAllIncentivesResponse>): GetAllIncentivesResponse;
    fromPartial(object: DeepPartial<GetAllIncentivesResponse>): GetAllIncentivesResponse;
};
/** Query is the query service for the x/incentives module. */
export interface Query {
    /**
     * GetIncentivesByType returns all incentives of a given type. If the type is
     * not registered with the module, an error is returned.
     */
    GetIncentivesByType(request: DeepPartial<GetIncentivesByTypeRequest>, metadata?: grpc.Metadata): Promise<GetIncentivesByTypeResponse>;
    /** GetAllIncentives returns all incentives. */
    GetAllIncentives(request: DeepPartial<GetAllIncentivesRequest>, metadata?: grpc.Metadata): Promise<GetAllIncentivesResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    GetIncentivesByType(request: DeepPartial<GetIncentivesByTypeRequest>, metadata?: grpc.Metadata): Promise<GetIncentivesByTypeResponse>;
    GetAllIncentives(request: DeepPartial<GetAllIncentivesRequest>, metadata?: grpc.Metadata): Promise<GetAllIncentivesResponse>;
}
export declare const QueryDesc: {
    serviceName: string;
};
export declare const QueryGetIncentivesByTypeDesc: UnaryMethodDefinitionish;
export declare const QueryGetAllIncentivesDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
        upStreamRetryCodes?: number[];
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export declare class GrpcWebError extends globalThis.Error {
    code: grpc.Code;
    metadata: grpc.Metadata;
    constructor(message: string, code: grpc.Code, metadata: grpc.Metadata);
}
export {};
