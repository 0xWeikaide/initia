import Long from "long";
import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "slinky.incentives.v1";
/** GenesisState is the genesis-state for the x/incentives module. */
export interface GenesisState {
    /**
     * Registry is a list of incentives by type. The registry defined here
     * should be a subset of the incentive types defined in the incentive
     * module (keeper).
     */
    registry: IncentivesByType[];
}
/**
 * IncentivesByType encapsulates a list of incentives by type. Each of the
 * entries here must correspond to the same incentive type defined here.
 */
export interface IncentivesByType {
    /**
     * IncentiveType is the incentive type i.e. (BadPriceIncentiveType,
     * GoodPriceIncentiveType).
     */
    incentiveType: string;
    /** Entries is a list of incentive bytes. */
    entries: Uint8Array[];
}
export declare const GenesisState: {
    encode(message: GenesisState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState;
    fromJSON(object: any): GenesisState;
    toJSON(message: GenesisState): unknown;
    create(base?: DeepPartial<GenesisState>): GenesisState;
    fromPartial(object: DeepPartial<GenesisState>): GenesisState;
};
export declare const IncentivesByType: {
    encode(message: IncentivesByType, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): IncentivesByType;
    fromJSON(object: any): IncentivesByType;
    toJSON(message: IncentivesByType): unknown;
    create(base?: DeepPartial<IncentivesByType>): IncentivesByType;
    fromPartial(object: DeepPartial<IncentivesByType>): IncentivesByType;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
