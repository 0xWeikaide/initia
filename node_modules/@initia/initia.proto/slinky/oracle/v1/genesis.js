"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenesisState = exports.CurrencyPairGenesis = exports.CurrencyPairState = exports.QuotePrice = exports.CurrencyPair = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const timestamp_1 = require("../../../google/protobuf/timestamp");
exports.protobufPackage = "slinky.oracle.v1";
function createBaseCurrencyPair() {
    return { Base: "", Quote: "" };
}
exports.CurrencyPair = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.Base !== "") {
            writer.uint32(10).string(message.Base);
        }
        if (message.Quote !== "") {
            writer.uint32(18).string(message.Quote);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCurrencyPair();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.Base = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.Quote = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            Base: isSet(object.Base) ? globalThis.String(object.Base) : "",
            Quote: isSet(object.Quote) ? globalThis.String(object.Quote) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.Base !== "") {
            obj.Base = message.Base;
        }
        if (message.Quote !== "") {
            obj.Quote = message.Quote;
        }
        return obj;
    },
    create(base) {
        return exports.CurrencyPair.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseCurrencyPair();
        message.Base = (_a = object.Base) !== null && _a !== void 0 ? _a : "";
        message.Quote = (_b = object.Quote) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQuotePrice() {
    return { price: "", blockTimestamp: undefined, blockHeight: long_1.default.UZERO };
}
exports.QuotePrice = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.price !== "") {
            writer.uint32(10).string(message.price);
        }
        if (message.blockTimestamp !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.blockTimestamp), writer.uint32(18).fork()).ldelim();
        }
        if (!message.blockHeight.isZero()) {
            writer.uint32(24).uint64(message.blockHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuotePrice();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.price = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.blockTimestamp = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.blockHeight = reader.uint64();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            price: isSet(object.price) ? globalThis.String(object.price) : "",
            blockTimestamp: isSet(object.blockTimestamp) ? fromJsonTimestamp(object.blockTimestamp) : undefined,
            blockHeight: isSet(object.blockHeight) ? long_1.default.fromValue(object.blockHeight) : long_1.default.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.price !== "") {
            obj.price = message.price;
        }
        if (message.blockTimestamp !== undefined) {
            obj.blockTimestamp = message.blockTimestamp.toISOString();
        }
        if (!message.blockHeight.isZero()) {
            obj.blockHeight = (message.blockHeight || long_1.default.UZERO).toString();
        }
        return obj;
    },
    create(base) {
        return exports.QuotePrice.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQuotePrice();
        message.price = (_a = object.price) !== null && _a !== void 0 ? _a : "";
        message.blockTimestamp = (_b = object.blockTimestamp) !== null && _b !== void 0 ? _b : undefined;
        message.blockHeight =
            object.blockHeight !== undefined && object.blockHeight !== null
                ? long_1.default.fromValue(object.blockHeight)
                : long_1.default.UZERO;
        return message;
    },
};
function createBaseCurrencyPairState() {
    return { price: undefined, nonce: long_1.default.UZERO, id: long_1.default.UZERO };
}
exports.CurrencyPairState = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.price !== undefined) {
            exports.QuotePrice.encode(message.price, writer.uint32(10).fork()).ldelim();
        }
        if (!message.nonce.isZero()) {
            writer.uint32(16).uint64(message.nonce);
        }
        if (!message.id.isZero()) {
            writer.uint32(24).uint64(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCurrencyPairState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.price = exports.QuotePrice.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.nonce = reader.uint64();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.id = reader.uint64();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            price: isSet(object.price) ? exports.QuotePrice.fromJSON(object.price) : undefined,
            nonce: isSet(object.nonce) ? long_1.default.fromValue(object.nonce) : long_1.default.UZERO,
            id: isSet(object.id) ? long_1.default.fromValue(object.id) : long_1.default.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.price !== undefined) {
            obj.price = exports.QuotePrice.toJSON(message.price);
        }
        if (!message.nonce.isZero()) {
            obj.nonce = (message.nonce || long_1.default.UZERO).toString();
        }
        if (!message.id.isZero()) {
            obj.id = (message.id || long_1.default.UZERO).toString();
        }
        return obj;
    },
    create(base) {
        return exports.CurrencyPairState.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseCurrencyPairState();
        message.price =
            object.price !== undefined && object.price !== null ? exports.QuotePrice.fromPartial(object.price) : undefined;
        message.nonce =
            object.nonce !== undefined && object.nonce !== null ? long_1.default.fromValue(object.nonce) : long_1.default.UZERO;
        message.id = object.id !== undefined && object.id !== null ? long_1.default.fromValue(object.id) : long_1.default.UZERO;
        return message;
    },
};
function createBaseCurrencyPairGenesis() {
    return { currencyPair: undefined, currencyPairPrice: undefined, nonce: long_1.default.UZERO, id: long_1.default.UZERO };
}
exports.CurrencyPairGenesis = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.currencyPair !== undefined) {
            exports.CurrencyPair.encode(message.currencyPair, writer.uint32(10).fork()).ldelim();
        }
        if (message.currencyPairPrice !== undefined) {
            exports.QuotePrice.encode(message.currencyPairPrice, writer.uint32(18).fork()).ldelim();
        }
        if (!message.nonce.isZero()) {
            writer.uint32(24).uint64(message.nonce);
        }
        if (!message.id.isZero()) {
            writer.uint32(32).uint64(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCurrencyPairGenesis();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.currencyPair = exports.CurrencyPair.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.currencyPairPrice = exports.QuotePrice.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.nonce = reader.uint64();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.id = reader.uint64();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            currencyPair: isSet(object.currencyPair) ? exports.CurrencyPair.fromJSON(object.currencyPair) : undefined,
            currencyPairPrice: isSet(object.currencyPairPrice)
                ? exports.QuotePrice.fromJSON(object.currencyPairPrice)
                : undefined,
            nonce: isSet(object.nonce) ? long_1.default.fromValue(object.nonce) : long_1.default.UZERO,
            id: isSet(object.id) ? long_1.default.fromValue(object.id) : long_1.default.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.currencyPair !== undefined) {
            obj.currencyPair = exports.CurrencyPair.toJSON(message.currencyPair);
        }
        if (message.currencyPairPrice !== undefined) {
            obj.currencyPairPrice = exports.QuotePrice.toJSON(message.currencyPairPrice);
        }
        if (!message.nonce.isZero()) {
            obj.nonce = (message.nonce || long_1.default.UZERO).toString();
        }
        if (!message.id.isZero()) {
            obj.id = (message.id || long_1.default.UZERO).toString();
        }
        return obj;
    },
    create(base) {
        return exports.CurrencyPairGenesis.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseCurrencyPairGenesis();
        message.currencyPair =
            object.currencyPair !== undefined && object.currencyPair !== null
                ? exports.CurrencyPair.fromPartial(object.currencyPair)
                : undefined;
        message.currencyPairPrice =
            object.currencyPairPrice !== undefined && object.currencyPairPrice !== null
                ? exports.QuotePrice.fromPartial(object.currencyPairPrice)
                : undefined;
        message.nonce =
            object.nonce !== undefined && object.nonce !== null ? long_1.default.fromValue(object.nonce) : long_1.default.UZERO;
        message.id = object.id !== undefined && object.id !== null ? long_1.default.fromValue(object.id) : long_1.default.UZERO;
        return message;
    },
};
function createBaseGenesisState() {
    return { currencyPairGenesis: [], nextId: long_1.default.UZERO };
}
exports.GenesisState = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.currencyPairGenesis) {
            exports.CurrencyPairGenesis.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (!message.nextId.isZero()) {
            writer.uint32(16).uint64(message.nextId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.currencyPairGenesis.push(exports.CurrencyPairGenesis.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.nextId = reader.uint64();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            currencyPairGenesis: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.currencyPairGenesis)
                ? object.currencyPairGenesis.map((e) => exports.CurrencyPairGenesis.fromJSON(e))
                : [],
            nextId: isSet(object.nextId) ? long_1.default.fromValue(object.nextId) : long_1.default.UZERO,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.currencyPairGenesis) === null || _a === void 0 ? void 0 : _a.length) {
            obj.currencyPairGenesis = message.currencyPairGenesis.map((e) => exports.CurrencyPairGenesis.toJSON(e));
        }
        if (!message.nextId.isZero()) {
            obj.nextId = (message.nextId || long_1.default.UZERO).toString();
        }
        return obj;
    },
    create(base) {
        return exports.GenesisState.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGenesisState();
        message.currencyPairGenesis =
            ((_a = object.currencyPairGenesis) === null || _a === void 0 ? void 0 : _a.map((e) => exports.CurrencyPairGenesis.fromPartial(e))) || [];
        message.nextId =
            object.nextId !== undefined && object.nextId !== null ? long_1.default.fromValue(object.nextId) : long_1.default.UZERO;
        return message;
    },
};
function toTimestamp(date) {
    const seconds = numberToLong(Math.trunc(date.getTime() / 1000));
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds.toNumber() || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function numberToLong(number) {
    return long_1.default.fromNumber(number);
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=genesis.js.map