"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryParamsDesc = exports.QueryScriptABIDesc = exports.QueryViewJSONBatchDesc = exports.QueryViewJSONDesc = exports.QueryViewBatchDesc = exports.QueryViewDesc = exports.QueryLegacyViewDesc = exports.QueryTableEntriesDesc = exports.QueryTableEntryDesc = exports.QueryTableInfoDesc = exports.QueryResourcesDesc = exports.QueryResourceDesc = exports.QueryModulesDesc = exports.QueryModuleDesc = exports.QueryDesc = exports.QueryClientImpl = exports.QueryDenomResponse = exports.QueryDenomRequest = exports.QueryMetadataResponse = exports.QueryMetadataRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.QueryScriptABIResponse = exports.QueryScriptABIRequest = exports.VMEvent = exports.QueryViewJSONBatchResponse = exports.QueryViewJSONBatchRequest = exports.QueryViewJSONResponse = exports.QueryViewJSONRequest = exports.QueryViewBatchResponse = exports.QueryViewBatchRequest = exports.QueryViewResponse = exports.QueryViewRequest = exports.QueryLegacyViewResponse = exports.QueryLegacyViewRequest = exports.QueryTableEntriesResponse = exports.QueryTableEntriesRequest = exports.QueryTableEntryResponse = exports.QueryTableEntryRequest = exports.QueryTableInfoResponse = exports.QueryTableInfoRequest = exports.QueryResourcesResponse = exports.QueryResourcesRequest = exports.QueryResourceResponse = exports.QueryResourceRequest = exports.QueryModulesResponse = exports.QueryModulesRequest = exports.QueryModuleResponse = exports.QueryModuleRequest = exports.protobufPackage = void 0;
exports.GrpcWebError = exports.GrpcWebImpl = exports.QueryDenomDesc = exports.QueryMetadataDesc = void 0;
/* eslint-disable */
const grpc_web_1 = require("@improbable-eng/grpc-web");
const browser_headers_1 = require("browser-headers");
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const pagination_1 = require("../../../cosmos/base/query/v1beta1/pagination");
const types_1 = require("./types");
exports.protobufPackage = "initia.move.v1";
function createBaseQueryModuleRequest() {
    return { address: "", moduleName: "" };
}
exports.QueryModuleRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.moduleName !== "") {
            writer.uint32(18).string(message.moduleName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryModuleRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.moduleName = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            moduleName: isSet(object.moduleName) ? globalThis.String(object.moduleName) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.moduleName !== "") {
            obj.moduleName = message.moduleName;
        }
        return obj;
    },
    create(base) {
        return exports.QueryModuleRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryModuleRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        message.moduleName = (_b = object.moduleName) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryModuleResponse() {
    return { module: undefined };
}
exports.QueryModuleResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.module !== undefined) {
            types_1.Module.encode(message.module, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryModuleResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.module = types_1.Module.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { module: isSet(object.module) ? types_1.Module.fromJSON(object.module) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.module !== undefined) {
            obj.module = types_1.Module.toJSON(message.module);
        }
        return obj;
    },
    create(base) {
        return exports.QueryModuleResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryModuleResponse();
        message.module =
            object.module !== undefined && object.module !== null ? types_1.Module.fromPartial(object.module) : undefined;
        return message;
    },
};
function createBaseQueryModulesRequest() {
    return { address: "", pagination: undefined };
}
exports.QueryModulesRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryModulesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            pagination: isSet(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.pagination !== undefined) {
            obj.pagination = pagination_1.PageRequest.toJSON(message.pagination);
        }
        return obj;
    },
    create(base) {
        return exports.QueryModulesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryModulesRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageRequest.fromPartial(object.pagination)
                : undefined;
        return message;
    },
};
function createBaseQueryModulesResponse() {
    return { modules: [], pagination: undefined };
}
exports.QueryModulesResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.modules) {
            types_1.Module.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryModulesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.modules.push(types_1.Module.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            modules: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.modules)
                ? object.modules.map((e) => types_1.Module.fromJSON(e))
                : [],
            pagination: isSet(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.modules) === null || _a === void 0 ? void 0 : _a.length) {
            obj.modules = message.modules.map((e) => types_1.Module.toJSON(e));
        }
        if (message.pagination !== undefined) {
            obj.pagination = pagination_1.PageResponse.toJSON(message.pagination);
        }
        return obj;
    },
    create(base) {
        return exports.QueryModulesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryModulesResponse();
        message.modules = ((_a = object.modules) === null || _a === void 0 ? void 0 : _a.map((e) => types_1.Module.fromPartial(e))) || [];
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageResponse.fromPartial(object.pagination)
                : undefined;
        return message;
    },
};
function createBaseQueryResourceRequest() {
    return { address: "", structTag: "" };
}
exports.QueryResourceRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.structTag !== "") {
            writer.uint32(18).string(message.structTag);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryResourceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.structTag = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            structTag: isSet(object.structTag) ? globalThis.String(object.structTag) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.structTag !== "") {
            obj.structTag = message.structTag;
        }
        return obj;
    },
    create(base) {
        return exports.QueryResourceRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryResourceRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        message.structTag = (_b = object.structTag) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryResourceResponse() {
    return { resource: undefined };
}
exports.QueryResourceResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.resource !== undefined) {
            types_1.Resource.encode(message.resource, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryResourceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.resource = types_1.Resource.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { resource: isSet(object.resource) ? types_1.Resource.fromJSON(object.resource) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.resource !== undefined) {
            obj.resource = types_1.Resource.toJSON(message.resource);
        }
        return obj;
    },
    create(base) {
        return exports.QueryResourceResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryResourceResponse();
        message.resource =
            object.resource !== undefined && object.resource !== null
                ? types_1.Resource.fromPartial(object.resource)
                : undefined;
        return message;
    },
};
function createBaseQueryResourcesRequest() {
    return { address: "", pagination: undefined };
}
exports.QueryResourcesRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryResourcesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            pagination: isSet(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.pagination !== undefined) {
            obj.pagination = pagination_1.PageRequest.toJSON(message.pagination);
        }
        return obj;
    },
    create(base) {
        return exports.QueryResourcesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryResourcesRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageRequest.fromPartial(object.pagination)
                : undefined;
        return message;
    },
};
function createBaseQueryResourcesResponse() {
    return { resources: [], pagination: undefined };
}
exports.QueryResourcesResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.resources) {
            types_1.Resource.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryResourcesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.resources.push(types_1.Resource.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            resources: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.resources)
                ? object.resources.map((e) => types_1.Resource.fromJSON(e))
                : [],
            pagination: isSet(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.resources) === null || _a === void 0 ? void 0 : _a.length) {
            obj.resources = message.resources.map((e) => types_1.Resource.toJSON(e));
        }
        if (message.pagination !== undefined) {
            obj.pagination = pagination_1.PageResponse.toJSON(message.pagination);
        }
        return obj;
    },
    create(base) {
        return exports.QueryResourcesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryResourcesResponse();
        message.resources = ((_a = object.resources) === null || _a === void 0 ? void 0 : _a.map((e) => types_1.Resource.fromPartial(e))) || [];
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageResponse.fromPartial(object.pagination)
                : undefined;
        return message;
    },
};
function createBaseQueryTableInfoRequest() {
    return { address: "" };
}
exports.QueryTableInfoRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTableInfoRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.QueryTableInfoRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryTableInfoRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryTableInfoResponse() {
    return { tableInfo: undefined };
}
exports.QueryTableInfoResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.tableInfo !== undefined) {
            types_1.TableInfo.encode(message.tableInfo, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTableInfoResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.tableInfo = types_1.TableInfo.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { tableInfo: isSet(object.tableInfo) ? types_1.TableInfo.fromJSON(object.tableInfo) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.tableInfo !== undefined) {
            obj.tableInfo = types_1.TableInfo.toJSON(message.tableInfo);
        }
        return obj;
    },
    create(base) {
        return exports.QueryTableInfoResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryTableInfoResponse();
        message.tableInfo =
            object.tableInfo !== undefined && object.tableInfo !== null
                ? types_1.TableInfo.fromPartial(object.tableInfo)
                : undefined;
        return message;
    },
};
function createBaseQueryTableEntryRequest() {
    return { address: "", keyBytes: new Uint8Array(0) };
}
exports.QueryTableEntryRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.keyBytes.length !== 0) {
            writer.uint32(18).bytes(message.keyBytes);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTableEntryRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.keyBytes = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            keyBytes: isSet(object.keyBytes) ? bytesFromBase64(object.keyBytes) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.keyBytes.length !== 0) {
            obj.keyBytes = base64FromBytes(message.keyBytes);
        }
        return obj;
    },
    create(base) {
        return exports.QueryTableEntryRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryTableEntryRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        message.keyBytes = (_b = object.keyBytes) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        return message;
    },
};
function createBaseQueryTableEntryResponse() {
    return { tableEntry: undefined };
}
exports.QueryTableEntryResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.tableEntry !== undefined) {
            types_1.TableEntry.encode(message.tableEntry, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTableEntryResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.tableEntry = types_1.TableEntry.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { tableEntry: isSet(object.tableEntry) ? types_1.TableEntry.fromJSON(object.tableEntry) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.tableEntry !== undefined) {
            obj.tableEntry = types_1.TableEntry.toJSON(message.tableEntry);
        }
        return obj;
    },
    create(base) {
        return exports.QueryTableEntryResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryTableEntryResponse();
        message.tableEntry =
            object.tableEntry !== undefined && object.tableEntry !== null
                ? types_1.TableEntry.fromPartial(object.tableEntry)
                : undefined;
        return message;
    },
};
function createBaseQueryTableEntriesRequest() {
    return { address: "", pagination: undefined };
}
exports.QueryTableEntriesRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTableEntriesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            pagination: isSet(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.pagination !== undefined) {
            obj.pagination = pagination_1.PageRequest.toJSON(message.pagination);
        }
        return obj;
    },
    create(base) {
        return exports.QueryTableEntriesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryTableEntriesRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageRequest.fromPartial(object.pagination)
                : undefined;
        return message;
    },
};
function createBaseQueryTableEntriesResponse() {
    return { tableEntries: [], pagination: undefined };
}
exports.QueryTableEntriesResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.tableEntries) {
            types_1.TableEntry.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTableEntriesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.tableEntries.push(types_1.TableEntry.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            tableEntries: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.tableEntries)
                ? object.tableEntries.map((e) => types_1.TableEntry.fromJSON(e))
                : [],
            pagination: isSet(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.tableEntries) === null || _a === void 0 ? void 0 : _a.length) {
            obj.tableEntries = message.tableEntries.map((e) => types_1.TableEntry.toJSON(e));
        }
        if (message.pagination !== undefined) {
            obj.pagination = pagination_1.PageResponse.toJSON(message.pagination);
        }
        return obj;
    },
    create(base) {
        return exports.QueryTableEntriesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryTableEntriesResponse();
        message.tableEntries = ((_a = object.tableEntries) === null || _a === void 0 ? void 0 : _a.map((e) => types_1.TableEntry.fromPartial(e))) || [];
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageResponse.fromPartial(object.pagination)
                : undefined;
        return message;
    },
};
function createBaseQueryLegacyViewRequest() {
    return { address: "", moduleName: "", functionName: "", typeArgs: [], args: [] };
}
exports.QueryLegacyViewRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.moduleName !== "") {
            writer.uint32(18).string(message.moduleName);
        }
        if (message.functionName !== "") {
            writer.uint32(26).string(message.functionName);
        }
        for (const v of message.typeArgs) {
            writer.uint32(34).string(v);
        }
        for (const v of message.args) {
            writer.uint32(42).bytes(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryLegacyViewRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.moduleName = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.functionName = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.typeArgs.push(reader.string());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.args.push(reader.bytes());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            moduleName: isSet(object.moduleName) ? globalThis.String(object.moduleName) : "",
            functionName: isSet(object.functionName) ? globalThis.String(object.functionName) : "",
            typeArgs: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.typeArgs)
                ? object.typeArgs.map((e) => globalThis.String(e))
                : [],
            args: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.args) ? object.args.map((e) => bytesFromBase64(e)) : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.moduleName !== "") {
            obj.moduleName = message.moduleName;
        }
        if (message.functionName !== "") {
            obj.functionName = message.functionName;
        }
        if ((_a = message.typeArgs) === null || _a === void 0 ? void 0 : _a.length) {
            obj.typeArgs = message.typeArgs;
        }
        if ((_b = message.args) === null || _b === void 0 ? void 0 : _b.length) {
            obj.args = message.args.map((e) => base64FromBytes(e));
        }
        return obj;
    },
    create(base) {
        return exports.QueryLegacyViewRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseQueryLegacyViewRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        message.moduleName = (_b = object.moduleName) !== null && _b !== void 0 ? _b : "";
        message.functionName = (_c = object.functionName) !== null && _c !== void 0 ? _c : "";
        message.typeArgs = ((_d = object.typeArgs) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        message.args = ((_e = object.args) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        return message;
    },
};
function createBaseQueryLegacyViewResponse() {
    return { data: "", events: [], gasUsed: long_1.default.UZERO };
}
exports.QueryLegacyViewResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.data !== "") {
            writer.uint32(10).string(message.data);
        }
        for (const v of message.events) {
            exports.VMEvent.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (!message.gasUsed.isZero()) {
            writer.uint32(24).uint64(message.gasUsed);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryLegacyViewResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.data = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.events.push(exports.VMEvent.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.gasUsed = reader.uint64();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            data: isSet(object.data) ? globalThis.String(object.data) : "",
            events: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.events)
                ? object.events.map((e) => exports.VMEvent.fromJSON(e))
                : [],
            gasUsed: isSet(object.gasUsed) ? long_1.default.fromValue(object.gasUsed) : long_1.default.UZERO,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.data !== "") {
            obj.data = message.data;
        }
        if ((_a = message.events) === null || _a === void 0 ? void 0 : _a.length) {
            obj.events = message.events.map((e) => exports.VMEvent.toJSON(e));
        }
        if (!message.gasUsed.isZero()) {
            obj.gasUsed = (message.gasUsed || long_1.default.UZERO).toString();
        }
        return obj;
    },
    create(base) {
        return exports.QueryLegacyViewResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryLegacyViewResponse();
        message.data = (_a = object.data) !== null && _a !== void 0 ? _a : "";
        message.events = ((_b = object.events) === null || _b === void 0 ? void 0 : _b.map((e) => exports.VMEvent.fromPartial(e))) || [];
        message.gasUsed =
            object.gasUsed !== undefined && object.gasUsed !== null ? long_1.default.fromValue(object.gasUsed) : long_1.default.UZERO;
        return message;
    },
};
function createBaseQueryViewRequest() {
    return { address: "", moduleName: "", functionName: "", typeArgs: [], args: [] };
}
exports.QueryViewRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.moduleName !== "") {
            writer.uint32(18).string(message.moduleName);
        }
        if (message.functionName !== "") {
            writer.uint32(26).string(message.functionName);
        }
        for (const v of message.typeArgs) {
            writer.uint32(34).string(v);
        }
        for (const v of message.args) {
            writer.uint32(42).bytes(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryViewRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.moduleName = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.functionName = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.typeArgs.push(reader.string());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.args.push(reader.bytes());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            moduleName: isSet(object.moduleName) ? globalThis.String(object.moduleName) : "",
            functionName: isSet(object.functionName) ? globalThis.String(object.functionName) : "",
            typeArgs: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.typeArgs)
                ? object.typeArgs.map((e) => globalThis.String(e))
                : [],
            args: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.args) ? object.args.map((e) => bytesFromBase64(e)) : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.moduleName !== "") {
            obj.moduleName = message.moduleName;
        }
        if (message.functionName !== "") {
            obj.functionName = message.functionName;
        }
        if ((_a = message.typeArgs) === null || _a === void 0 ? void 0 : _a.length) {
            obj.typeArgs = message.typeArgs;
        }
        if ((_b = message.args) === null || _b === void 0 ? void 0 : _b.length) {
            obj.args = message.args.map((e) => base64FromBytes(e));
        }
        return obj;
    },
    create(base) {
        return exports.QueryViewRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseQueryViewRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        message.moduleName = (_b = object.moduleName) !== null && _b !== void 0 ? _b : "";
        message.functionName = (_c = object.functionName) !== null && _c !== void 0 ? _c : "";
        message.typeArgs = ((_d = object.typeArgs) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        message.args = ((_e = object.args) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        return message;
    },
};
function createBaseQueryViewResponse() {
    return { data: "", events: [], gasUsed: long_1.default.UZERO };
}
exports.QueryViewResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.data !== "") {
            writer.uint32(10).string(message.data);
        }
        for (const v of message.events) {
            exports.VMEvent.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (!message.gasUsed.isZero()) {
            writer.uint32(24).uint64(message.gasUsed);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryViewResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.data = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.events.push(exports.VMEvent.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.gasUsed = reader.uint64();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            data: isSet(object.data) ? globalThis.String(object.data) : "",
            events: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.events)
                ? object.events.map((e) => exports.VMEvent.fromJSON(e))
                : [],
            gasUsed: isSet(object.gasUsed) ? long_1.default.fromValue(object.gasUsed) : long_1.default.UZERO,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.data !== "") {
            obj.data = message.data;
        }
        if ((_a = message.events) === null || _a === void 0 ? void 0 : _a.length) {
            obj.events = message.events.map((e) => exports.VMEvent.toJSON(e));
        }
        if (!message.gasUsed.isZero()) {
            obj.gasUsed = (message.gasUsed || long_1.default.UZERO).toString();
        }
        return obj;
    },
    create(base) {
        return exports.QueryViewResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryViewResponse();
        message.data = (_a = object.data) !== null && _a !== void 0 ? _a : "";
        message.events = ((_b = object.events) === null || _b === void 0 ? void 0 : _b.map((e) => exports.VMEvent.fromPartial(e))) || [];
        message.gasUsed =
            object.gasUsed !== undefined && object.gasUsed !== null ? long_1.default.fromValue(object.gasUsed) : long_1.default.UZERO;
        return message;
    },
};
function createBaseQueryViewBatchRequest() {
    return { requests: [] };
}
exports.QueryViewBatchRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.requests) {
            exports.QueryViewRequest.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryViewBatchRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.requests.push(exports.QueryViewRequest.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            requests: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.requests)
                ? object.requests.map((e) => exports.QueryViewRequest.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.requests) === null || _a === void 0 ? void 0 : _a.length) {
            obj.requests = message.requests.map((e) => exports.QueryViewRequest.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.QueryViewBatchRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryViewBatchRequest();
        message.requests = ((_a = object.requests) === null || _a === void 0 ? void 0 : _a.map((e) => exports.QueryViewRequest.fromPartial(e))) || [];
        return message;
    },
};
function createBaseQueryViewBatchResponse() {
    return { responses: [] };
}
exports.QueryViewBatchResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.responses) {
            exports.QueryViewResponse.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryViewBatchResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.responses.push(exports.QueryViewResponse.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            responses: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.responses)
                ? object.responses.map((e) => exports.QueryViewResponse.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.responses) === null || _a === void 0 ? void 0 : _a.length) {
            obj.responses = message.responses.map((e) => exports.QueryViewResponse.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.QueryViewBatchResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryViewBatchResponse();
        message.responses = ((_a = object.responses) === null || _a === void 0 ? void 0 : _a.map((e) => exports.QueryViewResponse.fromPartial(e))) || [];
        return message;
    },
};
function createBaseQueryViewJSONRequest() {
    return { address: "", moduleName: "", functionName: "", typeArgs: [], args: [] };
}
exports.QueryViewJSONRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.moduleName !== "") {
            writer.uint32(18).string(message.moduleName);
        }
        if (message.functionName !== "") {
            writer.uint32(26).string(message.functionName);
        }
        for (const v of message.typeArgs) {
            writer.uint32(34).string(v);
        }
        for (const v of message.args) {
            writer.uint32(42).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryViewJSONRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.moduleName = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.functionName = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.typeArgs.push(reader.string());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.args.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            moduleName: isSet(object.moduleName) ? globalThis.String(object.moduleName) : "",
            functionName: isSet(object.functionName) ? globalThis.String(object.functionName) : "",
            typeArgs: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.typeArgs)
                ? object.typeArgs.map((e) => globalThis.String(e))
                : [],
            args: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.args) ? object.args.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.moduleName !== "") {
            obj.moduleName = message.moduleName;
        }
        if (message.functionName !== "") {
            obj.functionName = message.functionName;
        }
        if ((_a = message.typeArgs) === null || _a === void 0 ? void 0 : _a.length) {
            obj.typeArgs = message.typeArgs;
        }
        if ((_b = message.args) === null || _b === void 0 ? void 0 : _b.length) {
            obj.args = message.args;
        }
        return obj;
    },
    create(base) {
        return exports.QueryViewJSONRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseQueryViewJSONRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        message.moduleName = (_b = object.moduleName) !== null && _b !== void 0 ? _b : "";
        message.functionName = (_c = object.functionName) !== null && _c !== void 0 ? _c : "";
        message.typeArgs = ((_d = object.typeArgs) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        message.args = ((_e = object.args) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        return message;
    },
};
function createBaseQueryViewJSONResponse() {
    return { data: "", events: [], gasUsed: long_1.default.UZERO };
}
exports.QueryViewJSONResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.data !== "") {
            writer.uint32(10).string(message.data);
        }
        for (const v of message.events) {
            exports.VMEvent.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (!message.gasUsed.isZero()) {
            writer.uint32(24).uint64(message.gasUsed);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryViewJSONResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.data = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.events.push(exports.VMEvent.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.gasUsed = reader.uint64();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            data: isSet(object.data) ? globalThis.String(object.data) : "",
            events: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.events)
                ? object.events.map((e) => exports.VMEvent.fromJSON(e))
                : [],
            gasUsed: isSet(object.gasUsed) ? long_1.default.fromValue(object.gasUsed) : long_1.default.UZERO,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.data !== "") {
            obj.data = message.data;
        }
        if ((_a = message.events) === null || _a === void 0 ? void 0 : _a.length) {
            obj.events = message.events.map((e) => exports.VMEvent.toJSON(e));
        }
        if (!message.gasUsed.isZero()) {
            obj.gasUsed = (message.gasUsed || long_1.default.UZERO).toString();
        }
        return obj;
    },
    create(base) {
        return exports.QueryViewJSONResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryViewJSONResponse();
        message.data = (_a = object.data) !== null && _a !== void 0 ? _a : "";
        message.events = ((_b = object.events) === null || _b === void 0 ? void 0 : _b.map((e) => exports.VMEvent.fromPartial(e))) || [];
        message.gasUsed =
            object.gasUsed !== undefined && object.gasUsed !== null ? long_1.default.fromValue(object.gasUsed) : long_1.default.UZERO;
        return message;
    },
};
function createBaseQueryViewJSONBatchRequest() {
    return { requests: [] };
}
exports.QueryViewJSONBatchRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.requests) {
            exports.QueryViewJSONRequest.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryViewJSONBatchRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.requests.push(exports.QueryViewJSONRequest.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            requests: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.requests)
                ? object.requests.map((e) => exports.QueryViewJSONRequest.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.requests) === null || _a === void 0 ? void 0 : _a.length) {
            obj.requests = message.requests.map((e) => exports.QueryViewJSONRequest.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.QueryViewJSONBatchRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryViewJSONBatchRequest();
        message.requests = ((_a = object.requests) === null || _a === void 0 ? void 0 : _a.map((e) => exports.QueryViewJSONRequest.fromPartial(e))) || [];
        return message;
    },
};
function createBaseQueryViewJSONBatchResponse() {
    return { responses: [] };
}
exports.QueryViewJSONBatchResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.responses) {
            exports.QueryViewJSONResponse.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryViewJSONBatchResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.responses.push(exports.QueryViewJSONResponse.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            responses: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.responses)
                ? object.responses.map((e) => exports.QueryViewJSONResponse.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.responses) === null || _a === void 0 ? void 0 : _a.length) {
            obj.responses = message.responses.map((e) => exports.QueryViewJSONResponse.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.QueryViewJSONBatchResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryViewJSONBatchResponse();
        message.responses = ((_a = object.responses) === null || _a === void 0 ? void 0 : _a.map((e) => exports.QueryViewJSONResponse.fromPartial(e))) || [];
        return message;
    },
};
function createBaseVMEvent() {
    return { typeTag: "", data: "" };
}
exports.VMEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.typeTag !== "") {
            writer.uint32(10).string(message.typeTag);
        }
        if (message.data !== "") {
            writer.uint32(18).string(message.data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVMEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.typeTag = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.data = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            typeTag: isSet(object.typeTag) ? globalThis.String(object.typeTag) : "",
            data: isSet(object.data) ? globalThis.String(object.data) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.typeTag !== "") {
            obj.typeTag = message.typeTag;
        }
        if (message.data !== "") {
            obj.data = message.data;
        }
        return obj;
    },
    create(base) {
        return exports.VMEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseVMEvent();
        message.typeTag = (_a = object.typeTag) !== null && _a !== void 0 ? _a : "";
        message.data = (_b = object.data) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryScriptABIRequest() {
    return { codeBytes: new Uint8Array(0) };
}
exports.QueryScriptABIRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.codeBytes.length !== 0) {
            writer.uint32(10).bytes(message.codeBytes);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryScriptABIRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.codeBytes = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { codeBytes: isSet(object.codeBytes) ? bytesFromBase64(object.codeBytes) : new Uint8Array(0) };
    },
    toJSON(message) {
        const obj = {};
        if (message.codeBytes.length !== 0) {
            obj.codeBytes = base64FromBytes(message.codeBytes);
        }
        return obj;
    },
    create(base) {
        return exports.QueryScriptABIRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryScriptABIRequest();
        message.codeBytes = (_a = object.codeBytes) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        return message;
    },
};
function createBaseQueryScriptABIResponse() {
    return { abi: new Uint8Array(0) };
}
exports.QueryScriptABIResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.abi.length !== 0) {
            writer.uint32(10).bytes(message.abi);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryScriptABIResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.abi = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { abi: isSet(object.abi) ? bytesFromBase64(object.abi) : new Uint8Array(0) };
    },
    toJSON(message) {
        const obj = {};
        if (message.abi.length !== 0) {
            obj.abi = base64FromBytes(message.abi);
        }
        return obj;
    },
    create(base) {
        return exports.QueryScriptABIResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryScriptABIResponse();
        message.abi = (_a = object.abi) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        return message;
    },
};
function createBaseQueryParamsRequest() {
    return {};
}
exports.QueryParamsRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryParamsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
};
function createBaseQueryParamsResponse() {
    return { params: undefined };
}
exports.QueryParamsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.params !== undefined) {
            types_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.params = types_1.Params.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { params: isSet(object.params) ? types_1.Params.fromJSON(object.params) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.params !== undefined) {
            obj.params = types_1.Params.toJSON(message.params);
        }
        return obj;
    },
    create(base) {
        return exports.QueryParamsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params =
            object.params !== undefined && object.params !== null ? types_1.Params.fromPartial(object.params) : undefined;
        return message;
    },
};
function createBaseQueryMetadataRequest() {
    return { denom: "" };
}
exports.QueryMetadataRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryMetadataRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { denom: isSet(object.denom) ? globalThis.String(object.denom) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        return obj;
    },
    create(base) {
        return exports.QueryMetadataRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryMetadataRequest();
        message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryMetadataResponse() {
    return { metadata: "" };
}
exports.QueryMetadataResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.metadata !== "") {
            writer.uint32(10).string(message.metadata);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryMetadataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.metadata = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.metadata !== "") {
            obj.metadata = message.metadata;
        }
        return obj;
    },
    create(base) {
        return exports.QueryMetadataResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryMetadataResponse();
        message.metadata = (_a = object.metadata) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryDenomRequest() {
    return { metadata: "" };
}
exports.QueryDenomRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.metadata !== "") {
            writer.uint32(10).string(message.metadata);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryDenomRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.metadata = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.metadata !== "") {
            obj.metadata = message.metadata;
        }
        return obj;
    },
    create(base) {
        return exports.QueryDenomRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryDenomRequest();
        message.metadata = (_a = object.metadata) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryDenomResponse() {
    return { denom: "" };
}
exports.QueryDenomResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryDenomResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { denom: isSet(object.denom) ? globalThis.String(object.denom) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        return obj;
    },
    create(base) {
        return exports.QueryDenomResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryDenomResponse();
        message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
class QueryClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.Module = this.Module.bind(this);
        this.Modules = this.Modules.bind(this);
        this.Resource = this.Resource.bind(this);
        this.Resources = this.Resources.bind(this);
        this.TableInfo = this.TableInfo.bind(this);
        this.TableEntry = this.TableEntry.bind(this);
        this.TableEntries = this.TableEntries.bind(this);
        this.LegacyView = this.LegacyView.bind(this);
        this.View = this.View.bind(this);
        this.ViewBatch = this.ViewBatch.bind(this);
        this.ViewJSON = this.ViewJSON.bind(this);
        this.ViewJSONBatch = this.ViewJSONBatch.bind(this);
        this.ScriptABI = this.ScriptABI.bind(this);
        this.Params = this.Params.bind(this);
        this.Metadata = this.Metadata.bind(this);
        this.Denom = this.Denom.bind(this);
    }
    Module(request, metadata) {
        return this.rpc.unary(exports.QueryModuleDesc, exports.QueryModuleRequest.fromPartial(request), metadata);
    }
    Modules(request, metadata) {
        return this.rpc.unary(exports.QueryModulesDesc, exports.QueryModulesRequest.fromPartial(request), metadata);
    }
    Resource(request, metadata) {
        return this.rpc.unary(exports.QueryResourceDesc, exports.QueryResourceRequest.fromPartial(request), metadata);
    }
    Resources(request, metadata) {
        return this.rpc.unary(exports.QueryResourcesDesc, exports.QueryResourcesRequest.fromPartial(request), metadata);
    }
    TableInfo(request, metadata) {
        return this.rpc.unary(exports.QueryTableInfoDesc, exports.QueryTableInfoRequest.fromPartial(request), metadata);
    }
    TableEntry(request, metadata) {
        return this.rpc.unary(exports.QueryTableEntryDesc, exports.QueryTableEntryRequest.fromPartial(request), metadata);
    }
    TableEntries(request, metadata) {
        return this.rpc.unary(exports.QueryTableEntriesDesc, exports.QueryTableEntriesRequest.fromPartial(request), metadata);
    }
    LegacyView(request, metadata) {
        return this.rpc.unary(exports.QueryLegacyViewDesc, exports.QueryLegacyViewRequest.fromPartial(request), metadata);
    }
    View(request, metadata) {
        return this.rpc.unary(exports.QueryViewDesc, exports.QueryViewRequest.fromPartial(request), metadata);
    }
    ViewBatch(request, metadata) {
        return this.rpc.unary(exports.QueryViewBatchDesc, exports.QueryViewBatchRequest.fromPartial(request), metadata);
    }
    ViewJSON(request, metadata) {
        return this.rpc.unary(exports.QueryViewJSONDesc, exports.QueryViewJSONRequest.fromPartial(request), metadata);
    }
    ViewJSONBatch(request, metadata) {
        return this.rpc.unary(exports.QueryViewJSONBatchDesc, exports.QueryViewJSONBatchRequest.fromPartial(request), metadata);
    }
    ScriptABI(request, metadata) {
        return this.rpc.unary(exports.QueryScriptABIDesc, exports.QueryScriptABIRequest.fromPartial(request), metadata);
    }
    Params(request, metadata) {
        return this.rpc.unary(exports.QueryParamsDesc, exports.QueryParamsRequest.fromPartial(request), metadata);
    }
    Metadata(request, metadata) {
        return this.rpc.unary(exports.QueryMetadataDesc, exports.QueryMetadataRequest.fromPartial(request), metadata);
    }
    Denom(request, metadata) {
        return this.rpc.unary(exports.QueryDenomDesc, exports.QueryDenomRequest.fromPartial(request), metadata);
    }
}
exports.QueryClientImpl = QueryClientImpl;
exports.QueryDesc = { serviceName: "initia.move.v1.Query" };
exports.QueryModuleDesc = {
    methodName: "Module",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryModuleRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryModuleResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.QueryModulesDesc = {
    methodName: "Modules",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryModulesRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryModulesResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.QueryResourceDesc = {
    methodName: "Resource",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryResourceRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryResourceResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.QueryResourcesDesc = {
    methodName: "Resources",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryResourcesRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryResourcesResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.QueryTableInfoDesc = {
    methodName: "TableInfo",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryTableInfoRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryTableInfoResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.QueryTableEntryDesc = {
    methodName: "TableEntry",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryTableEntryRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryTableEntryResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.QueryTableEntriesDesc = {
    methodName: "TableEntries",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryTableEntriesRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryTableEntriesResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.QueryLegacyViewDesc = {
    methodName: "LegacyView",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryLegacyViewRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryLegacyViewResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.QueryViewDesc = {
    methodName: "View",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryViewRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryViewResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.QueryViewBatchDesc = {
    methodName: "ViewBatch",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryViewBatchRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryViewBatchResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.QueryViewJSONDesc = {
    methodName: "ViewJSON",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryViewJSONRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryViewJSONResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.QueryViewJSONBatchDesc = {
    methodName: "ViewJSONBatch",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryViewJSONBatchRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryViewJSONBatchResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.QueryScriptABIDesc = {
    methodName: "ScriptABI",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryScriptABIRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryScriptABIResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.QueryParamsDesc = {
    methodName: "Params",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryParamsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryParamsResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.QueryMetadataDesc = {
    methodName: "Metadata",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryMetadataRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryMetadataResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.QueryDenomDesc = {
    methodName: "Denom",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryDenomRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryDenomResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        var _a;
        const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_1.BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap))
            : metadata !== null && metadata !== void 0 ? metadata : this.options.metadata;
        return new Promise((resolve, reject) => {
            var _a;
            grpc_web_1.grpc.unary(methodDesc, Object.assign(Object.assign({ request, host: this.host, metadata: maybeCombinedMetadata !== null && maybeCombinedMetadata !== void 0 ? maybeCombinedMetadata : {} }, (this.options.transport !== undefined ? { transport: this.options.transport } : {})), { debug: (_a = this.options.debug) !== null && _a !== void 0 ? _a : false, onEnd: function (response) {
                    if (response.status === grpc_web_1.grpc.Code.OK) {
                        resolve(response.message.toObject());
                    }
                    else {
                        const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
                        reject(err);
                    }
                } }));
        });
    }
}
exports.GrpcWebImpl = GrpcWebImpl;
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
class GrpcWebError extends globalThis.Error {
    constructor(message, code, metadata) {
        super(message);
        this.code = code;
        this.metadata = metadata;
    }
}
exports.GrpcWebError = GrpcWebError;
//# sourceMappingURL=query.js.map