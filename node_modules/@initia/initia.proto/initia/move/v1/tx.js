"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcWebError = exports.GrpcWebImpl = exports.MsgUpdateParamsDesc = exports.MsgDelistDesc = exports.MsgWhitelistDesc = exports.MsgGovScriptJSONDesc = exports.MsgGovScriptDesc = exports.MsgGovExecuteJSONDesc = exports.MsgGovExecuteDesc = exports.MsgGovPublishDesc = exports.MsgScriptJSONDesc = exports.MsgScriptDesc = exports.MsgExecuteJSONDesc = exports.MsgExecuteDesc = exports.MsgPublishDesc = exports.MsgDesc = exports.MsgClientImpl = exports.MsgUpdateParamsResponse = exports.MsgUpdateParams = exports.MsgDelistResponse = exports.MsgDelist = exports.MsgWhitelistResponse = exports.MsgWhitelist = exports.MsgGovScriptJSONResponse = exports.MsgGovScriptJSON = exports.MsgGovScriptResponse = exports.MsgGovScript = exports.MsgGovExecuteJSONResponse = exports.MsgGovExecuteJSON = exports.MsgGovExecuteResponse = exports.MsgGovExecute = exports.MsgGovPublishResponse = exports.MsgGovPublish = exports.MsgScriptJSONResponse = exports.MsgScriptJSON = exports.MsgScriptResponse = exports.MsgScript = exports.MsgExecuteJSONResponse = exports.MsgExecuteJSON = exports.MsgExecuteResponse = exports.MsgExecute = exports.MsgPublishResponse = exports.MsgPublish = exports.protobufPackage = void 0;
/* eslint-disable */
const grpc_web_1 = require("@improbable-eng/grpc-web");
const browser_headers_1 = require("browser-headers");
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const types_1 = require("./types");
exports.protobufPackage = "initia.move.v1";
function createBaseMsgPublish() {
    return { sender: "", codeBytes: [], upgradePolicy: 0 };
}
exports.MsgPublish = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        for (const v of message.codeBytes) {
            writer.uint32(18).bytes(v);
        }
        if (message.upgradePolicy !== 0) {
            writer.uint32(24).int32(message.upgradePolicy);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgPublish();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.codeBytes.push(reader.bytes());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.upgradePolicy = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            codeBytes: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.codeBytes)
                ? object.codeBytes.map((e) => bytesFromBase64(e))
                : [],
            upgradePolicy: isSet(object.upgradePolicy) ? (0, types_1.upgradePolicyFromJSON)(object.upgradePolicy) : 0,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if ((_a = message.codeBytes) === null || _a === void 0 ? void 0 : _a.length) {
            obj.codeBytes = message.codeBytes.map((e) => base64FromBytes(e));
        }
        if (message.upgradePolicy !== 0) {
            obj.upgradePolicy = (0, types_1.upgradePolicyToJSON)(message.upgradePolicy);
        }
        return obj;
    },
    create(base) {
        return exports.MsgPublish.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseMsgPublish();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.codeBytes = ((_b = object.codeBytes) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.upgradePolicy = (_c = object.upgradePolicy) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function createBaseMsgPublishResponse() {
    return {};
}
exports.MsgPublishResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgPublishResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgPublishResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgPublishResponse();
        return message;
    },
};
function createBaseMsgExecute() {
    return { sender: "", moduleAddress: "", moduleName: "", functionName: "", typeArgs: [], args: [] };
}
exports.MsgExecute = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.moduleAddress !== "") {
            writer.uint32(18).string(message.moduleAddress);
        }
        if (message.moduleName !== "") {
            writer.uint32(26).string(message.moduleName);
        }
        if (message.functionName !== "") {
            writer.uint32(34).string(message.functionName);
        }
        for (const v of message.typeArgs) {
            writer.uint32(42).string(v);
        }
        for (const v of message.args) {
            writer.uint32(50).bytes(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgExecute();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.moduleAddress = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.moduleName = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.functionName = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.typeArgs.push(reader.string());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.args.push(reader.bytes());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            moduleAddress: isSet(object.moduleAddress) ? globalThis.String(object.moduleAddress) : "",
            moduleName: isSet(object.moduleName) ? globalThis.String(object.moduleName) : "",
            functionName: isSet(object.functionName) ? globalThis.String(object.functionName) : "",
            typeArgs: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.typeArgs)
                ? object.typeArgs.map((e) => globalThis.String(e))
                : [],
            args: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.args) ? object.args.map((e) => bytesFromBase64(e)) : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.moduleAddress !== "") {
            obj.moduleAddress = message.moduleAddress;
        }
        if (message.moduleName !== "") {
            obj.moduleName = message.moduleName;
        }
        if (message.functionName !== "") {
            obj.functionName = message.functionName;
        }
        if ((_a = message.typeArgs) === null || _a === void 0 ? void 0 : _a.length) {
            obj.typeArgs = message.typeArgs;
        }
        if ((_b = message.args) === null || _b === void 0 ? void 0 : _b.length) {
            obj.args = message.args.map((e) => base64FromBytes(e));
        }
        return obj;
    },
    create(base) {
        return exports.MsgExecute.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseMsgExecute();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.moduleAddress = (_b = object.moduleAddress) !== null && _b !== void 0 ? _b : "";
        message.moduleName = (_c = object.moduleName) !== null && _c !== void 0 ? _c : "";
        message.functionName = (_d = object.functionName) !== null && _d !== void 0 ? _d : "";
        message.typeArgs = ((_e = object.typeArgs) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        message.args = ((_f = object.args) === null || _f === void 0 ? void 0 : _f.map((e) => e)) || [];
        return message;
    },
};
function createBaseMsgExecuteResponse() {
    return {};
}
exports.MsgExecuteResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgExecuteResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgExecuteResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgExecuteResponse();
        return message;
    },
};
function createBaseMsgExecuteJSON() {
    return { sender: "", moduleAddress: "", moduleName: "", functionName: "", typeArgs: [], args: [] };
}
exports.MsgExecuteJSON = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.moduleAddress !== "") {
            writer.uint32(18).string(message.moduleAddress);
        }
        if (message.moduleName !== "") {
            writer.uint32(26).string(message.moduleName);
        }
        if (message.functionName !== "") {
            writer.uint32(34).string(message.functionName);
        }
        for (const v of message.typeArgs) {
            writer.uint32(42).string(v);
        }
        for (const v of message.args) {
            writer.uint32(50).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgExecuteJSON();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.moduleAddress = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.moduleName = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.functionName = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.typeArgs.push(reader.string());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.args.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            moduleAddress: isSet(object.moduleAddress) ? globalThis.String(object.moduleAddress) : "",
            moduleName: isSet(object.moduleName) ? globalThis.String(object.moduleName) : "",
            functionName: isSet(object.functionName) ? globalThis.String(object.functionName) : "",
            typeArgs: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.typeArgs)
                ? object.typeArgs.map((e) => globalThis.String(e))
                : [],
            args: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.args) ? object.args.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.moduleAddress !== "") {
            obj.moduleAddress = message.moduleAddress;
        }
        if (message.moduleName !== "") {
            obj.moduleName = message.moduleName;
        }
        if (message.functionName !== "") {
            obj.functionName = message.functionName;
        }
        if ((_a = message.typeArgs) === null || _a === void 0 ? void 0 : _a.length) {
            obj.typeArgs = message.typeArgs;
        }
        if ((_b = message.args) === null || _b === void 0 ? void 0 : _b.length) {
            obj.args = message.args;
        }
        return obj;
    },
    create(base) {
        return exports.MsgExecuteJSON.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseMsgExecuteJSON();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.moduleAddress = (_b = object.moduleAddress) !== null && _b !== void 0 ? _b : "";
        message.moduleName = (_c = object.moduleName) !== null && _c !== void 0 ? _c : "";
        message.functionName = (_d = object.functionName) !== null && _d !== void 0 ? _d : "";
        message.typeArgs = ((_e = object.typeArgs) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        message.args = ((_f = object.args) === null || _f === void 0 ? void 0 : _f.map((e) => e)) || [];
        return message;
    },
};
function createBaseMsgExecuteJSONResponse() {
    return {};
}
exports.MsgExecuteJSONResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgExecuteJSONResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgExecuteJSONResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgExecuteJSONResponse();
        return message;
    },
};
function createBaseMsgScript() {
    return { sender: "", codeBytes: new Uint8Array(0), typeArgs: [], args: [] };
}
exports.MsgScript = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.codeBytes.length !== 0) {
            writer.uint32(18).bytes(message.codeBytes);
        }
        for (const v of message.typeArgs) {
            writer.uint32(26).string(v);
        }
        for (const v of message.args) {
            writer.uint32(34).bytes(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgScript();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.codeBytes = reader.bytes();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.typeArgs.push(reader.string());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.args.push(reader.bytes());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            codeBytes: isSet(object.codeBytes) ? bytesFromBase64(object.codeBytes) : new Uint8Array(0),
            typeArgs: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.typeArgs)
                ? object.typeArgs.map((e) => globalThis.String(e))
                : [],
            args: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.args) ? object.args.map((e) => bytesFromBase64(e)) : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.codeBytes.length !== 0) {
            obj.codeBytes = base64FromBytes(message.codeBytes);
        }
        if ((_a = message.typeArgs) === null || _a === void 0 ? void 0 : _a.length) {
            obj.typeArgs = message.typeArgs;
        }
        if ((_b = message.args) === null || _b === void 0 ? void 0 : _b.length) {
            obj.args = message.args.map((e) => base64FromBytes(e));
        }
        return obj;
    },
    create(base) {
        return exports.MsgScript.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseMsgScript();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.codeBytes = (_b = object.codeBytes) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        message.typeArgs = ((_c = object.typeArgs) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.args = ((_d = object.args) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        return message;
    },
};
function createBaseMsgScriptResponse() {
    return {};
}
exports.MsgScriptResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgScriptResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgScriptResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgScriptResponse();
        return message;
    },
};
function createBaseMsgScriptJSON() {
    return { sender: "", codeBytes: new Uint8Array(0), typeArgs: [], args: [] };
}
exports.MsgScriptJSON = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.codeBytes.length !== 0) {
            writer.uint32(18).bytes(message.codeBytes);
        }
        for (const v of message.typeArgs) {
            writer.uint32(26).string(v);
        }
        for (const v of message.args) {
            writer.uint32(34).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgScriptJSON();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.codeBytes = reader.bytes();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.typeArgs.push(reader.string());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.args.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            codeBytes: isSet(object.codeBytes) ? bytesFromBase64(object.codeBytes) : new Uint8Array(0),
            typeArgs: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.typeArgs)
                ? object.typeArgs.map((e) => globalThis.String(e))
                : [],
            args: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.args) ? object.args.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.codeBytes.length !== 0) {
            obj.codeBytes = base64FromBytes(message.codeBytes);
        }
        if ((_a = message.typeArgs) === null || _a === void 0 ? void 0 : _a.length) {
            obj.typeArgs = message.typeArgs;
        }
        if ((_b = message.args) === null || _b === void 0 ? void 0 : _b.length) {
            obj.args = message.args;
        }
        return obj;
    },
    create(base) {
        return exports.MsgScriptJSON.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseMsgScriptJSON();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.codeBytes = (_b = object.codeBytes) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        message.typeArgs = ((_c = object.typeArgs) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.args = ((_d = object.args) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        return message;
    },
};
function createBaseMsgScriptJSONResponse() {
    return {};
}
exports.MsgScriptJSONResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgScriptJSONResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgScriptJSONResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgScriptJSONResponse();
        return message;
    },
};
function createBaseMsgGovPublish() {
    return { authority: "", sender: "", codeBytes: [], upgradePolicy: 0 };
}
exports.MsgGovPublish = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.sender !== "") {
            writer.uint32(18).string(message.sender);
        }
        for (const v of message.codeBytes) {
            writer.uint32(26).bytes(v);
        }
        if (message.upgradePolicy !== 0) {
            writer.uint32(32).int32(message.upgradePolicy);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgGovPublish();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.codeBytes.push(reader.bytes());
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.upgradePolicy = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            codeBytes: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.codeBytes)
                ? object.codeBytes.map((e) => bytesFromBase64(e))
                : [],
            upgradePolicy: isSet(object.upgradePolicy) ? (0, types_1.upgradePolicyFromJSON)(object.upgradePolicy) : 0,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if ((_a = message.codeBytes) === null || _a === void 0 ? void 0 : _a.length) {
            obj.codeBytes = message.codeBytes.map((e) => base64FromBytes(e));
        }
        if (message.upgradePolicy !== 0) {
            obj.upgradePolicy = (0, types_1.upgradePolicyToJSON)(message.upgradePolicy);
        }
        return obj;
    },
    create(base) {
        return exports.MsgGovPublish.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseMsgGovPublish();
        message.authority = (_a = object.authority) !== null && _a !== void 0 ? _a : "";
        message.sender = (_b = object.sender) !== null && _b !== void 0 ? _b : "";
        message.codeBytes = ((_c = object.codeBytes) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.upgradePolicy = (_d = object.upgradePolicy) !== null && _d !== void 0 ? _d : 0;
        return message;
    },
};
function createBaseMsgGovPublishResponse() {
    return {};
}
exports.MsgGovPublishResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgGovPublishResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgGovPublishResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgGovPublishResponse();
        return message;
    },
};
function createBaseMsgGovExecute() {
    return {
        authority: "",
        sender: "",
        moduleAddress: "",
        moduleName: "",
        functionName: "",
        typeArgs: [],
        args: [],
    };
}
exports.MsgGovExecute = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.sender !== "") {
            writer.uint32(18).string(message.sender);
        }
        if (message.moduleAddress !== "") {
            writer.uint32(26).string(message.moduleAddress);
        }
        if (message.moduleName !== "") {
            writer.uint32(34).string(message.moduleName);
        }
        if (message.functionName !== "") {
            writer.uint32(42).string(message.functionName);
        }
        for (const v of message.typeArgs) {
            writer.uint32(50).string(v);
        }
        for (const v of message.args) {
            writer.uint32(58).bytes(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgGovExecute();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.moduleAddress = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.moduleName = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.functionName = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.typeArgs.push(reader.string());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.args.push(reader.bytes());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            moduleAddress: isSet(object.moduleAddress) ? globalThis.String(object.moduleAddress) : "",
            moduleName: isSet(object.moduleName) ? globalThis.String(object.moduleName) : "",
            functionName: isSet(object.functionName) ? globalThis.String(object.functionName) : "",
            typeArgs: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.typeArgs)
                ? object.typeArgs.map((e) => globalThis.String(e))
                : [],
            args: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.args) ? object.args.map((e) => bytesFromBase64(e)) : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.moduleAddress !== "") {
            obj.moduleAddress = message.moduleAddress;
        }
        if (message.moduleName !== "") {
            obj.moduleName = message.moduleName;
        }
        if (message.functionName !== "") {
            obj.functionName = message.functionName;
        }
        if ((_a = message.typeArgs) === null || _a === void 0 ? void 0 : _a.length) {
            obj.typeArgs = message.typeArgs;
        }
        if ((_b = message.args) === null || _b === void 0 ? void 0 : _b.length) {
            obj.args = message.args.map((e) => base64FromBytes(e));
        }
        return obj;
    },
    create(base) {
        return exports.MsgGovExecute.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseMsgGovExecute();
        message.authority = (_a = object.authority) !== null && _a !== void 0 ? _a : "";
        message.sender = (_b = object.sender) !== null && _b !== void 0 ? _b : "";
        message.moduleAddress = (_c = object.moduleAddress) !== null && _c !== void 0 ? _c : "";
        message.moduleName = (_d = object.moduleName) !== null && _d !== void 0 ? _d : "";
        message.functionName = (_e = object.functionName) !== null && _e !== void 0 ? _e : "";
        message.typeArgs = ((_f = object.typeArgs) === null || _f === void 0 ? void 0 : _f.map((e) => e)) || [];
        message.args = ((_g = object.args) === null || _g === void 0 ? void 0 : _g.map((e) => e)) || [];
        return message;
    },
};
function createBaseMsgGovExecuteResponse() {
    return {};
}
exports.MsgGovExecuteResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgGovExecuteResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgGovExecuteResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgGovExecuteResponse();
        return message;
    },
};
function createBaseMsgGovExecuteJSON() {
    return {
        authority: "",
        sender: "",
        moduleAddress: "",
        moduleName: "",
        functionName: "",
        typeArgs: [],
        args: [],
    };
}
exports.MsgGovExecuteJSON = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.sender !== "") {
            writer.uint32(18).string(message.sender);
        }
        if (message.moduleAddress !== "") {
            writer.uint32(26).string(message.moduleAddress);
        }
        if (message.moduleName !== "") {
            writer.uint32(34).string(message.moduleName);
        }
        if (message.functionName !== "") {
            writer.uint32(42).string(message.functionName);
        }
        for (const v of message.typeArgs) {
            writer.uint32(50).string(v);
        }
        for (const v of message.args) {
            writer.uint32(58).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgGovExecuteJSON();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.moduleAddress = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.moduleName = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.functionName = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.typeArgs.push(reader.string());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.args.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            moduleAddress: isSet(object.moduleAddress) ? globalThis.String(object.moduleAddress) : "",
            moduleName: isSet(object.moduleName) ? globalThis.String(object.moduleName) : "",
            functionName: isSet(object.functionName) ? globalThis.String(object.functionName) : "",
            typeArgs: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.typeArgs)
                ? object.typeArgs.map((e) => globalThis.String(e))
                : [],
            args: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.args) ? object.args.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.moduleAddress !== "") {
            obj.moduleAddress = message.moduleAddress;
        }
        if (message.moduleName !== "") {
            obj.moduleName = message.moduleName;
        }
        if (message.functionName !== "") {
            obj.functionName = message.functionName;
        }
        if ((_a = message.typeArgs) === null || _a === void 0 ? void 0 : _a.length) {
            obj.typeArgs = message.typeArgs;
        }
        if ((_b = message.args) === null || _b === void 0 ? void 0 : _b.length) {
            obj.args = message.args;
        }
        return obj;
    },
    create(base) {
        return exports.MsgGovExecuteJSON.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseMsgGovExecuteJSON();
        message.authority = (_a = object.authority) !== null && _a !== void 0 ? _a : "";
        message.sender = (_b = object.sender) !== null && _b !== void 0 ? _b : "";
        message.moduleAddress = (_c = object.moduleAddress) !== null && _c !== void 0 ? _c : "";
        message.moduleName = (_d = object.moduleName) !== null && _d !== void 0 ? _d : "";
        message.functionName = (_e = object.functionName) !== null && _e !== void 0 ? _e : "";
        message.typeArgs = ((_f = object.typeArgs) === null || _f === void 0 ? void 0 : _f.map((e) => e)) || [];
        message.args = ((_g = object.args) === null || _g === void 0 ? void 0 : _g.map((e) => e)) || [];
        return message;
    },
};
function createBaseMsgGovExecuteJSONResponse() {
    return {};
}
exports.MsgGovExecuteJSONResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgGovExecuteJSONResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgGovExecuteJSONResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgGovExecuteJSONResponse();
        return message;
    },
};
function createBaseMsgGovScript() {
    return { authority: "", sender: "", codeBytes: new Uint8Array(0), typeArgs: [], args: [] };
}
exports.MsgGovScript = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.sender !== "") {
            writer.uint32(18).string(message.sender);
        }
        if (message.codeBytes.length !== 0) {
            writer.uint32(26).bytes(message.codeBytes);
        }
        for (const v of message.typeArgs) {
            writer.uint32(34).string(v);
        }
        for (const v of message.args) {
            writer.uint32(42).bytes(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgGovScript();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.codeBytes = reader.bytes();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.typeArgs.push(reader.string());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.args.push(reader.bytes());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            codeBytes: isSet(object.codeBytes) ? bytesFromBase64(object.codeBytes) : new Uint8Array(0),
            typeArgs: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.typeArgs)
                ? object.typeArgs.map((e) => globalThis.String(e))
                : [],
            args: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.args) ? object.args.map((e) => bytesFromBase64(e)) : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.codeBytes.length !== 0) {
            obj.codeBytes = base64FromBytes(message.codeBytes);
        }
        if ((_a = message.typeArgs) === null || _a === void 0 ? void 0 : _a.length) {
            obj.typeArgs = message.typeArgs;
        }
        if ((_b = message.args) === null || _b === void 0 ? void 0 : _b.length) {
            obj.args = message.args.map((e) => base64FromBytes(e));
        }
        return obj;
    },
    create(base) {
        return exports.MsgGovScript.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseMsgGovScript();
        message.authority = (_a = object.authority) !== null && _a !== void 0 ? _a : "";
        message.sender = (_b = object.sender) !== null && _b !== void 0 ? _b : "";
        message.codeBytes = (_c = object.codeBytes) !== null && _c !== void 0 ? _c : new Uint8Array(0);
        message.typeArgs = ((_d = object.typeArgs) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        message.args = ((_e = object.args) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        return message;
    },
};
function createBaseMsgGovScriptResponse() {
    return {};
}
exports.MsgGovScriptResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgGovScriptResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgGovScriptResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgGovScriptResponse();
        return message;
    },
};
function createBaseMsgGovScriptJSON() {
    return { authority: "", sender: "", codeBytes: new Uint8Array(0), typeArgs: [], args: [] };
}
exports.MsgGovScriptJSON = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.sender !== "") {
            writer.uint32(18).string(message.sender);
        }
        if (message.codeBytes.length !== 0) {
            writer.uint32(26).bytes(message.codeBytes);
        }
        for (const v of message.typeArgs) {
            writer.uint32(34).string(v);
        }
        for (const v of message.args) {
            writer.uint32(42).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgGovScriptJSON();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.codeBytes = reader.bytes();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.typeArgs.push(reader.string());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.args.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            codeBytes: isSet(object.codeBytes) ? bytesFromBase64(object.codeBytes) : new Uint8Array(0),
            typeArgs: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.typeArgs)
                ? object.typeArgs.map((e) => globalThis.String(e))
                : [],
            args: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.args) ? object.args.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.codeBytes.length !== 0) {
            obj.codeBytes = base64FromBytes(message.codeBytes);
        }
        if ((_a = message.typeArgs) === null || _a === void 0 ? void 0 : _a.length) {
            obj.typeArgs = message.typeArgs;
        }
        if ((_b = message.args) === null || _b === void 0 ? void 0 : _b.length) {
            obj.args = message.args;
        }
        return obj;
    },
    create(base) {
        return exports.MsgGovScriptJSON.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseMsgGovScriptJSON();
        message.authority = (_a = object.authority) !== null && _a !== void 0 ? _a : "";
        message.sender = (_b = object.sender) !== null && _b !== void 0 ? _b : "";
        message.codeBytes = (_c = object.codeBytes) !== null && _c !== void 0 ? _c : new Uint8Array(0);
        message.typeArgs = ((_d = object.typeArgs) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        message.args = ((_e = object.args) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        return message;
    },
};
function createBaseMsgGovScriptJSONResponse() {
    return {};
}
exports.MsgGovScriptJSONResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgGovScriptJSONResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgGovScriptJSONResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgGovScriptJSONResponse();
        return message;
    },
};
function createBaseMsgWhitelist() {
    return { authority: "", metadataLp: "", rewardWeight: "" };
}
exports.MsgWhitelist = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.metadataLp !== "") {
            writer.uint32(18).string(message.metadataLp);
        }
        if (message.rewardWeight !== "") {
            writer.uint32(26).string(message.rewardWeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgWhitelist();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.metadataLp = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.rewardWeight = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
            metadataLp: isSet(object.metadataLp) ? globalThis.String(object.metadataLp) : "",
            rewardWeight: isSet(object.rewardWeight) ? globalThis.String(object.rewardWeight) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.metadataLp !== "") {
            obj.metadataLp = message.metadataLp;
        }
        if (message.rewardWeight !== "") {
            obj.rewardWeight = message.rewardWeight;
        }
        return obj;
    },
    create(base) {
        return exports.MsgWhitelist.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseMsgWhitelist();
        message.authority = (_a = object.authority) !== null && _a !== void 0 ? _a : "";
        message.metadataLp = (_b = object.metadataLp) !== null && _b !== void 0 ? _b : "";
        message.rewardWeight = (_c = object.rewardWeight) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseMsgWhitelistResponse() {
    return {};
}
exports.MsgWhitelistResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgWhitelistResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgWhitelistResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgWhitelistResponse();
        return message;
    },
};
function createBaseMsgDelist() {
    return { authority: "", metadataLp: "" };
}
exports.MsgDelist = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.metadataLp !== "") {
            writer.uint32(18).string(message.metadataLp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDelist();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.metadataLp = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
            metadataLp: isSet(object.metadataLp) ? globalThis.String(object.metadataLp) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.metadataLp !== "") {
            obj.metadataLp = message.metadataLp;
        }
        return obj;
    },
    create(base) {
        return exports.MsgDelist.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgDelist();
        message.authority = (_a = object.authority) !== null && _a !== void 0 ? _a : "";
        message.metadataLp = (_b = object.metadataLp) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseMsgDelistResponse() {
    return {};
}
exports.MsgDelistResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDelistResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgDelistResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgDelistResponse();
        return message;
    },
};
function createBaseMsgUpdateParams() {
    return { authority: "", params: undefined };
}
exports.MsgUpdateParams = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.params !== undefined) {
            types_1.Params.encode(message.params, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.params = types_1.Params.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
            params: isSet(object.params) ? types_1.Params.fromJSON(object.params) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.params !== undefined) {
            obj.params = types_1.Params.toJSON(message.params);
        }
        return obj;
    },
    create(base) {
        return exports.MsgUpdateParams.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgUpdateParams();
        message.authority = (_a = object.authority) !== null && _a !== void 0 ? _a : "";
        message.params =
            object.params !== undefined && object.params !== null ? types_1.Params.fromPartial(object.params) : undefined;
        return message;
    },
};
function createBaseMsgUpdateParamsResponse() {
    return {};
}
exports.MsgUpdateParamsResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgUpdateParamsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgUpdateParamsResponse();
        return message;
    },
};
class MsgClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.Publish = this.Publish.bind(this);
        this.Execute = this.Execute.bind(this);
        this.ExecuteJSON = this.ExecuteJSON.bind(this);
        this.Script = this.Script.bind(this);
        this.ScriptJSON = this.ScriptJSON.bind(this);
        this.GovPublish = this.GovPublish.bind(this);
        this.GovExecute = this.GovExecute.bind(this);
        this.GovExecuteJSON = this.GovExecuteJSON.bind(this);
        this.GovScript = this.GovScript.bind(this);
        this.GovScriptJSON = this.GovScriptJSON.bind(this);
        this.Whitelist = this.Whitelist.bind(this);
        this.Delist = this.Delist.bind(this);
        this.UpdateParams = this.UpdateParams.bind(this);
    }
    Publish(request, metadata) {
        return this.rpc.unary(exports.MsgPublishDesc, exports.MsgPublish.fromPartial(request), metadata);
    }
    Execute(request, metadata) {
        return this.rpc.unary(exports.MsgExecuteDesc, exports.MsgExecute.fromPartial(request), metadata);
    }
    ExecuteJSON(request, metadata) {
        return this.rpc.unary(exports.MsgExecuteJSONDesc, exports.MsgExecuteJSON.fromPartial(request), metadata);
    }
    Script(request, metadata) {
        return this.rpc.unary(exports.MsgScriptDesc, exports.MsgScript.fromPartial(request), metadata);
    }
    ScriptJSON(request, metadata) {
        return this.rpc.unary(exports.MsgScriptJSONDesc, exports.MsgScriptJSON.fromPartial(request), metadata);
    }
    GovPublish(request, metadata) {
        return this.rpc.unary(exports.MsgGovPublishDesc, exports.MsgGovPublish.fromPartial(request), metadata);
    }
    GovExecute(request, metadata) {
        return this.rpc.unary(exports.MsgGovExecuteDesc, exports.MsgGovExecute.fromPartial(request), metadata);
    }
    GovExecuteJSON(request, metadata) {
        return this.rpc.unary(exports.MsgGovExecuteJSONDesc, exports.MsgGovExecuteJSON.fromPartial(request), metadata);
    }
    GovScript(request, metadata) {
        return this.rpc.unary(exports.MsgGovScriptDesc, exports.MsgGovScript.fromPartial(request), metadata);
    }
    GovScriptJSON(request, metadata) {
        return this.rpc.unary(exports.MsgGovScriptJSONDesc, exports.MsgGovScriptJSON.fromPartial(request), metadata);
    }
    Whitelist(request, metadata) {
        return this.rpc.unary(exports.MsgWhitelistDesc, exports.MsgWhitelist.fromPartial(request), metadata);
    }
    Delist(request, metadata) {
        return this.rpc.unary(exports.MsgDelistDesc, exports.MsgDelist.fromPartial(request), metadata);
    }
    UpdateParams(request, metadata) {
        return this.rpc.unary(exports.MsgUpdateParamsDesc, exports.MsgUpdateParams.fromPartial(request), metadata);
    }
}
exports.MsgClientImpl = MsgClientImpl;
exports.MsgDesc = { serviceName: "initia.move.v1.Msg" };
exports.MsgPublishDesc = {
    methodName: "Publish",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgPublish.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgPublishResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.MsgExecuteDesc = {
    methodName: "Execute",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgExecute.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgExecuteResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.MsgExecuteJSONDesc = {
    methodName: "ExecuteJSON",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgExecuteJSON.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgExecuteJSONResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.MsgScriptDesc = {
    methodName: "Script",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgScript.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgScriptResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.MsgScriptJSONDesc = {
    methodName: "ScriptJSON",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgScriptJSON.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgScriptJSONResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.MsgGovPublishDesc = {
    methodName: "GovPublish",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgGovPublish.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgGovPublishResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.MsgGovExecuteDesc = {
    methodName: "GovExecute",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgGovExecute.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgGovExecuteResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.MsgGovExecuteJSONDesc = {
    methodName: "GovExecuteJSON",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgGovExecuteJSON.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgGovExecuteJSONResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.MsgGovScriptDesc = {
    methodName: "GovScript",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgGovScript.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgGovScriptResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.MsgGovScriptJSONDesc = {
    methodName: "GovScriptJSON",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgGovScriptJSON.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgGovScriptJSONResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.MsgWhitelistDesc = {
    methodName: "Whitelist",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgWhitelist.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgWhitelistResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.MsgDelistDesc = {
    methodName: "Delist",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgDelist.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgDelistResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.MsgUpdateParamsDesc = {
    methodName: "UpdateParams",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgUpdateParams.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.MsgUpdateParamsResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        var _a;
        const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_1.BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap))
            : metadata !== null && metadata !== void 0 ? metadata : this.options.metadata;
        return new Promise((resolve, reject) => {
            var _a;
            grpc_web_1.grpc.unary(methodDesc, Object.assign(Object.assign({ request, host: this.host, metadata: maybeCombinedMetadata !== null && maybeCombinedMetadata !== void 0 ? maybeCombinedMetadata : {} }, (this.options.transport !== undefined ? { transport: this.options.transport } : {})), { debug: (_a = this.options.debug) !== null && _a !== void 0 ? _a : false, onEnd: function (response) {
                    if (response.status === grpc_web_1.grpc.Code.OK) {
                        resolve(response.message.toObject());
                    }
                    else {
                        const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
                        reject(err);
                    }
                } }));
        });
    }
}
exports.GrpcWebImpl = GrpcWebImpl;
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
class GrpcWebError extends globalThis.Error {
    constructor(message, code, metadata) {
        super(message);
        this.code = code;
        this.metadata = metadata;
    }
}
exports.GrpcWebError = GrpcWebError;
//# sourceMappingURL=tx.js.map