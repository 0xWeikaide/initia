"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenesisState = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const types_1 = require("./types");
exports.protobufPackage = "initia.move.v1";
function createBaseGenesisState() {
    return {
        params: undefined,
        executionCounter: long_1.default.UZERO,
        stdlibs: [],
        modules: [],
        resources: [],
        tableInfos: [],
        tableEntries: [],
        dexPairs: [],
    };
}
exports.GenesisState = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.params !== undefined) {
            types_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        if (!message.executionCounter.isZero()) {
            writer.uint32(16).uint64(message.executionCounter);
        }
        for (const v of message.stdlibs) {
            writer.uint32(26).bytes(v);
        }
        for (const v of message.modules) {
            types_1.Module.encode(v, writer.uint32(34).fork()).ldelim();
        }
        for (const v of message.resources) {
            types_1.Resource.encode(v, writer.uint32(42).fork()).ldelim();
        }
        for (const v of message.tableInfos) {
            types_1.TableInfo.encode(v, writer.uint32(50).fork()).ldelim();
        }
        for (const v of message.tableEntries) {
            types_1.TableEntry.encode(v, writer.uint32(58).fork()).ldelim();
        }
        for (const v of message.dexPairs) {
            types_1.DexPair.encode(v, writer.uint32(66).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.params = types_1.Params.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.executionCounter = reader.uint64();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.stdlibs.push(reader.bytes());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.modules.push(types_1.Module.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.resources.push(types_1.Resource.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.tableInfos.push(types_1.TableInfo.decode(reader, reader.uint32()));
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.tableEntries.push(types_1.TableEntry.decode(reader, reader.uint32()));
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.dexPairs.push(types_1.DexPair.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: isSet(object.params) ? types_1.Params.fromJSON(object.params) : undefined,
            executionCounter: isSet(object.executionCounter) ? long_1.default.fromValue(object.executionCounter) : long_1.default.UZERO,
            stdlibs: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.stdlibs)
                ? object.stdlibs.map((e) => bytesFromBase64(e))
                : [],
            modules: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.modules)
                ? object.modules.map((e) => types_1.Module.fromJSON(e))
                : [],
            resources: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.resources)
                ? object.resources.map((e) => types_1.Resource.fromJSON(e))
                : [],
            tableInfos: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.tableInfos)
                ? object.tableInfos.map((e) => types_1.TableInfo.fromJSON(e))
                : [],
            tableEntries: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.tableEntries)
                ? object.tableEntries.map((e) => types_1.TableEntry.fromJSON(e))
                : [],
            dexPairs: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.dexPairs)
                ? object.dexPairs.map((e) => types_1.DexPair.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b, _c, _d, _e, _f;
        const obj = {};
        if (message.params !== undefined) {
            obj.params = types_1.Params.toJSON(message.params);
        }
        if (!message.executionCounter.isZero()) {
            obj.executionCounter = (message.executionCounter || long_1.default.UZERO).toString();
        }
        if ((_a = message.stdlibs) === null || _a === void 0 ? void 0 : _a.length) {
            obj.stdlibs = message.stdlibs.map((e) => base64FromBytes(e));
        }
        if ((_b = message.modules) === null || _b === void 0 ? void 0 : _b.length) {
            obj.modules = message.modules.map((e) => types_1.Module.toJSON(e));
        }
        if ((_c = message.resources) === null || _c === void 0 ? void 0 : _c.length) {
            obj.resources = message.resources.map((e) => types_1.Resource.toJSON(e));
        }
        if ((_d = message.tableInfos) === null || _d === void 0 ? void 0 : _d.length) {
            obj.tableInfos = message.tableInfos.map((e) => types_1.TableInfo.toJSON(e));
        }
        if ((_e = message.tableEntries) === null || _e === void 0 ? void 0 : _e.length) {
            obj.tableEntries = message.tableEntries.map((e) => types_1.TableEntry.toJSON(e));
        }
        if ((_f = message.dexPairs) === null || _f === void 0 ? void 0 : _f.length) {
            obj.dexPairs = message.dexPairs.map((e) => types_1.DexPair.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GenesisState.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseGenesisState();
        message.params =
            object.params !== undefined && object.params !== null ? types_1.Params.fromPartial(object.params) : undefined;
        message.executionCounter =
            object.executionCounter !== undefined && object.executionCounter !== null
                ? long_1.default.fromValue(object.executionCounter)
                : long_1.default.UZERO;
        message.stdlibs = ((_a = object.stdlibs) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.modules = ((_b = object.modules) === null || _b === void 0 ? void 0 : _b.map((e) => types_1.Module.fromPartial(e))) || [];
        message.resources = ((_c = object.resources) === null || _c === void 0 ? void 0 : _c.map((e) => types_1.Resource.fromPartial(e))) || [];
        message.tableInfos = ((_d = object.tableInfos) === null || _d === void 0 ? void 0 : _d.map((e) => types_1.TableInfo.fromPartial(e))) || [];
        message.tableEntries = ((_e = object.tableEntries) === null || _e === void 0 ? void 0 : _e.map((e) => types_1.TableEntry.fromPartial(e))) || [];
        message.dexPairs = ((_f = object.dexPairs) === null || _f === void 0 ? void 0 : _f.map((e) => types_1.DexPair.fromPartial(e))) || [];
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=genesis.js.map