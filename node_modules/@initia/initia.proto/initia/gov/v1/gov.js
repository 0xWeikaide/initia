"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Proposal = exports.Params = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
const gov_1 = require("../../../cosmos/gov/v1/gov");
const any_1 = require("../../../google/protobuf/any");
const duration_1 = require("../../../google/protobuf/duration");
const timestamp_1 = require("../../../google/protobuf/timestamp");
exports.protobufPackage = "initia.gov.v1";
function createBaseParams() {
    return {
        minDeposit: [],
        maxDepositPeriod: undefined,
        votingPeriod: undefined,
        quorum: "",
        threshold: "",
        vetoThreshold: "",
        minInitialDepositRatio: "",
        proposalCancelRatio: "",
        proposalCancelDest: "",
        expeditedVotingPeriod: undefined,
        expeditedThreshold: "",
        expeditedMinDeposit: [],
        burnVoteQuorum: false,
        burnProposalDepositPrevote: false,
        burnVoteVeto: false,
        minDepositRatio: "",
        emergencyMinDeposit: [],
        emergencyTallyInterval: undefined,
        lowThresholdFunctions: [],
    };
}
exports.Params = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.minDeposit) {
            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.maxDepositPeriod !== undefined) {
            duration_1.Duration.encode(message.maxDepositPeriod, writer.uint32(18).fork()).ldelim();
        }
        if (message.votingPeriod !== undefined) {
            duration_1.Duration.encode(message.votingPeriod, writer.uint32(26).fork()).ldelim();
        }
        if (message.quorum !== "") {
            writer.uint32(34).string(message.quorum);
        }
        if (message.threshold !== "") {
            writer.uint32(42).string(message.threshold);
        }
        if (message.vetoThreshold !== "") {
            writer.uint32(50).string(message.vetoThreshold);
        }
        if (message.minInitialDepositRatio !== "") {
            writer.uint32(58).string(message.minInitialDepositRatio);
        }
        if (message.proposalCancelRatio !== "") {
            writer.uint32(66).string(message.proposalCancelRatio);
        }
        if (message.proposalCancelDest !== "") {
            writer.uint32(74).string(message.proposalCancelDest);
        }
        if (message.expeditedVotingPeriod !== undefined) {
            duration_1.Duration.encode(message.expeditedVotingPeriod, writer.uint32(82).fork()).ldelim();
        }
        if (message.expeditedThreshold !== "") {
            writer.uint32(90).string(message.expeditedThreshold);
        }
        for (const v of message.expeditedMinDeposit) {
            coin_1.Coin.encode(v, writer.uint32(98).fork()).ldelim();
        }
        if (message.burnVoteQuorum === true) {
            writer.uint32(104).bool(message.burnVoteQuorum);
        }
        if (message.burnProposalDepositPrevote === true) {
            writer.uint32(112).bool(message.burnProposalDepositPrevote);
        }
        if (message.burnVoteVeto === true) {
            writer.uint32(120).bool(message.burnVoteVeto);
        }
        if (message.minDepositRatio !== "") {
            writer.uint32(130).string(message.minDepositRatio);
        }
        for (const v of message.emergencyMinDeposit) {
            coin_1.Coin.encode(v, writer.uint32(730).fork()).ldelim();
        }
        if (message.emergencyTallyInterval !== undefined) {
            duration_1.Duration.encode(message.emergencyTallyInterval, writer.uint32(738).fork()).ldelim();
        }
        for (const v of message.lowThresholdFunctions) {
            writer.uint32(746).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.minDeposit.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.maxDepositPeriod = duration_1.Duration.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.votingPeriod = duration_1.Duration.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.quorum = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.threshold = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.vetoThreshold = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.minInitialDepositRatio = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.proposalCancelRatio = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.proposalCancelDest = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.expeditedVotingPeriod = duration_1.Duration.decode(reader, reader.uint32());
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.expeditedThreshold = reader.string();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.expeditedMinDeposit.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                case 13:
                    if (tag !== 104) {
                        break;
                    }
                    message.burnVoteQuorum = reader.bool();
                    continue;
                case 14:
                    if (tag !== 112) {
                        break;
                    }
                    message.burnProposalDepositPrevote = reader.bool();
                    continue;
                case 15:
                    if (tag !== 120) {
                        break;
                    }
                    message.burnVoteVeto = reader.bool();
                    continue;
                case 16:
                    if (tag !== 130) {
                        break;
                    }
                    message.minDepositRatio = reader.string();
                    continue;
                case 91:
                    if (tag !== 730) {
                        break;
                    }
                    message.emergencyMinDeposit.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                case 92:
                    if (tag !== 738) {
                        break;
                    }
                    message.emergencyTallyInterval = duration_1.Duration.decode(reader, reader.uint32());
                    continue;
                case 93:
                    if (tag !== 746) {
                        break;
                    }
                    message.lowThresholdFunctions.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            minDeposit: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.minDeposit)
                ? object.minDeposit.map((e) => coin_1.Coin.fromJSON(e))
                : [],
            maxDepositPeriod: isSet(object.maxDepositPeriod)
                ? duration_1.Duration.fromJSON(object.maxDepositPeriod)
                : undefined,
            votingPeriod: isSet(object.votingPeriod) ? duration_1.Duration.fromJSON(object.votingPeriod) : undefined,
            quorum: isSet(object.quorum) ? globalThis.String(object.quorum) : "",
            threshold: isSet(object.threshold) ? globalThis.String(object.threshold) : "",
            vetoThreshold: isSet(object.vetoThreshold) ? globalThis.String(object.vetoThreshold) : "",
            minInitialDepositRatio: isSet(object.minInitialDepositRatio)
                ? globalThis.String(object.minInitialDepositRatio)
                : "",
            proposalCancelRatio: isSet(object.proposalCancelRatio)
                ? globalThis.String(object.proposalCancelRatio)
                : "",
            proposalCancelDest: isSet(object.proposalCancelDest)
                ? globalThis.String(object.proposalCancelDest)
                : "",
            expeditedVotingPeriod: isSet(object.expeditedVotingPeriod)
                ? duration_1.Duration.fromJSON(object.expeditedVotingPeriod)
                : undefined,
            expeditedThreshold: isSet(object.expeditedThreshold)
                ? globalThis.String(object.expeditedThreshold)
                : "",
            expeditedMinDeposit: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.expeditedMinDeposit)
                ? object.expeditedMinDeposit.map((e) => coin_1.Coin.fromJSON(e))
                : [],
            burnVoteQuorum: isSet(object.burnVoteQuorum) ? globalThis.Boolean(object.burnVoteQuorum) : false,
            burnProposalDepositPrevote: isSet(object.burnProposalDepositPrevote)
                ? globalThis.Boolean(object.burnProposalDepositPrevote)
                : false,
            burnVoteVeto: isSet(object.burnVoteVeto) ? globalThis.Boolean(object.burnVoteVeto) : false,
            minDepositRatio: isSet(object.minDepositRatio) ? globalThis.String(object.minDepositRatio) : "",
            emergencyMinDeposit: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.emergencyMinDeposit)
                ? object.emergencyMinDeposit.map((e) => coin_1.Coin.fromJSON(e))
                : [],
            emergencyTallyInterval: isSet(object.emergencyTallyInterval)
                ? duration_1.Duration.fromJSON(object.emergencyTallyInterval)
                : undefined,
            lowThresholdFunctions: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.lowThresholdFunctions)
                ? object.lowThresholdFunctions.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b, _c, _d;
        const obj = {};
        if ((_a = message.minDeposit) === null || _a === void 0 ? void 0 : _a.length) {
            obj.minDeposit = message.minDeposit.map((e) => coin_1.Coin.toJSON(e));
        }
        if (message.maxDepositPeriod !== undefined) {
            obj.maxDepositPeriod = duration_1.Duration.toJSON(message.maxDepositPeriod);
        }
        if (message.votingPeriod !== undefined) {
            obj.votingPeriod = duration_1.Duration.toJSON(message.votingPeriod);
        }
        if (message.quorum !== "") {
            obj.quorum = message.quorum;
        }
        if (message.threshold !== "") {
            obj.threshold = message.threshold;
        }
        if (message.vetoThreshold !== "") {
            obj.vetoThreshold = message.vetoThreshold;
        }
        if (message.minInitialDepositRatio !== "") {
            obj.minInitialDepositRatio = message.minInitialDepositRatio;
        }
        if (message.proposalCancelRatio !== "") {
            obj.proposalCancelRatio = message.proposalCancelRatio;
        }
        if (message.proposalCancelDest !== "") {
            obj.proposalCancelDest = message.proposalCancelDest;
        }
        if (message.expeditedVotingPeriod !== undefined) {
            obj.expeditedVotingPeriod = duration_1.Duration.toJSON(message.expeditedVotingPeriod);
        }
        if (message.expeditedThreshold !== "") {
            obj.expeditedThreshold = message.expeditedThreshold;
        }
        if ((_b = message.expeditedMinDeposit) === null || _b === void 0 ? void 0 : _b.length) {
            obj.expeditedMinDeposit = message.expeditedMinDeposit.map((e) => coin_1.Coin.toJSON(e));
        }
        if (message.burnVoteQuorum === true) {
            obj.burnVoteQuorum = message.burnVoteQuorum;
        }
        if (message.burnProposalDepositPrevote === true) {
            obj.burnProposalDepositPrevote = message.burnProposalDepositPrevote;
        }
        if (message.burnVoteVeto === true) {
            obj.burnVoteVeto = message.burnVoteVeto;
        }
        if (message.minDepositRatio !== "") {
            obj.minDepositRatio = message.minDepositRatio;
        }
        if ((_c = message.emergencyMinDeposit) === null || _c === void 0 ? void 0 : _c.length) {
            obj.emergencyMinDeposit = message.emergencyMinDeposit.map((e) => coin_1.Coin.toJSON(e));
        }
        if (message.emergencyTallyInterval !== undefined) {
            obj.emergencyTallyInterval = duration_1.Duration.toJSON(message.emergencyTallyInterval);
        }
        if ((_d = message.lowThresholdFunctions) === null || _d === void 0 ? void 0 : _d.length) {
            obj.lowThresholdFunctions = message.lowThresholdFunctions;
        }
        return obj;
    },
    create(base) {
        return exports.Params.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        const message = createBaseParams();
        message.minDeposit = ((_a = object.minDeposit) === null || _a === void 0 ? void 0 : _a.map((e) => coin_1.Coin.fromPartial(e))) || [];
        message.maxDepositPeriod =
            object.maxDepositPeriod !== undefined && object.maxDepositPeriod !== null
                ? duration_1.Duration.fromPartial(object.maxDepositPeriod)
                : undefined;
        message.votingPeriod =
            object.votingPeriod !== undefined && object.votingPeriod !== null
                ? duration_1.Duration.fromPartial(object.votingPeriod)
                : undefined;
        message.quorum = (_b = object.quorum) !== null && _b !== void 0 ? _b : "";
        message.threshold = (_c = object.threshold) !== null && _c !== void 0 ? _c : "";
        message.vetoThreshold = (_d = object.vetoThreshold) !== null && _d !== void 0 ? _d : "";
        message.minInitialDepositRatio = (_e = object.minInitialDepositRatio) !== null && _e !== void 0 ? _e : "";
        message.proposalCancelRatio = (_f = object.proposalCancelRatio) !== null && _f !== void 0 ? _f : "";
        message.proposalCancelDest = (_g = object.proposalCancelDest) !== null && _g !== void 0 ? _g : "";
        message.expeditedVotingPeriod =
            object.expeditedVotingPeriod !== undefined && object.expeditedVotingPeriod !== null
                ? duration_1.Duration.fromPartial(object.expeditedVotingPeriod)
                : undefined;
        message.expeditedThreshold = (_h = object.expeditedThreshold) !== null && _h !== void 0 ? _h : "";
        message.expeditedMinDeposit = ((_j = object.expeditedMinDeposit) === null || _j === void 0 ? void 0 : _j.map((e) => coin_1.Coin.fromPartial(e))) || [];
        message.burnVoteQuorum = (_k = object.burnVoteQuorum) !== null && _k !== void 0 ? _k : false;
        message.burnProposalDepositPrevote = (_l = object.burnProposalDepositPrevote) !== null && _l !== void 0 ? _l : false;
        message.burnVoteVeto = (_m = object.burnVoteVeto) !== null && _m !== void 0 ? _m : false;
        message.minDepositRatio = (_o = object.minDepositRatio) !== null && _o !== void 0 ? _o : "";
        message.emergencyMinDeposit = ((_p = object.emergencyMinDeposit) === null || _p === void 0 ? void 0 : _p.map((e) => coin_1.Coin.fromPartial(e))) || [];
        message.emergencyTallyInterval =
            object.emergencyTallyInterval !== undefined && object.emergencyTallyInterval !== null
                ? duration_1.Duration.fromPartial(object.emergencyTallyInterval)
                : undefined;
        message.lowThresholdFunctions = ((_q = object.lowThresholdFunctions) === null || _q === void 0 ? void 0 : _q.map((e) => e)) || [];
        return message;
    },
};
function createBaseProposal() {
    return {
        id: long_1.default.UZERO,
        messages: [],
        status: 0,
        finalTallyResult: undefined,
        submitTime: undefined,
        depositEndTime: undefined,
        totalDeposit: [],
        votingStartTime: undefined,
        votingEndTime: undefined,
        emergencyStartTime: undefined,
        emergencyNextTallyTime: undefined,
        metadata: "",
        title: "",
        summary: "",
        proposer: "",
        expedited: false,
        emergency: false,
        failedReason: "",
    };
}
exports.Proposal = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.id.isZero()) {
            writer.uint32(8).uint64(message.id);
        }
        for (const v of message.messages) {
            any_1.Any.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.status !== 0) {
            writer.uint32(24).int32(message.status);
        }
        if (message.finalTallyResult !== undefined) {
            gov_1.TallyResult.encode(message.finalTallyResult, writer.uint32(34).fork()).ldelim();
        }
        if (message.submitTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.submitTime), writer.uint32(42).fork()).ldelim();
        }
        if (message.depositEndTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.depositEndTime), writer.uint32(50).fork()).ldelim();
        }
        for (const v of message.totalDeposit) {
            coin_1.Coin.encode(v, writer.uint32(58).fork()).ldelim();
        }
        if (message.votingStartTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.votingStartTime), writer.uint32(66).fork()).ldelim();
        }
        if (message.votingEndTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.votingEndTime), writer.uint32(74).fork()).ldelim();
        }
        if (message.emergencyStartTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.emergencyStartTime), writer.uint32(82).fork()).ldelim();
        }
        if (message.emergencyNextTallyTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.emergencyNextTallyTime), writer.uint32(90).fork()).ldelim();
        }
        if (message.metadata !== "") {
            writer.uint32(98).string(message.metadata);
        }
        if (message.title !== "") {
            writer.uint32(106).string(message.title);
        }
        if (message.summary !== "") {
            writer.uint32(114).string(message.summary);
        }
        if (message.proposer !== "") {
            writer.uint32(122).string(message.proposer);
        }
        if (message.expedited === true) {
            writer.uint32(128).bool(message.expedited);
        }
        if (message.emergency === true) {
            writer.uint32(136).bool(message.emergency);
        }
        if (message.failedReason !== "") {
            writer.uint32(146).string(message.failedReason);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseProposal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.uint64();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.messages.push(any_1.Any.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.finalTallyResult = gov_1.TallyResult.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.submitTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.depositEndTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.totalDeposit.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.votingStartTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.votingEndTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.emergencyStartTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.emergencyNextTallyTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.metadata = reader.string();
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.summary = reader.string();
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.proposer = reader.string();
                    continue;
                case 16:
                    if (tag !== 128) {
                        break;
                    }
                    message.expedited = reader.bool();
                    continue;
                case 17:
                    if (tag !== 136) {
                        break;
                    }
                    message.emergency = reader.bool();
                    continue;
                case 18:
                    if (tag !== 146) {
                        break;
                    }
                    message.failedReason = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? long_1.default.fromValue(object.id) : long_1.default.UZERO,
            messages: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.messages)
                ? object.messages.map((e) => any_1.Any.fromJSON(e))
                : [],
            status: isSet(object.status) ? (0, gov_1.proposalStatusFromJSON)(object.status) : 0,
            finalTallyResult: isSet(object.finalTallyResult)
                ? gov_1.TallyResult.fromJSON(object.finalTallyResult)
                : undefined,
            submitTime: isSet(object.submitTime) ? fromJsonTimestamp(object.submitTime) : undefined,
            depositEndTime: isSet(object.depositEndTime) ? fromJsonTimestamp(object.depositEndTime) : undefined,
            totalDeposit: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.totalDeposit)
                ? object.totalDeposit.map((e) => coin_1.Coin.fromJSON(e))
                : [],
            votingStartTime: isSet(object.votingStartTime) ? fromJsonTimestamp(object.votingStartTime) : undefined,
            votingEndTime: isSet(object.votingEndTime) ? fromJsonTimestamp(object.votingEndTime) : undefined,
            emergencyStartTime: isSet(object.emergencyStartTime)
                ? fromJsonTimestamp(object.emergencyStartTime)
                : undefined,
            emergencyNextTallyTime: isSet(object.emergencyNextTallyTime)
                ? fromJsonTimestamp(object.emergencyNextTallyTime)
                : undefined,
            metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            summary: isSet(object.summary) ? globalThis.String(object.summary) : "",
            proposer: isSet(object.proposer) ? globalThis.String(object.proposer) : "",
            expedited: isSet(object.expedited) ? globalThis.Boolean(object.expedited) : false,
            emergency: isSet(object.emergency) ? globalThis.Boolean(object.emergency) : false,
            failedReason: isSet(object.failedReason) ? globalThis.String(object.failedReason) : "",
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (!message.id.isZero()) {
            obj.id = (message.id || long_1.default.UZERO).toString();
        }
        if ((_a = message.messages) === null || _a === void 0 ? void 0 : _a.length) {
            obj.messages = message.messages.map((e) => any_1.Any.toJSON(e));
        }
        if (message.status !== 0) {
            obj.status = (0, gov_1.proposalStatusToJSON)(message.status);
        }
        if (message.finalTallyResult !== undefined) {
            obj.finalTallyResult = gov_1.TallyResult.toJSON(message.finalTallyResult);
        }
        if (message.submitTime !== undefined) {
            obj.submitTime = message.submitTime.toISOString();
        }
        if (message.depositEndTime !== undefined) {
            obj.depositEndTime = message.depositEndTime.toISOString();
        }
        if ((_b = message.totalDeposit) === null || _b === void 0 ? void 0 : _b.length) {
            obj.totalDeposit = message.totalDeposit.map((e) => coin_1.Coin.toJSON(e));
        }
        if (message.votingStartTime !== undefined) {
            obj.votingStartTime = message.votingStartTime.toISOString();
        }
        if (message.votingEndTime !== undefined) {
            obj.votingEndTime = message.votingEndTime.toISOString();
        }
        if (message.emergencyStartTime !== undefined) {
            obj.emergencyStartTime = message.emergencyStartTime.toISOString();
        }
        if (message.emergencyNextTallyTime !== undefined) {
            obj.emergencyNextTallyTime = message.emergencyNextTallyTime.toISOString();
        }
        if (message.metadata !== "") {
            obj.metadata = message.metadata;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.summary !== "") {
            obj.summary = message.summary;
        }
        if (message.proposer !== "") {
            obj.proposer = message.proposer;
        }
        if (message.expedited === true) {
            obj.expedited = message.expedited;
        }
        if (message.emergency === true) {
            obj.emergency = message.emergency;
        }
        if (message.failedReason !== "") {
            obj.failedReason = message.failedReason;
        }
        return obj;
    },
    create(base) {
        return exports.Proposal.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
        const message = createBaseProposal();
        message.id = object.id !== undefined && object.id !== null ? long_1.default.fromValue(object.id) : long_1.default.UZERO;
        message.messages = ((_a = object.messages) === null || _a === void 0 ? void 0 : _a.map((e) => any_1.Any.fromPartial(e))) || [];
        message.status = (_b = object.status) !== null && _b !== void 0 ? _b : 0;
        message.finalTallyResult =
            object.finalTallyResult !== undefined && object.finalTallyResult !== null
                ? gov_1.TallyResult.fromPartial(object.finalTallyResult)
                : undefined;
        message.submitTime = (_c = object.submitTime) !== null && _c !== void 0 ? _c : undefined;
        message.depositEndTime = (_d = object.depositEndTime) !== null && _d !== void 0 ? _d : undefined;
        message.totalDeposit = ((_e = object.totalDeposit) === null || _e === void 0 ? void 0 : _e.map((e) => coin_1.Coin.fromPartial(e))) || [];
        message.votingStartTime = (_f = object.votingStartTime) !== null && _f !== void 0 ? _f : undefined;
        message.votingEndTime = (_g = object.votingEndTime) !== null && _g !== void 0 ? _g : undefined;
        message.emergencyStartTime = (_h = object.emergencyStartTime) !== null && _h !== void 0 ? _h : undefined;
        message.emergencyNextTallyTime = (_j = object.emergencyNextTallyTime) !== null && _j !== void 0 ? _j : undefined;
        message.metadata = (_k = object.metadata) !== null && _k !== void 0 ? _k : "";
        message.title = (_l = object.title) !== null && _l !== void 0 ? _l : "";
        message.summary = (_m = object.summary) !== null && _m !== void 0 ? _m : "";
        message.proposer = (_o = object.proposer) !== null && _o !== void 0 ? _o : "";
        message.expedited = (_p = object.expedited) !== null && _p !== void 0 ? _p : false;
        message.emergency = (_q = object.emergency) !== null && _q !== void 0 ? _q : false;
        message.failedReason = (_r = object.failedReason) !== null && _r !== void 0 ? _r : "";
        return message;
    },
};
function toTimestamp(date) {
    const seconds = numberToLong(Math.trunc(date.getTime() / 1000));
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds.toNumber() || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function numberToLong(number) {
    return long_1.default.fromNumber(number);
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=gov.js.map