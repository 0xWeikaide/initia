import Long from "long";
import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "minievm.evm.v1";
/** Params defines the set of move parameters. */
export interface Params {
    /** extra_eips defines the additional EIPs for the vm.Config */
    extraEips: Long[];
    /**
     * It is a list of addresses with permission to distribute contracts,
     * and an empty list is interpreted as allowing anyone to distribute.
     */
    allowedPublishers: string[];
}
/**
 * Log represents a contract log event. These events are generated by
 * the LOG opcode and stored/indexed by the node.
 */
export interface Log {
    /** address of the contract that generated the event */
    address: string;
    /** list of topics provided by the contract. */
    topics: string[];
    /** supplied by the contract, usually ABI-encoded */
    data: string;
}
export declare const Params: {
    encode(message: Params, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Params;
    fromJSON(object: any): Params;
    toJSON(message: Params): unknown;
    create(base?: DeepPartial<Params>): Params;
    fromPartial(object: DeepPartial<Params>): Params;
};
export declare const Log: {
    encode(message: Log, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Log;
    fromJSON(object: any): Log;
    toJSON(message: Log): unknown;
    create(base?: DeepPartial<Log>): Log;
    fromPartial(object: DeepPartial<Log>): Log;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
