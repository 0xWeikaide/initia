"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenesisDenomAddress = exports.GenesisERC20Stores = exports.GenesisKeyValue = exports.GenesisState = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const types_1 = require("./types");
exports.protobufPackage = "minievm.evm.v1";
function createBaseGenesisState() {
    return {
        params: undefined,
        stateRoot: new Uint8Array(0),
        keyValues: [],
        erc20Stores: [],
        denomAddresses: [],
    };
}
exports.GenesisState = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.params !== undefined) {
            types_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        if (message.stateRoot.length !== 0) {
            writer.uint32(18).bytes(message.stateRoot);
        }
        for (const v of message.keyValues) {
            exports.GenesisKeyValue.encode(v, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.erc20Stores) {
            exports.GenesisERC20Stores.encode(v, writer.uint32(34).fork()).ldelim();
        }
        for (const v of message.denomAddresses) {
            exports.GenesisDenomAddress.encode(v, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.params = types_1.Params.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.stateRoot = reader.bytes();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.keyValues.push(exports.GenesisKeyValue.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.erc20Stores.push(exports.GenesisERC20Stores.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.denomAddresses.push(exports.GenesisDenomAddress.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: isSet(object.params) ? types_1.Params.fromJSON(object.params) : undefined,
            stateRoot: isSet(object.stateRoot) ? bytesFromBase64(object.stateRoot) : new Uint8Array(0),
            keyValues: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.keyValues)
                ? object.keyValues.map((e) => exports.GenesisKeyValue.fromJSON(e))
                : [],
            erc20Stores: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.erc20Stores)
                ? object.erc20Stores.map((e) => exports.GenesisERC20Stores.fromJSON(e))
                : [],
            denomAddresses: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.denomAddresses)
                ? object.denomAddresses.map((e) => exports.GenesisDenomAddress.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b, _c;
        const obj = {};
        if (message.params !== undefined) {
            obj.params = types_1.Params.toJSON(message.params);
        }
        if (message.stateRoot.length !== 0) {
            obj.stateRoot = base64FromBytes(message.stateRoot);
        }
        if ((_a = message.keyValues) === null || _a === void 0 ? void 0 : _a.length) {
            obj.keyValues = message.keyValues.map((e) => exports.GenesisKeyValue.toJSON(e));
        }
        if ((_b = message.erc20Stores) === null || _b === void 0 ? void 0 : _b.length) {
            obj.erc20Stores = message.erc20Stores.map((e) => exports.GenesisERC20Stores.toJSON(e));
        }
        if ((_c = message.denomAddresses) === null || _c === void 0 ? void 0 : _c.length) {
            obj.denomAddresses = message.denomAddresses.map((e) => exports.GenesisDenomAddress.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GenesisState.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseGenesisState();
        message.params =
            object.params !== undefined && object.params !== null ? types_1.Params.fromPartial(object.params) : undefined;
        message.stateRoot = (_a = object.stateRoot) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.keyValues = ((_b = object.keyValues) === null || _b === void 0 ? void 0 : _b.map((e) => exports.GenesisKeyValue.fromPartial(e))) || [];
        message.erc20Stores = ((_c = object.erc20Stores) === null || _c === void 0 ? void 0 : _c.map((e) => exports.GenesisERC20Stores.fromPartial(e))) || [];
        message.denomAddresses = ((_d = object.denomAddresses) === null || _d === void 0 ? void 0 : _d.map((e) => exports.GenesisDenomAddress.fromPartial(e))) || [];
        return message;
    },
};
function createBaseGenesisKeyValue() {
    return { key: new Uint8Array(0), value: new Uint8Array(0) };
}
exports.GenesisKeyValue = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key.length !== 0) {
            writer.uint32(10).bytes(message.key);
        }
        if (message.value.length !== 0) {
            writer.uint32(18).bytes(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisKeyValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? bytesFromBase64(object.key) : new Uint8Array(0),
            value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key.length !== 0) {
            obj.key = base64FromBytes(message.key);
        }
        if (message.value.length !== 0) {
            obj.value = base64FromBytes(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.GenesisKeyValue.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGenesisKeyValue();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        return message;
    },
};
function createBaseGenesisERC20Stores() {
    return { address: new Uint8Array(0), stores: [] };
}
exports.GenesisERC20Stores = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address.length !== 0) {
            writer.uint32(10).bytes(message.address);
        }
        for (const v of message.stores) {
            writer.uint32(18).bytes(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisERC20Stores();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.stores.push(reader.bytes());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? bytesFromBase64(object.address) : new Uint8Array(0),
            stores: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.stores)
                ? object.stores.map((e) => bytesFromBase64(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.address.length !== 0) {
            obj.address = base64FromBytes(message.address);
        }
        if ((_a = message.stores) === null || _a === void 0 ? void 0 : _a.length) {
            obj.stores = message.stores.map((e) => base64FromBytes(e));
        }
        return obj;
    },
    create(base) {
        return exports.GenesisERC20Stores.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGenesisERC20Stores();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.stores = ((_b = object.stores) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function createBaseGenesisDenomAddress() {
    return { denom: "", contractAddress: new Uint8Array(0) };
}
exports.GenesisDenomAddress = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        if (message.contractAddress.length !== 0) {
            writer.uint32(18).bytes(message.contractAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisDenomAddress();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.contractAddress = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            contractAddress: isSet(object.contractAddress)
                ? bytesFromBase64(object.contractAddress)
                : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (message.contractAddress.length !== 0) {
            obj.contractAddress = base64FromBytes(message.contractAddress);
        }
        return obj;
    },
    create(base) {
        return exports.GenesisDenomAddress.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGenesisDenomAddress();
        message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : "";
        message.contractAddress = (_b = object.contractAddress) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=genesis.js.map