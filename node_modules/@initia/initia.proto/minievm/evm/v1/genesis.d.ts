import Long from "long";
import _m0 from "protobufjs/minimal";
import { Params } from "./types";
export declare const protobufPackage = "minievm.evm.v1";
/** GenesisState defines the evm module's genesis state. */
export interface GenesisState {
    /** params defines the parameters of the module. */
    params?: Params | undefined;
    /** state root */
    stateRoot: Uint8Array;
    /** vm kv store */
    keyValues: GenesisKeyValue[];
    /** erc20 stores */
    erc20Stores: GenesisERC20Stores[];
    denomAddresses: GenesisDenomAddress[];
}
/** GenesisKeyValue defines store KV values. */
export interface GenesisKeyValue {
    key: Uint8Array;
    value: Uint8Array;
}
/** GenesisERC20Stores defines erc20 contract addresses of an account. */
export interface GenesisERC20Stores {
    address: Uint8Array;
    stores: Uint8Array[];
}
/** GenesisDenomAddress defines erc20 contract address of denom. */
export interface GenesisDenomAddress {
    denom: string;
    contractAddress: Uint8Array;
}
export declare const GenesisState: {
    encode(message: GenesisState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState;
    fromJSON(object: any): GenesisState;
    toJSON(message: GenesisState): unknown;
    create(base?: DeepPartial<GenesisState>): GenesisState;
    fromPartial(object: DeepPartial<GenesisState>): GenesisState;
};
export declare const GenesisKeyValue: {
    encode(message: GenesisKeyValue, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GenesisKeyValue;
    fromJSON(object: any): GenesisKeyValue;
    toJSON(message: GenesisKeyValue): unknown;
    create(base?: DeepPartial<GenesisKeyValue>): GenesisKeyValue;
    fromPartial(object: DeepPartial<GenesisKeyValue>): GenesisKeyValue;
};
export declare const GenesisERC20Stores: {
    encode(message: GenesisERC20Stores, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GenesisERC20Stores;
    fromJSON(object: any): GenesisERC20Stores;
    toJSON(message: GenesisERC20Stores): unknown;
    create(base?: DeepPartial<GenesisERC20Stores>): GenesisERC20Stores;
    fromPartial(object: DeepPartial<GenesisERC20Stores>): GenesisERC20Stores;
};
export declare const GenesisDenomAddress: {
    encode(message: GenesisDenomAddress, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GenesisDenomAddress;
    fromJSON(object: any): GenesisDenomAddress;
    toJSON(message: GenesisDenomAddress): unknown;
    create(base?: DeepPartial<GenesisDenomAddress>): GenesisDenomAddress;
    fromPartial(object: DeepPartial<GenesisDenomAddress>): GenesisDenomAddress;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
