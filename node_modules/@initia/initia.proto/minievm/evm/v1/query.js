"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcWebError = exports.GrpcWebImpl = exports.QueryParamsDesc = exports.QueryCallDesc = exports.QueryDenomDesc = exports.QueryContractAddrByDenomDesc = exports.QueryStateDesc = exports.QueryCodeDesc = exports.QueryDesc = exports.QueryClientImpl = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.QueryDenomResponse = exports.QueryDenomRequest = exports.QueryContractAddrByDenomResponse = exports.QueryContractAddrByDenomRequest = exports.QueryCallResponse = exports.TraceOptions = exports.QueryCallRequest = exports.QueryStateResponse = exports.QueryStateRequest = exports.QueryCodeResponse = exports.QueryCodeRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const grpc_web_1 = require("@improbable-eng/grpc-web");
const browser_headers_1 = require("browser-headers");
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const types_1 = require("./types");
exports.protobufPackage = "minievm.evm.v1";
function createBaseQueryCodeRequest() {
    return { contractAddr: "" };
}
exports.QueryCodeRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.contractAddr !== "") {
            writer.uint32(10).string(message.contractAddr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryCodeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.contractAddr = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { contractAddr: isSet(object.contractAddr) ? globalThis.String(object.contractAddr) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.contractAddr !== "") {
            obj.contractAddr = message.contractAddr;
        }
        return obj;
    },
    create(base) {
        return exports.QueryCodeRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryCodeRequest();
        message.contractAddr = (_a = object.contractAddr) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryCodeResponse() {
    return { code: "" };
}
exports.QueryCodeResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.code !== "") {
            writer.uint32(10).string(message.code);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryCodeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.code = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { code: isSet(object.code) ? globalThis.String(object.code) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.code !== "") {
            obj.code = message.code;
        }
        return obj;
    },
    create(base) {
        return exports.QueryCodeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryCodeResponse();
        message.code = (_a = object.code) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryStateRequest() {
    return { contractAddr: "", key: "" };
}
exports.QueryStateRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.contractAddr !== "") {
            writer.uint32(10).string(message.contractAddr);
        }
        if (message.key !== "") {
            writer.uint32(18).string(message.key);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.contractAddr = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contractAddr: isSet(object.contractAddr) ? globalThis.String(object.contractAddr) : "",
            key: isSet(object.key) ? globalThis.String(object.key) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contractAddr !== "") {
            obj.contractAddr = message.contractAddr;
        }
        if (message.key !== "") {
            obj.key = message.key;
        }
        return obj;
    },
    create(base) {
        return exports.QueryStateRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryStateRequest();
        message.contractAddr = (_a = object.contractAddr) !== null && _a !== void 0 ? _a : "";
        message.key = (_b = object.key) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryStateResponse() {
    return { value: "" };
}
exports.QueryStateResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.value !== "") {
            writer.uint32(10).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStateResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { value: isSet(object.value) ? globalThis.String(object.value) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.QueryStateResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryStateResponse();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryCallRequest() {
    return { sender: "", contractAddr: "", input: "", traceOptions: undefined };
}
exports.QueryCallRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.contractAddr !== "") {
            writer.uint32(18).string(message.contractAddr);
        }
        if (message.input !== "") {
            writer.uint32(26).string(message.input);
        }
        if (message.traceOptions !== undefined) {
            exports.TraceOptions.encode(message.traceOptions, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryCallRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.contractAddr = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.input = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.traceOptions = exports.TraceOptions.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            contractAddr: isSet(object.contractAddr) ? globalThis.String(object.contractAddr) : "",
            input: isSet(object.input) ? globalThis.String(object.input) : "",
            traceOptions: isSet(object.traceOptions) ? exports.TraceOptions.fromJSON(object.traceOptions) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.contractAddr !== "") {
            obj.contractAddr = message.contractAddr;
        }
        if (message.input !== "") {
            obj.input = message.input;
        }
        if (message.traceOptions !== undefined) {
            obj.traceOptions = exports.TraceOptions.toJSON(message.traceOptions);
        }
        return obj;
    },
    create(base) {
        return exports.QueryCallRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseQueryCallRequest();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.contractAddr = (_b = object.contractAddr) !== null && _b !== void 0 ? _b : "";
        message.input = (_c = object.input) !== null && _c !== void 0 ? _c : "";
        message.traceOptions =
            object.traceOptions !== undefined && object.traceOptions !== null
                ? exports.TraceOptions.fromPartial(object.traceOptions)
                : undefined;
        return message;
    },
};
function createBaseTraceOptions() {
    return { withMemory: false, withStack: false, withStorage: false, withReturnData: false };
}
exports.TraceOptions = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.withMemory === true) {
            writer.uint32(8).bool(message.withMemory);
        }
        if (message.withStack === true) {
            writer.uint32(16).bool(message.withStack);
        }
        if (message.withStorage === true) {
            writer.uint32(24).bool(message.withStorage);
        }
        if (message.withReturnData === true) {
            writer.uint32(32).bool(message.withReturnData);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTraceOptions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.withMemory = reader.bool();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.withStack = reader.bool();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.withStorage = reader.bool();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.withReturnData = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            withMemory: isSet(object.withMemory) ? globalThis.Boolean(object.withMemory) : false,
            withStack: isSet(object.withStack) ? globalThis.Boolean(object.withStack) : false,
            withStorage: isSet(object.withStorage) ? globalThis.Boolean(object.withStorage) : false,
            withReturnData: isSet(object.withReturnData) ? globalThis.Boolean(object.withReturnData) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.withMemory === true) {
            obj.withMemory = message.withMemory;
        }
        if (message.withStack === true) {
            obj.withStack = message.withStack;
        }
        if (message.withStorage === true) {
            obj.withStorage = message.withStorage;
        }
        if (message.withReturnData === true) {
            obj.withReturnData = message.withReturnData;
        }
        return obj;
    },
    create(base) {
        return exports.TraceOptions.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseTraceOptions();
        message.withMemory = (_a = object.withMemory) !== null && _a !== void 0 ? _a : false;
        message.withStack = (_b = object.withStack) !== null && _b !== void 0 ? _b : false;
        message.withStorage = (_c = object.withStorage) !== null && _c !== void 0 ? _c : false;
        message.withReturnData = (_d = object.withReturnData) !== null && _d !== void 0 ? _d : false;
        return message;
    },
};
function createBaseQueryCallResponse() {
    return { response: "", usedGas: long_1.default.UZERO, logs: [], traceOutput: "", error: "" };
}
exports.QueryCallResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.response !== "") {
            writer.uint32(10).string(message.response);
        }
        if (!message.usedGas.isZero()) {
            writer.uint32(16).uint64(message.usedGas);
        }
        for (const v of message.logs) {
            types_1.Log.encode(v, writer.uint32(26).fork()).ldelim();
        }
        if (message.traceOutput !== "") {
            writer.uint32(34).string(message.traceOutput);
        }
        if (message.error !== "") {
            writer.uint32(42).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryCallResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.response = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.usedGas = reader.uint64();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.logs.push(types_1.Log.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.traceOutput = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            response: isSet(object.response) ? globalThis.String(object.response) : "",
            usedGas: isSet(object.usedGas) ? long_1.default.fromValue(object.usedGas) : long_1.default.UZERO,
            logs: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.logs) ? object.logs.map((e) => types_1.Log.fromJSON(e)) : [],
            traceOutput: isSet(object.traceOutput) ? globalThis.String(object.traceOutput) : "",
            error: isSet(object.error) ? globalThis.String(object.error) : "",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.response !== "") {
            obj.response = message.response;
        }
        if (!message.usedGas.isZero()) {
            obj.usedGas = (message.usedGas || long_1.default.UZERO).toString();
        }
        if ((_a = message.logs) === null || _a === void 0 ? void 0 : _a.length) {
            obj.logs = message.logs.map((e) => types_1.Log.toJSON(e));
        }
        if (message.traceOutput !== "") {
            obj.traceOutput = message.traceOutput;
        }
        if (message.error !== "") {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.QueryCallResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseQueryCallResponse();
        message.response = (_a = object.response) !== null && _a !== void 0 ? _a : "";
        message.usedGas =
            object.usedGas !== undefined && object.usedGas !== null ? long_1.default.fromValue(object.usedGas) : long_1.default.UZERO;
        message.logs = ((_b = object.logs) === null || _b === void 0 ? void 0 : _b.map((e) => types_1.Log.fromPartial(e))) || [];
        message.traceOutput = (_c = object.traceOutput) !== null && _c !== void 0 ? _c : "";
        message.error = (_d = object.error) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseQueryContractAddrByDenomRequest() {
    return { denom: "" };
}
exports.QueryContractAddrByDenomRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryContractAddrByDenomRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { denom: isSet(object.denom) ? globalThis.String(object.denom) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        return obj;
    },
    create(base) {
        return exports.QueryContractAddrByDenomRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryContractAddrByDenomRequest();
        message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryContractAddrByDenomResponse() {
    return { address: "" };
}
exports.QueryContractAddrByDenomResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryContractAddrByDenomResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.QueryContractAddrByDenomResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryContractAddrByDenomResponse();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryDenomRequest() {
    return { contractAddr: "" };
}
exports.QueryDenomRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.contractAddr !== "") {
            writer.uint32(10).string(message.contractAddr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryDenomRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.contractAddr = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { contractAddr: isSet(object.contractAddr) ? globalThis.String(object.contractAddr) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.contractAddr !== "") {
            obj.contractAddr = message.contractAddr;
        }
        return obj;
    },
    create(base) {
        return exports.QueryDenomRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryDenomRequest();
        message.contractAddr = (_a = object.contractAddr) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryDenomResponse() {
    return { denom: "" };
}
exports.QueryDenomResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryDenomResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { denom: isSet(object.denom) ? globalThis.String(object.denom) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        return obj;
    },
    create(base) {
        return exports.QueryDenomResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryDenomResponse();
        message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryParamsRequest() {
    return {};
}
exports.QueryParamsRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryParamsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
};
function createBaseQueryParamsResponse() {
    return { params: undefined };
}
exports.QueryParamsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.params !== undefined) {
            types_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.params = types_1.Params.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { params: isSet(object.params) ? types_1.Params.fromJSON(object.params) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.params !== undefined) {
            obj.params = types_1.Params.toJSON(message.params);
        }
        return obj;
    },
    create(base) {
        return exports.QueryParamsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params =
            object.params !== undefined && object.params !== null ? types_1.Params.fromPartial(object.params) : undefined;
        return message;
    },
};
class QueryClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.Code = this.Code.bind(this);
        this.State = this.State.bind(this);
        this.ContractAddrByDenom = this.ContractAddrByDenom.bind(this);
        this.Denom = this.Denom.bind(this);
        this.Call = this.Call.bind(this);
        this.Params = this.Params.bind(this);
    }
    Code(request, metadata) {
        return this.rpc.unary(exports.QueryCodeDesc, exports.QueryCodeRequest.fromPartial(request), metadata);
    }
    State(request, metadata) {
        return this.rpc.unary(exports.QueryStateDesc, exports.QueryStateRequest.fromPartial(request), metadata);
    }
    ContractAddrByDenom(request, metadata) {
        return this.rpc.unary(exports.QueryContractAddrByDenomDesc, exports.QueryContractAddrByDenomRequest.fromPartial(request), metadata);
    }
    Denom(request, metadata) {
        return this.rpc.unary(exports.QueryDenomDesc, exports.QueryDenomRequest.fromPartial(request), metadata);
    }
    Call(request, metadata) {
        return this.rpc.unary(exports.QueryCallDesc, exports.QueryCallRequest.fromPartial(request), metadata);
    }
    Params(request, metadata) {
        return this.rpc.unary(exports.QueryParamsDesc, exports.QueryParamsRequest.fromPartial(request), metadata);
    }
}
exports.QueryClientImpl = QueryClientImpl;
exports.QueryDesc = { serviceName: "minievm.evm.v1.Query" };
exports.QueryCodeDesc = {
    methodName: "Code",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryCodeRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryCodeResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.QueryStateDesc = {
    methodName: "State",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryStateRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryStateResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.QueryContractAddrByDenomDesc = {
    methodName: "ContractAddrByDenom",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryContractAddrByDenomRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryContractAddrByDenomResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.QueryDenomDesc = {
    methodName: "Denom",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryDenomRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryDenomResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.QueryCallDesc = {
    methodName: "Call",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryCallRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryCallResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
exports.QueryParamsDesc = {
    methodName: "Params",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryParamsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = exports.QueryParamsResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        var _a;
        const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_1.BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap))
            : metadata !== null && metadata !== void 0 ? metadata : this.options.metadata;
        return new Promise((resolve, reject) => {
            var _a;
            grpc_web_1.grpc.unary(methodDesc, Object.assign(Object.assign({ request, host: this.host, metadata: maybeCombinedMetadata !== null && maybeCombinedMetadata !== void 0 ? maybeCombinedMetadata : {} }, (this.options.transport !== undefined ? { transport: this.options.transport } : {})), { debug: (_a = this.options.debug) !== null && _a !== void 0 ? _a : false, onEnd: function (response) {
                    if (response.status === grpc_web_1.grpc.Code.OK) {
                        resolve(response.message.toObject());
                    }
                    else {
                        const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
                        reject(err);
                    }
                } }));
        });
    }
}
exports.GrpcWebImpl = GrpcWebImpl;
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
class GrpcWebError extends globalThis.Error {
    constructor(message, code, metadata) {
        super(message);
        this.code = code;
        this.metadata = metadata;
    }
}
exports.GrpcWebError = GrpcWebError;
//# sourceMappingURL=query.js.map