"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LastValidatorPower = exports.GenesisState = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const types_1 = require("./types");
exports.protobufPackage = "opinit.opchild.v1";
function createBaseGenesisState() {
    return {
        params: undefined,
        lastValidatorPowers: [],
        validators: [],
        exported: false,
        nextL2Sequence: long_1.default.UZERO,
        finalizedL1Sequences: [],
        bridgeInfo: undefined,
    };
}
exports.GenesisState = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.params !== undefined) {
            types_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.lastValidatorPowers) {
            exports.LastValidatorPower.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.validators) {
            types_1.Validator.encode(v, writer.uint32(26).fork()).ldelim();
        }
        if (message.exported === true) {
            writer.uint32(40).bool(message.exported);
        }
        if (!message.nextL2Sequence.isZero()) {
            writer.uint32(48).uint64(message.nextL2Sequence);
        }
        writer.uint32(58).fork();
        for (const v of message.finalizedL1Sequences) {
            writer.uint64(v);
        }
        writer.ldelim();
        if (message.bridgeInfo !== undefined) {
            types_1.BridgeInfo.encode(message.bridgeInfo, writer.uint32(66).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = types_1.Params.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.lastValidatorPowers.push(exports.LastValidatorPower.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.validators.push(types_1.Validator.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.exported = reader.bool();
                    break;
                case 6:
                    message.nextL2Sequence = reader.uint64();
                    break;
                case 7:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.finalizedL1Sequences.push(reader.uint64());
                        }
                    }
                    else {
                        message.finalizedL1Sequences.push(reader.uint64());
                    }
                    break;
                case 8:
                    message.bridgeInfo = types_1.BridgeInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: isSet(object.params) ? types_1.Params.fromJSON(object.params) : undefined,
            lastValidatorPowers: Array.isArray(object === null || object === void 0 ? void 0 : object.lastValidatorPowers)
                ? object.lastValidatorPowers.map((e) => exports.LastValidatorPower.fromJSON(e))
                : [],
            validators: Array.isArray(object === null || object === void 0 ? void 0 : object.validators)
                ? object.validators.map((e) => types_1.Validator.fromJSON(e))
                : [],
            exported: isSet(object.exported) ? Boolean(object.exported) : false,
            nextL2Sequence: isSet(object.nextL2Sequence) ? long_1.default.fromValue(object.nextL2Sequence) : long_1.default.UZERO,
            finalizedL1Sequences: Array.isArray(object === null || object === void 0 ? void 0 : object.finalizedL1Sequences)
                ? object.finalizedL1Sequences.map((e) => long_1.default.fromValue(e))
                : [],
            bridgeInfo: isSet(object.bridgeInfo) ? types_1.BridgeInfo.fromJSON(object.bridgeInfo) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? types_1.Params.toJSON(message.params) : undefined);
        if (message.lastValidatorPowers) {
            obj.lastValidatorPowers = message.lastValidatorPowers.map((e) => e ? exports.LastValidatorPower.toJSON(e) : undefined);
        }
        else {
            obj.lastValidatorPowers = [];
        }
        if (message.validators) {
            obj.validators = message.validators.map((e) => (e ? types_1.Validator.toJSON(e) : undefined));
        }
        else {
            obj.validators = [];
        }
        message.exported !== undefined && (obj.exported = message.exported);
        message.nextL2Sequence !== undefined &&
            (obj.nextL2Sequence = (message.nextL2Sequence || long_1.default.UZERO).toString());
        if (message.finalizedL1Sequences) {
            obj.finalizedL1Sequences = message.finalizedL1Sequences.map((e) => (e || long_1.default.UZERO).toString());
        }
        else {
            obj.finalizedL1Sequences = [];
        }
        message.bridgeInfo !== undefined &&
            (obj.bridgeInfo = message.bridgeInfo ? types_1.BridgeInfo.toJSON(message.bridgeInfo) : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseGenesisState();
        message.params =
            object.params !== undefined && object.params !== null ? types_1.Params.fromPartial(object.params) : undefined;
        message.lastValidatorPowers =
            ((_a = object.lastValidatorPowers) === null || _a === void 0 ? void 0 : _a.map((e) => exports.LastValidatorPower.fromPartial(e))) || [];
        message.validators = ((_b = object.validators) === null || _b === void 0 ? void 0 : _b.map((e) => types_1.Validator.fromPartial(e))) || [];
        message.exported = (_c = object.exported) !== null && _c !== void 0 ? _c : false;
        message.nextL2Sequence =
            object.nextL2Sequence !== undefined && object.nextL2Sequence !== null
                ? long_1.default.fromValue(object.nextL2Sequence)
                : long_1.default.UZERO;
        message.finalizedL1Sequences = ((_d = object.finalizedL1Sequences) === null || _d === void 0 ? void 0 : _d.map((e) => long_1.default.fromValue(e))) || [];
        message.bridgeInfo =
            object.bridgeInfo !== undefined && object.bridgeInfo !== null
                ? types_1.BridgeInfo.fromPartial(object.bridgeInfo)
                : undefined;
        return message;
    },
};
function createBaseLastValidatorPower() {
    return { address: "", power: long_1.default.ZERO };
}
exports.LastValidatorPower = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (!message.power.isZero()) {
            writer.uint32(16).int64(message.power);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLastValidatorPower();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.address = reader.string();
                    break;
                case 2:
                    message.power = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? String(object.address) : "",
            power: isSet(object.power) ? long_1.default.fromValue(object.power) : long_1.default.ZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.address !== undefined && (obj.address = message.address);
        message.power !== undefined && (obj.power = (message.power || long_1.default.ZERO).toString());
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseLastValidatorPower();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        message.power =
            object.power !== undefined && object.power !== null ? long_1.default.fromValue(object.power) : long_1.default.ZERO;
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=genesis.js.map