import { grpc } from "@improbable-eng/grpc-web";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { Any } from "../../../google/protobuf/any";
import { BridgeInfo, Params } from "./types";
export declare const protobufPackage = "opinit.opchild.v1";
/**
 * MsgExecuteMessages is a message to execute the given
 * authority messages with validator permission.
 */
export interface MsgExecuteMessages {
    /** Sender is the that actor that signed a messages */
    sender: string;
    /** messages are the arbitrary messages to be executed. */
    messages: Any[];
}
/** MsgExecuteMessagesResponse returns MsgExecuteMessages message result data */
export interface MsgExecuteMessagesResponse {
}
/** MsgSetBridgeInfo is a message to set the registered bridge information. */
export interface MsgSetBridgeInfo {
    /** the sender address */
    sender: string;
    /** bridge_info is the bridge information to be set. */
    bridgeInfo?: BridgeInfo;
}
/** MsgSetBridgeInfoResponse returns set bridge info result data */
export interface MsgSetBridgeInfoResponse {
}
/** MsgFinalizeTokenDeposit is a message to submit deposit funds from upper layer */
export interface MsgFinalizeTokenDeposit {
    /** the sender address */
    sender: string;
    /** from is l1 sender address */
    from: string;
    /** to is l2 recipient address */
    to: string;
    /** amount is the coin amount to deposit. */
    amount?: Coin;
    /** sequence is the sequence number of l1 bridge */
    sequence: Long;
    /** height is the height of l1 which is including the deposit message */
    height: Long;
    /** base_denom is the l1 denomination of the sent coin. */
    baseDenom: string;
    /** / data is a extra bytes for hooks. */
    data: Uint8Array;
}
/** MsgFinalizeTokenDepositResponse returns deposit result data */
export interface MsgFinalizeTokenDepositResponse {
}
/** MsgInitiateTokenWithdrawal is a message to withdraw a new token from L2 to L1. */
export interface MsgInitiateTokenWithdrawal {
    /** the l2 sender address */
    sender: string;
    /** to is l1 recipient address */
    to: string;
    /** amount is the coin amount to withdraw. */
    amount?: Coin;
}
/** MsgInitiateTokenWithdrawalResponse returns create token result data */
export interface MsgInitiateTokenWithdrawalResponse {
    sequence: Long;
}
/** MsgAddValidator defines a SDK message for adding a new validator. */
export interface MsgAddValidator {
    /**
     * authority is the address that controls the module
     * (defaults to x/opchild unless overwritten).
     */
    authority: string;
    moniker: string;
    validatorAddress: string;
    pubkey?: Any;
}
/** MsgAddValidatorResponse returns add result data */
export interface MsgAddValidatorResponse {
}
/** MsgAddValidator is a message to remove a validator from designated list */
export interface MsgRemoveValidator {
    /**
     * authority is the address that controls the module
     * (defaults to x/opchild unless overwritten).
     */
    authority: string;
    /** validator is the validator to remove. */
    validatorAddress: string;
}
/** MsgAddValidatorResponse returns remove result data */
export interface MsgRemoveValidatorResponse {
}
/** MsgUpdateParams is a message to update parameters */
export interface MsgUpdateParams {
    /**
     * authority is the address that controls the module
     * (defaults to x/opchild unless overwritten).
     */
    authority: string;
    /** params are the arbitrary parameters to be updated. */
    params?: Params;
}
/** MsgUpdateParamsResponse returns parameter update result data */
export interface MsgUpdateParamsResponse {
}
/**
 * MsgSpendFeePool is a message to withdraw collected fees from the module
 * account to the recipient address.
 */
export interface MsgSpendFeePool {
    /**
     * authority is the address that controls the module
     * (defaults to x/opchild unless overwritten).
     */
    authority: string;
    /** recipient is address to receive the coins. */
    recipient: string;
    /** the coin amount to spend. */
    amount: Coin[];
}
/** MsgSpendFeePoolResponse returns deposit result data */
export interface MsgSpendFeePoolResponse {
}
/** MsgUpdateOracle is a message to update oracle prices which contains L1 extended commits for oracle. */
export interface MsgUpdateOracle {
    /** the sender address */
    sender: string;
    /** height is the height of l1 which is including the oracle message */
    height: Long;
    /** / data is oracle votes bytes. */
    data: Uint8Array;
}
/** MsgUpdateOracleResponse returns oracle update result data */
export interface MsgUpdateOracleResponse {
}
export declare const MsgExecuteMessages: {
    encode(message: MsgExecuteMessages, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgExecuteMessages;
    fromJSON(object: any): MsgExecuteMessages;
    toJSON(message: MsgExecuteMessages): unknown;
    fromPartial<I extends {
        sender?: string | undefined;
        messages?: {
            typeUrl?: string | undefined;
            value?: Uint8Array | undefined;
        }[] | undefined;
    } & {
        sender?: string | undefined;
        messages?: ({
            typeUrl?: string | undefined;
            value?: Uint8Array | undefined;
        }[] & ({
            typeUrl?: string | undefined;
            value?: Uint8Array | undefined;
        } & {
            typeUrl?: string | undefined;
            value?: Uint8Array | undefined;
        } & { [K in Exclude<keyof I["messages"][number], keyof Any>]: never; })[] & { [K_1 in Exclude<keyof I["messages"], keyof {
            typeUrl?: string | undefined;
            value?: Uint8Array | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, keyof MsgExecuteMessages>]: never; }>(object: I): MsgExecuteMessages;
};
export declare const MsgExecuteMessagesResponse: {
    encode(_: MsgExecuteMessagesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgExecuteMessagesResponse;
    fromJSON(_: any): MsgExecuteMessagesResponse;
    toJSON(_: MsgExecuteMessagesResponse): unknown;
    fromPartial<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(_: I): MsgExecuteMessagesResponse;
};
export declare const MsgSetBridgeInfo: {
    encode(message: MsgSetBridgeInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgSetBridgeInfo;
    fromJSON(object: any): MsgSetBridgeInfo;
    toJSON(message: MsgSetBridgeInfo): unknown;
    fromPartial<I extends {
        sender?: string | undefined;
        bridgeInfo?: {
            bridgeId?: string | number | Long | undefined;
            bridgeAddr?: string | undefined;
            l1ChainId?: string | undefined;
            l1ClientId?: string | undefined;
            bridgeConfig?: {
                challenger?: string | undefined;
                proposer?: string | undefined;
                batchInfo?: {
                    submitter?: string | undefined;
                    chain?: string | undefined;
                } | undefined;
                submissionInterval?: {
                    seconds?: string | number | Long | undefined;
                    nanos?: number | undefined;
                } | undefined;
                finalizationPeriod?: {
                    seconds?: string | number | Long | undefined;
                    nanos?: number | undefined;
                } | undefined;
                submissionStartTime?: Date | undefined;
                metadata?: Uint8Array | undefined;
            } | undefined;
        } | undefined;
    } & {
        sender?: string | undefined;
        bridgeInfo?: ({
            bridgeId?: string | number | Long | undefined;
            bridgeAddr?: string | undefined;
            l1ChainId?: string | undefined;
            l1ClientId?: string | undefined;
            bridgeConfig?: {
                challenger?: string | undefined;
                proposer?: string | undefined;
                batchInfo?: {
                    submitter?: string | undefined;
                    chain?: string | undefined;
                } | undefined;
                submissionInterval?: {
                    seconds?: string | number | Long | undefined;
                    nanos?: number | undefined;
                } | undefined;
                finalizationPeriod?: {
                    seconds?: string | number | Long | undefined;
                    nanos?: number | undefined;
                } | undefined;
                submissionStartTime?: Date | undefined;
                metadata?: Uint8Array | undefined;
            } | undefined;
        } & {
            bridgeId?: string | number | (Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long) => Long;
                and: (other: string | number | Long) => Long;
                compare: (other: string | number | Long) => number;
                comp: (other: string | number | Long) => number;
                divide: (divisor: string | number | Long) => Long;
                div: (divisor: string | number | Long) => Long;
                equals: (other: string | number | Long) => boolean;
                eq: (other: string | number | Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long) => boolean;
                gt: (other: string | number | Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long) => boolean;
                gte: (other: string | number | Long) => boolean;
                ge: (other: string | number | Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                eqz: () => boolean;
                lessThan: (other: string | number | Long) => boolean;
                lt: (other: string | number | Long) => boolean;
                lessThanOrEqual: (other: string | number | Long) => boolean;
                lte: (other: string | number | Long) => boolean;
                le: (other: string | number | Long) => boolean;
                modulo: (other: string | number | Long) => Long;
                mod: (other: string | number | Long) => Long;
                rem: (other: string | number | Long) => Long;
                multiply: (multiplier: string | number | Long) => Long;
                mul: (multiplier: string | number | Long) => Long;
                negate: () => Long;
                neg: () => Long;
                not: () => Long;
                countLeadingZeros: () => number;
                clz: () => number;
                countTrailingZeros: () => number;
                ctz: () => number;
                notEquals: (other: string | number | Long) => boolean;
                neq: (other: string | number | Long) => boolean;
                ne: (other: string | number | Long) => boolean;
                or: (other: string | number | Long) => Long;
                shiftLeft: (numBits: number | Long) => Long;
                shl: (numBits: number | Long) => Long;
                shiftRight: (numBits: number | Long) => Long;
                shr: (numBits: number | Long) => Long;
                shiftRightUnsigned: (numBits: number | Long) => Long;
                shru: (numBits: number | Long) => Long;
                shr_u: (numBits: number | Long) => Long;
                rotateLeft: (numBits: number | Long) => Long;
                rotl: (numBits: number | Long) => Long;
                rotateRight: (numBits: number | Long) => Long;
                rotr: (numBits: number | Long) => Long;
                subtract: (subtrahend: string | number | Long) => Long;
                sub: (subtrahend: string | number | Long) => Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long;
                xor: (other: string | number | Long) => Long;
            } & { [K in Exclude<keyof I["bridgeInfo"]["bridgeId"], keyof Long>]: never; }) | undefined;
            bridgeAddr?: string | undefined;
            l1ChainId?: string | undefined;
            l1ClientId?: string | undefined;
            bridgeConfig?: ({
                challenger?: string | undefined;
                proposer?: string | undefined;
                batchInfo?: {
                    submitter?: string | undefined;
                    chain?: string | undefined;
                } | undefined;
                submissionInterval?: {
                    seconds?: string | number | Long | undefined;
                    nanos?: number | undefined;
                } | undefined;
                finalizationPeriod?: {
                    seconds?: string | number | Long | undefined;
                    nanos?: number | undefined;
                } | undefined;
                submissionStartTime?: Date | undefined;
                metadata?: Uint8Array | undefined;
            } & {
                challenger?: string | undefined;
                proposer?: string | undefined;
                batchInfo?: ({
                    submitter?: string | undefined;
                    chain?: string | undefined;
                } & {
                    submitter?: string | undefined;
                    chain?: string | undefined;
                } & { [K_1 in Exclude<keyof I["bridgeInfo"]["bridgeConfig"]["batchInfo"], keyof import("../../ophost/v1/types").BatchInfo>]: never; }) | undefined;
                submissionInterval?: ({
                    seconds?: string | number | Long | undefined;
                    nanos?: number | undefined;
                } & {
                    seconds?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_2 in Exclude<keyof I["bridgeInfo"]["bridgeConfig"]["submissionInterval"]["seconds"], keyof Long>]: never; }) | undefined;
                    nanos?: number | undefined;
                } & { [K_3 in Exclude<keyof I["bridgeInfo"]["bridgeConfig"]["submissionInterval"], keyof import("../../../google/protobuf/duration").Duration>]: never; }) | undefined;
                finalizationPeriod?: ({
                    seconds?: string | number | Long | undefined;
                    nanos?: number | undefined;
                } & {
                    seconds?: string | number | (Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long) => Long;
                        and: (other: string | number | Long) => Long;
                        compare: (other: string | number | Long) => number;
                        comp: (other: string | number | Long) => number;
                        divide: (divisor: string | number | Long) => Long;
                        div: (divisor: string | number | Long) => Long;
                        equals: (other: string | number | Long) => boolean;
                        eq: (other: string | number | Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long) => boolean;
                        gt: (other: string | number | Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long) => boolean;
                        gte: (other: string | number | Long) => boolean;
                        ge: (other: string | number | Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        eqz: () => boolean;
                        lessThan: (other: string | number | Long) => boolean;
                        lt: (other: string | number | Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long) => boolean;
                        lte: (other: string | number | Long) => boolean;
                        le: (other: string | number | Long) => boolean;
                        modulo: (other: string | number | Long) => Long;
                        mod: (other: string | number | Long) => Long;
                        rem: (other: string | number | Long) => Long;
                        multiply: (multiplier: string | number | Long) => Long;
                        mul: (multiplier: string | number | Long) => Long;
                        negate: () => Long;
                        neg: () => Long;
                        not: () => Long;
                        countLeadingZeros: () => number;
                        clz: () => number;
                        countTrailingZeros: () => number;
                        ctz: () => number;
                        notEquals: (other: string | number | Long) => boolean;
                        neq: (other: string | number | Long) => boolean;
                        ne: (other: string | number | Long) => boolean;
                        or: (other: string | number | Long) => Long;
                        shiftLeft: (numBits: number | Long) => Long;
                        shl: (numBits: number | Long) => Long;
                        shiftRight: (numBits: number | Long) => Long;
                        shr: (numBits: number | Long) => Long;
                        shiftRightUnsigned: (numBits: number | Long) => Long;
                        shru: (numBits: number | Long) => Long;
                        shr_u: (numBits: number | Long) => Long;
                        rotateLeft: (numBits: number | Long) => Long;
                        rotl: (numBits: number | Long) => Long;
                        rotateRight: (numBits: number | Long) => Long;
                        rotr: (numBits: number | Long) => Long;
                        subtract: (subtrahend: string | number | Long) => Long;
                        sub: (subtrahend: string | number | Long) => Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long;
                        xor: (other: string | number | Long) => Long;
                    } & { [K_4 in Exclude<keyof I["bridgeInfo"]["bridgeConfig"]["finalizationPeriod"]["seconds"], keyof Long>]: never; }) | undefined;
                    nanos?: number | undefined;
                } & { [K_5 in Exclude<keyof I["bridgeInfo"]["bridgeConfig"]["finalizationPeriod"], keyof import("../../../google/protobuf/duration").Duration>]: never; }) | undefined;
                submissionStartTime?: Date | undefined;
                metadata?: Uint8Array | undefined;
            } & { [K_6 in Exclude<keyof I["bridgeInfo"]["bridgeConfig"], keyof import("../../ophost/v1/types").BridgeConfig>]: never; }) | undefined;
        } & { [K_7 in Exclude<keyof I["bridgeInfo"], keyof BridgeInfo>]: never; }) | undefined;
    } & { [K_8 in Exclude<keyof I, keyof MsgSetBridgeInfo>]: never; }>(object: I): MsgSetBridgeInfo;
};
export declare const MsgSetBridgeInfoResponse: {
    encode(_: MsgSetBridgeInfoResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgSetBridgeInfoResponse;
    fromJSON(_: any): MsgSetBridgeInfoResponse;
    toJSON(_: MsgSetBridgeInfoResponse): unknown;
    fromPartial<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(_: I): MsgSetBridgeInfoResponse;
};
export declare const MsgFinalizeTokenDeposit: {
    encode(message: MsgFinalizeTokenDeposit, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgFinalizeTokenDeposit;
    fromJSON(object: any): MsgFinalizeTokenDeposit;
    toJSON(message: MsgFinalizeTokenDeposit): unknown;
    fromPartial<I extends {
        sender?: string | undefined;
        from?: string | undefined;
        to?: string | undefined;
        amount?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        sequence?: string | number | Long | undefined;
        height?: string | number | Long | undefined;
        baseDenom?: string | undefined;
        data?: Uint8Array | undefined;
    } & {
        sender?: string | undefined;
        from?: string | undefined;
        to?: string | undefined;
        amount?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K in Exclude<keyof I["amount"], keyof Coin>]: never; }) | undefined;
        sequence?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_1 in Exclude<keyof I["sequence"], keyof Long>]: never; }) | undefined;
        height?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_2 in Exclude<keyof I["height"], keyof Long>]: never; }) | undefined;
        baseDenom?: string | undefined;
        data?: Uint8Array | undefined;
    } & { [K_3 in Exclude<keyof I, keyof MsgFinalizeTokenDeposit>]: never; }>(object: I): MsgFinalizeTokenDeposit;
};
export declare const MsgFinalizeTokenDepositResponse: {
    encode(_: MsgFinalizeTokenDepositResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgFinalizeTokenDepositResponse;
    fromJSON(_: any): MsgFinalizeTokenDepositResponse;
    toJSON(_: MsgFinalizeTokenDepositResponse): unknown;
    fromPartial<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(_: I): MsgFinalizeTokenDepositResponse;
};
export declare const MsgInitiateTokenWithdrawal: {
    encode(message: MsgInitiateTokenWithdrawal, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgInitiateTokenWithdrawal;
    fromJSON(object: any): MsgInitiateTokenWithdrawal;
    toJSON(message: MsgInitiateTokenWithdrawal): unknown;
    fromPartial<I extends {
        sender?: string | undefined;
        to?: string | undefined;
        amount?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        sender?: string | undefined;
        to?: string | undefined;
        amount?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K in Exclude<keyof I["amount"], keyof Coin>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, keyof MsgInitiateTokenWithdrawal>]: never; }>(object: I): MsgInitiateTokenWithdrawal;
};
export declare const MsgInitiateTokenWithdrawalResponse: {
    encode(message: MsgInitiateTokenWithdrawalResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgInitiateTokenWithdrawalResponse;
    fromJSON(object: any): MsgInitiateTokenWithdrawalResponse;
    toJSON(message: MsgInitiateTokenWithdrawalResponse): unknown;
    fromPartial<I extends {
        sequence?: string | number | Long | undefined;
    } & {
        sequence?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K in Exclude<keyof I["sequence"], keyof Long>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "sequence">]: never; }>(object: I): MsgInitiateTokenWithdrawalResponse;
};
export declare const MsgAddValidator: {
    encode(message: MsgAddValidator, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgAddValidator;
    fromJSON(object: any): MsgAddValidator;
    toJSON(message: MsgAddValidator): unknown;
    fromPartial<I extends {
        authority?: string | undefined;
        moniker?: string | undefined;
        validatorAddress?: string | undefined;
        pubkey?: {
            typeUrl?: string | undefined;
            value?: Uint8Array | undefined;
        } | undefined;
    } & {
        authority?: string | undefined;
        moniker?: string | undefined;
        validatorAddress?: string | undefined;
        pubkey?: ({
            typeUrl?: string | undefined;
            value?: Uint8Array | undefined;
        } & {
            typeUrl?: string | undefined;
            value?: Uint8Array | undefined;
        } & { [K in Exclude<keyof I["pubkey"], keyof Any>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, keyof MsgAddValidator>]: never; }>(object: I): MsgAddValidator;
};
export declare const MsgAddValidatorResponse: {
    encode(_: MsgAddValidatorResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgAddValidatorResponse;
    fromJSON(_: any): MsgAddValidatorResponse;
    toJSON(_: MsgAddValidatorResponse): unknown;
    fromPartial<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(_: I): MsgAddValidatorResponse;
};
export declare const MsgRemoveValidator: {
    encode(message: MsgRemoveValidator, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgRemoveValidator;
    fromJSON(object: any): MsgRemoveValidator;
    toJSON(message: MsgRemoveValidator): unknown;
    fromPartial<I extends {
        authority?: string | undefined;
        validatorAddress?: string | undefined;
    } & {
        authority?: string | undefined;
        validatorAddress?: string | undefined;
    } & { [K in Exclude<keyof I, keyof MsgRemoveValidator>]: never; }>(object: I): MsgRemoveValidator;
};
export declare const MsgRemoveValidatorResponse: {
    encode(_: MsgRemoveValidatorResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgRemoveValidatorResponse;
    fromJSON(_: any): MsgRemoveValidatorResponse;
    toJSON(_: MsgRemoveValidatorResponse): unknown;
    fromPartial<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(_: I): MsgRemoveValidatorResponse;
};
export declare const MsgUpdateParams: {
    encode(message: MsgUpdateParams, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParams;
    fromJSON(object: any): MsgUpdateParams;
    toJSON(message: MsgUpdateParams): unknown;
    fromPartial<I extends {
        authority?: string | undefined;
        params?: {
            maxValidators?: number | undefined;
            historicalEntries?: number | undefined;
            minGasPrices?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
            bridgeExecutor?: string | undefined;
            admin?: string | undefined;
            feeWhitelist?: string[] | undefined;
        } | undefined;
    } & {
        authority?: string | undefined;
        params?: ({
            maxValidators?: number | undefined;
            historicalEntries?: number | undefined;
            minGasPrices?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
            bridgeExecutor?: string | undefined;
            admin?: string | undefined;
            feeWhitelist?: string[] | undefined;
        } & {
            maxValidators?: number | undefined;
            historicalEntries?: number | undefined;
            minGasPrices?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            }[] & ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & { [K in Exclude<keyof I["params"]["minGasPrices"][number], keyof import("../../../cosmos/base/v1beta1/coin").DecCoin>]: never; })[] & { [K_1 in Exclude<keyof I["params"]["minGasPrices"], keyof {
                denom?: string | undefined;
                amount?: string | undefined;
            }[]>]: never; }) | undefined;
            bridgeExecutor?: string | undefined;
            admin?: string | undefined;
            feeWhitelist?: (string[] & string[] & { [K_2 in Exclude<keyof I["params"]["feeWhitelist"], keyof string[]>]: never; }) | undefined;
        } & { [K_3 in Exclude<keyof I["params"], keyof Params>]: never; }) | undefined;
    } & { [K_4 in Exclude<keyof I, keyof MsgUpdateParams>]: never; }>(object: I): MsgUpdateParams;
};
export declare const MsgUpdateParamsResponse: {
    encode(_: MsgUpdateParamsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParamsResponse;
    fromJSON(_: any): MsgUpdateParamsResponse;
    toJSON(_: MsgUpdateParamsResponse): unknown;
    fromPartial<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(_: I): MsgUpdateParamsResponse;
};
export declare const MsgSpendFeePool: {
    encode(message: MsgSpendFeePool, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgSpendFeePool;
    fromJSON(object: any): MsgSpendFeePool;
    toJSON(message: MsgSpendFeePool): unknown;
    fromPartial<I extends {
        authority?: string | undefined;
        recipient?: string | undefined;
        amount?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
    } & {
        authority?: string | undefined;
        recipient?: string | undefined;
        amount?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K in Exclude<keyof I["amount"][number], keyof Coin>]: never; })[] & { [K_1 in Exclude<keyof I["amount"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, keyof MsgSpendFeePool>]: never; }>(object: I): MsgSpendFeePool;
};
export declare const MsgSpendFeePoolResponse: {
    encode(_: MsgSpendFeePoolResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgSpendFeePoolResponse;
    fromJSON(_: any): MsgSpendFeePoolResponse;
    toJSON(_: MsgSpendFeePoolResponse): unknown;
    fromPartial<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(_: I): MsgSpendFeePoolResponse;
};
export declare const MsgUpdateOracle: {
    encode(message: MsgUpdateOracle, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateOracle;
    fromJSON(object: any): MsgUpdateOracle;
    toJSON(message: MsgUpdateOracle): unknown;
    fromPartial<I extends {
        sender?: string | undefined;
        height?: string | number | Long | undefined;
        data?: Uint8Array | undefined;
    } & {
        sender?: string | undefined;
        height?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K in Exclude<keyof I["height"], keyof Long>]: never; }) | undefined;
        data?: Uint8Array | undefined;
    } & { [K_1 in Exclude<keyof I, keyof MsgUpdateOracle>]: never; }>(object: I): MsgUpdateOracle;
};
export declare const MsgUpdateOracleResponse: {
    encode(_: MsgUpdateOracleResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateOracleResponse;
    fromJSON(_: any): MsgUpdateOracleResponse;
    toJSON(_: MsgUpdateOracleResponse): unknown;
    fromPartial<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(_: I): MsgUpdateOracleResponse;
};
/** Msg defines the rollup Msg service. */
export interface Msg {
    /** ExecuteMessages defines a rpc handler method for MsgExecuteMessages. */
    ExecuteMessages(request: DeepPartial<MsgExecuteMessages>, metadata?: grpc.Metadata): Promise<MsgExecuteMessagesResponse>;
    /** SetBridgeInfo defines a rpc handler method for MsgSetBridgeInfo. */
    SetBridgeInfo(request: DeepPartial<MsgSetBridgeInfo>, metadata?: grpc.Metadata): Promise<MsgSetBridgeInfoResponse>;
    /** FinalizeTokenDeposit defines a rpc handler method for MsgFinalizeTokenDeposit. */
    FinalizeTokenDeposit(request: DeepPartial<MsgFinalizeTokenDeposit>, metadata?: grpc.Metadata): Promise<MsgFinalizeTokenDepositResponse>;
    /** InitiateTokenWithdrawal defines a user facing l2 => l1 token transfer interface. */
    InitiateTokenWithdrawal(request: DeepPartial<MsgInitiateTokenWithdrawal>, metadata?: grpc.Metadata): Promise<MsgInitiateTokenWithdrawalResponse>;
    /** AddValidator defines a rpc handler method for MsgAddValidator. */
    AddValidator(request: DeepPartial<MsgAddValidator>, metadata?: grpc.Metadata): Promise<MsgAddValidatorResponse>;
    /** RemoveValidator defines a rpc handler method for MsgRemoveValidator. */
    RemoveValidator(request: DeepPartial<MsgRemoveValidator>, metadata?: grpc.Metadata): Promise<MsgRemoveValidatorResponse>;
    /**
     * UpdateParams defines an operation for updating the
     * x/opchild module parameters.
     */
    UpdateParams(request: DeepPartial<MsgUpdateParams>, metadata?: grpc.Metadata): Promise<MsgUpdateParamsResponse>;
    /** SpendFeePool defines an operation that spend fee pool to a recipient. */
    SpendFeePool(request: DeepPartial<MsgSpendFeePool>, metadata?: grpc.Metadata): Promise<MsgSpendFeePoolResponse>;
    /** UpdateOracle defines an operation that update oracle prices. */
    UpdateOracle(request: DeepPartial<MsgUpdateOracle>, metadata?: grpc.Metadata): Promise<MsgUpdateOracleResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    constructor(rpc: Rpc);
    ExecuteMessages(request: DeepPartial<MsgExecuteMessages>, metadata?: grpc.Metadata): Promise<MsgExecuteMessagesResponse>;
    SetBridgeInfo(request: DeepPartial<MsgSetBridgeInfo>, metadata?: grpc.Metadata): Promise<MsgSetBridgeInfoResponse>;
    FinalizeTokenDeposit(request: DeepPartial<MsgFinalizeTokenDeposit>, metadata?: grpc.Metadata): Promise<MsgFinalizeTokenDepositResponse>;
    InitiateTokenWithdrawal(request: DeepPartial<MsgInitiateTokenWithdrawal>, metadata?: grpc.Metadata): Promise<MsgInitiateTokenWithdrawalResponse>;
    AddValidator(request: DeepPartial<MsgAddValidator>, metadata?: grpc.Metadata): Promise<MsgAddValidatorResponse>;
    RemoveValidator(request: DeepPartial<MsgRemoveValidator>, metadata?: grpc.Metadata): Promise<MsgRemoveValidatorResponse>;
    UpdateParams(request: DeepPartial<MsgUpdateParams>, metadata?: grpc.Metadata): Promise<MsgUpdateParamsResponse>;
    SpendFeePool(request: DeepPartial<MsgSpendFeePool>, metadata?: grpc.Metadata): Promise<MsgSpendFeePoolResponse>;
    UpdateOracle(request: DeepPartial<MsgUpdateOracle>, metadata?: grpc.Metadata): Promise<MsgUpdateOracleResponse>;
}
export declare const MsgDesc: {
    serviceName: string;
};
export declare const MsgExecuteMessagesDesc: UnaryMethodDefinitionish;
export declare const MsgSetBridgeInfoDesc: UnaryMethodDefinitionish;
export declare const MsgFinalizeTokenDepositDesc: UnaryMethodDefinitionish;
export declare const MsgInitiateTokenWithdrawalDesc: UnaryMethodDefinitionish;
export declare const MsgAddValidatorDesc: UnaryMethodDefinitionish;
export declare const MsgRemoveValidatorDesc: UnaryMethodDefinitionish;
export declare const MsgUpdateParamsDesc: UnaryMethodDefinitionish;
export declare const MsgSpendFeePoolDesc: UnaryMethodDefinitionish;
export declare const MsgUpdateOracleDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
        upStreamRetryCodes?: number[];
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export declare class GrpcWebError extends Error {
    code: grpc.Code;
    metadata: grpc.Metadata;
    constructor(message: string, code: grpc.Code, metadata: grpc.Metadata);
}
export {};
