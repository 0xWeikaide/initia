"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcWebError = exports.GrpcWebImpl = exports.QueryParamsDesc = exports.QueryOutputProposalsDesc = exports.QueryOutputProposalDesc = exports.QueryLastFinalizedOutputDesc = exports.QueryTokenPairsDesc = exports.QueryTokenPairByL2DenomDesc = exports.QueryTokenPairByL1DenomDesc = exports.QueryBridgesDesc = exports.QueryBridgeDesc = exports.QueryDesc = exports.QueryClientImpl = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.QueryOutputProposalsResponse = exports.QueryOutputProposalsRequest = exports.QueryOutputProposalResponse = exports.QueryOutputProposalRequest = exports.QueryLastFinalizedOutputResponse = exports.QueryLastFinalizedOutputRequest = exports.QueryTokenPairsResponse = exports.QueryTokenPairsRequest = exports.QueryTokenPairByL2DenomResponse = exports.QueryTokenPairByL2DenomRequest = exports.QueryTokenPairByL1DenomResponse = exports.QueryTokenPairByL1DenomRequest = exports.QueryBridgesResponse = exports.QueryBridgesRequest = exports.QueryBridgeResponse = exports.QueryBridgeRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const grpc_web_1 = require("@improbable-eng/grpc-web");
const browser_headers_1 = require("browser-headers");
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const pagination_1 = require("../../../cosmos/base/query/v1beta1/pagination");
const types_1 = require("./types");
exports.protobufPackage = "opinit.ophost.v1";
function createBaseQueryBridgeRequest() {
    return { bridgeId: long_1.default.UZERO };
}
exports.QueryBridgeRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.bridgeId.isZero()) {
            writer.uint32(8).uint64(message.bridgeId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryBridgeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bridgeId = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { bridgeId: isSet(object.bridgeId) ? long_1.default.fromValue(object.bridgeId) : long_1.default.UZERO };
    },
    toJSON(message) {
        const obj = {};
        message.bridgeId !== undefined && (obj.bridgeId = (message.bridgeId || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryBridgeRequest();
        message.bridgeId =
            object.bridgeId !== undefined && object.bridgeId !== null
                ? long_1.default.fromValue(object.bridgeId)
                : long_1.default.UZERO;
        return message;
    },
};
function createBaseQueryBridgeResponse() {
    return { bridgeId: long_1.default.UZERO, bridgeAddr: "", bridgeConfig: undefined };
}
exports.QueryBridgeResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.bridgeId.isZero()) {
            writer.uint32(8).uint64(message.bridgeId);
        }
        if (message.bridgeAddr !== "") {
            writer.uint32(18).string(message.bridgeAddr);
        }
        if (message.bridgeConfig !== undefined) {
            types_1.BridgeConfig.encode(message.bridgeConfig, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryBridgeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bridgeId = reader.uint64();
                    break;
                case 2:
                    message.bridgeAddr = reader.string();
                    break;
                case 3:
                    message.bridgeConfig = types_1.BridgeConfig.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bridgeId: isSet(object.bridgeId) ? long_1.default.fromValue(object.bridgeId) : long_1.default.UZERO,
            bridgeAddr: isSet(object.bridgeAddr) ? String(object.bridgeAddr) : "",
            bridgeConfig: isSet(object.bridgeConfig) ? types_1.BridgeConfig.fromJSON(object.bridgeConfig) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.bridgeId !== undefined && (obj.bridgeId = (message.bridgeId || long_1.default.UZERO).toString());
        message.bridgeAddr !== undefined && (obj.bridgeAddr = message.bridgeAddr);
        message.bridgeConfig !== undefined &&
            (obj.bridgeConfig = message.bridgeConfig ? types_1.BridgeConfig.toJSON(message.bridgeConfig) : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryBridgeResponse();
        message.bridgeId =
            object.bridgeId !== undefined && object.bridgeId !== null
                ? long_1.default.fromValue(object.bridgeId)
                : long_1.default.UZERO;
        message.bridgeAddr = (_a = object.bridgeAddr) !== null && _a !== void 0 ? _a : "";
        message.bridgeConfig =
            object.bridgeConfig !== undefined && object.bridgeConfig !== null
                ? types_1.BridgeConfig.fromPartial(object.bridgeConfig)
                : undefined;
        return message;
    },
};
function createBaseQueryBridgesRequest() {
    return { pagination: undefined };
}
exports.QueryBridgesRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryBridgesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { pagination: isSet(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryBridgesRequest();
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageRequest.fromPartial(object.pagination)
                : undefined;
        return message;
    },
};
function createBaseQueryBridgesResponse() {
    return { bridges: [], pagination: undefined };
}
exports.QueryBridgesResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.bridges) {
            exports.QueryBridgeResponse.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryBridgesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bridges.push(exports.QueryBridgeResponse.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bridges: Array.isArray(object === null || object === void 0 ? void 0 : object.bridges)
                ? object.bridges.map((e) => exports.QueryBridgeResponse.fromJSON(e))
                : [],
            pagination: isSet(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.bridges) {
            obj.bridges = message.bridges.map((e) => (e ? exports.QueryBridgeResponse.toJSON(e) : undefined));
        }
        else {
            obj.bridges = [];
        }
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryBridgesResponse();
        message.bridges = ((_a = object.bridges) === null || _a === void 0 ? void 0 : _a.map((e) => exports.QueryBridgeResponse.fromPartial(e))) || [];
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageResponse.fromPartial(object.pagination)
                : undefined;
        return message;
    },
};
function createBaseQueryTokenPairByL1DenomRequest() {
    return { bridgeId: long_1.default.UZERO, l1Denom: "" };
}
exports.QueryTokenPairByL1DenomRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.bridgeId.isZero()) {
            writer.uint32(8).uint64(message.bridgeId);
        }
        if (message.l1Denom !== "") {
            writer.uint32(18).string(message.l1Denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTokenPairByL1DenomRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bridgeId = reader.uint64();
                    break;
                case 2:
                    message.l1Denom = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bridgeId: isSet(object.bridgeId) ? long_1.default.fromValue(object.bridgeId) : long_1.default.UZERO,
            l1Denom: isSet(object.l1Denom) ? String(object.l1Denom) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.bridgeId !== undefined && (obj.bridgeId = (message.bridgeId || long_1.default.UZERO).toString());
        message.l1Denom !== undefined && (obj.l1Denom = message.l1Denom);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryTokenPairByL1DenomRequest();
        message.bridgeId =
            object.bridgeId !== undefined && object.bridgeId !== null
                ? long_1.default.fromValue(object.bridgeId)
                : long_1.default.UZERO;
        message.l1Denom = (_a = object.l1Denom) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryTokenPairByL1DenomResponse() {
    return { tokenPair: undefined };
}
exports.QueryTokenPairByL1DenomResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.tokenPair !== undefined) {
            types_1.TokenPair.encode(message.tokenPair, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTokenPairByL1DenomResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.tokenPair = types_1.TokenPair.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { tokenPair: isSet(object.tokenPair) ? types_1.TokenPair.fromJSON(object.tokenPair) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.tokenPair !== undefined &&
            (obj.tokenPair = message.tokenPair ? types_1.TokenPair.toJSON(message.tokenPair) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryTokenPairByL1DenomResponse();
        message.tokenPair =
            object.tokenPair !== undefined && object.tokenPair !== null
                ? types_1.TokenPair.fromPartial(object.tokenPair)
                : undefined;
        return message;
    },
};
function createBaseQueryTokenPairByL2DenomRequest() {
    return { bridgeId: long_1.default.UZERO, l2Denom: "" };
}
exports.QueryTokenPairByL2DenomRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.bridgeId.isZero()) {
            writer.uint32(8).uint64(message.bridgeId);
        }
        if (message.l2Denom !== "") {
            writer.uint32(18).string(message.l2Denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTokenPairByL2DenomRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bridgeId = reader.uint64();
                    break;
                case 2:
                    message.l2Denom = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bridgeId: isSet(object.bridgeId) ? long_1.default.fromValue(object.bridgeId) : long_1.default.UZERO,
            l2Denom: isSet(object.l2Denom) ? String(object.l2Denom) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.bridgeId !== undefined && (obj.bridgeId = (message.bridgeId || long_1.default.UZERO).toString());
        message.l2Denom !== undefined && (obj.l2Denom = message.l2Denom);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryTokenPairByL2DenomRequest();
        message.bridgeId =
            object.bridgeId !== undefined && object.bridgeId !== null
                ? long_1.default.fromValue(object.bridgeId)
                : long_1.default.UZERO;
        message.l2Denom = (_a = object.l2Denom) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryTokenPairByL2DenomResponse() {
    return { tokenPair: undefined };
}
exports.QueryTokenPairByL2DenomResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.tokenPair !== undefined) {
            types_1.TokenPair.encode(message.tokenPair, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTokenPairByL2DenomResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.tokenPair = types_1.TokenPair.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { tokenPair: isSet(object.tokenPair) ? types_1.TokenPair.fromJSON(object.tokenPair) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.tokenPair !== undefined &&
            (obj.tokenPair = message.tokenPair ? types_1.TokenPair.toJSON(message.tokenPair) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryTokenPairByL2DenomResponse();
        message.tokenPair =
            object.tokenPair !== undefined && object.tokenPair !== null
                ? types_1.TokenPair.fromPartial(object.tokenPair)
                : undefined;
        return message;
    },
};
function createBaseQueryTokenPairsRequest() {
    return { bridgeId: long_1.default.UZERO, pagination: undefined };
}
exports.QueryTokenPairsRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.bridgeId.isZero()) {
            writer.uint32(8).uint64(message.bridgeId);
        }
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTokenPairsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bridgeId = reader.uint64();
                    break;
                case 2:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bridgeId: isSet(object.bridgeId) ? long_1.default.fromValue(object.bridgeId) : long_1.default.UZERO,
            pagination: isSet(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.bridgeId !== undefined && (obj.bridgeId = (message.bridgeId || long_1.default.UZERO).toString());
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryTokenPairsRequest();
        message.bridgeId =
            object.bridgeId !== undefined && object.bridgeId !== null
                ? long_1.default.fromValue(object.bridgeId)
                : long_1.default.UZERO;
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageRequest.fromPartial(object.pagination)
                : undefined;
        return message;
    },
};
function createBaseQueryTokenPairsResponse() {
    return { tokenPairs: [], pagination: undefined };
}
exports.QueryTokenPairsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.tokenPairs) {
            types_1.TokenPair.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTokenPairsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.tokenPairs.push(types_1.TokenPair.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            tokenPairs: Array.isArray(object === null || object === void 0 ? void 0 : object.tokenPairs)
                ? object.tokenPairs.map((e) => types_1.TokenPair.fromJSON(e))
                : [],
            pagination: isSet(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.tokenPairs) {
            obj.tokenPairs = message.tokenPairs.map((e) => (e ? types_1.TokenPair.toJSON(e) : undefined));
        }
        else {
            obj.tokenPairs = [];
        }
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryTokenPairsResponse();
        message.tokenPairs = ((_a = object.tokenPairs) === null || _a === void 0 ? void 0 : _a.map((e) => types_1.TokenPair.fromPartial(e))) || [];
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageResponse.fromPartial(object.pagination)
                : undefined;
        return message;
    },
};
function createBaseQueryLastFinalizedOutputRequest() {
    return { bridgeId: long_1.default.UZERO };
}
exports.QueryLastFinalizedOutputRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.bridgeId.isZero()) {
            writer.uint32(8).uint64(message.bridgeId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryLastFinalizedOutputRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bridgeId = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { bridgeId: isSet(object.bridgeId) ? long_1.default.fromValue(object.bridgeId) : long_1.default.UZERO };
    },
    toJSON(message) {
        const obj = {};
        message.bridgeId !== undefined && (obj.bridgeId = (message.bridgeId || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryLastFinalizedOutputRequest();
        message.bridgeId =
            object.bridgeId !== undefined && object.bridgeId !== null
                ? long_1.default.fromValue(object.bridgeId)
                : long_1.default.UZERO;
        return message;
    },
};
function createBaseQueryLastFinalizedOutputResponse() {
    return { outputIndex: long_1.default.UZERO, outputProposal: undefined };
}
exports.QueryLastFinalizedOutputResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.outputIndex.isZero()) {
            writer.uint32(8).uint64(message.outputIndex);
        }
        if (message.outputProposal !== undefined) {
            types_1.Output.encode(message.outputProposal, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryLastFinalizedOutputResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.outputIndex = reader.uint64();
                    break;
                case 2:
                    message.outputProposal = types_1.Output.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            outputIndex: isSet(object.outputIndex) ? long_1.default.fromValue(object.outputIndex) : long_1.default.UZERO,
            outputProposal: isSet(object.outputProposal) ? types_1.Output.fromJSON(object.outputProposal) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.outputIndex !== undefined && (obj.outputIndex = (message.outputIndex || long_1.default.UZERO).toString());
        message.outputProposal !== undefined &&
            (obj.outputProposal = message.outputProposal ? types_1.Output.toJSON(message.outputProposal) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryLastFinalizedOutputResponse();
        message.outputIndex =
            object.outputIndex !== undefined && object.outputIndex !== null
                ? long_1.default.fromValue(object.outputIndex)
                : long_1.default.UZERO;
        message.outputProposal =
            object.outputProposal !== undefined && object.outputProposal !== null
                ? types_1.Output.fromPartial(object.outputProposal)
                : undefined;
        return message;
    },
};
function createBaseQueryOutputProposalRequest() {
    return { bridgeId: long_1.default.UZERO, outputIndex: long_1.default.UZERO };
}
exports.QueryOutputProposalRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.bridgeId.isZero()) {
            writer.uint32(8).uint64(message.bridgeId);
        }
        if (!message.outputIndex.isZero()) {
            writer.uint32(16).uint64(message.outputIndex);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryOutputProposalRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bridgeId = reader.uint64();
                    break;
                case 2:
                    message.outputIndex = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bridgeId: isSet(object.bridgeId) ? long_1.default.fromValue(object.bridgeId) : long_1.default.UZERO,
            outputIndex: isSet(object.outputIndex) ? long_1.default.fromValue(object.outputIndex) : long_1.default.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.bridgeId !== undefined && (obj.bridgeId = (message.bridgeId || long_1.default.UZERO).toString());
        message.outputIndex !== undefined && (obj.outputIndex = (message.outputIndex || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryOutputProposalRequest();
        message.bridgeId =
            object.bridgeId !== undefined && object.bridgeId !== null
                ? long_1.default.fromValue(object.bridgeId)
                : long_1.default.UZERO;
        message.outputIndex =
            object.outputIndex !== undefined && object.outputIndex !== null
                ? long_1.default.fromValue(object.outputIndex)
                : long_1.default.UZERO;
        return message;
    },
};
function createBaseQueryOutputProposalResponse() {
    return { bridgeId: long_1.default.UZERO, outputIndex: long_1.default.UZERO, outputProposal: undefined };
}
exports.QueryOutputProposalResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.bridgeId.isZero()) {
            writer.uint32(8).uint64(message.bridgeId);
        }
        if (!message.outputIndex.isZero()) {
            writer.uint32(16).uint64(message.outputIndex);
        }
        if (message.outputProposal !== undefined) {
            types_1.Output.encode(message.outputProposal, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryOutputProposalResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bridgeId = reader.uint64();
                    break;
                case 2:
                    message.outputIndex = reader.uint64();
                    break;
                case 3:
                    message.outputProposal = types_1.Output.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bridgeId: isSet(object.bridgeId) ? long_1.default.fromValue(object.bridgeId) : long_1.default.UZERO,
            outputIndex: isSet(object.outputIndex) ? long_1.default.fromValue(object.outputIndex) : long_1.default.UZERO,
            outputProposal: isSet(object.outputProposal) ? types_1.Output.fromJSON(object.outputProposal) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.bridgeId !== undefined && (obj.bridgeId = (message.bridgeId || long_1.default.UZERO).toString());
        message.outputIndex !== undefined && (obj.outputIndex = (message.outputIndex || long_1.default.UZERO).toString());
        message.outputProposal !== undefined &&
            (obj.outputProposal = message.outputProposal ? types_1.Output.toJSON(message.outputProposal) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryOutputProposalResponse();
        message.bridgeId =
            object.bridgeId !== undefined && object.bridgeId !== null
                ? long_1.default.fromValue(object.bridgeId)
                : long_1.default.UZERO;
        message.outputIndex =
            object.outputIndex !== undefined && object.outputIndex !== null
                ? long_1.default.fromValue(object.outputIndex)
                : long_1.default.UZERO;
        message.outputProposal =
            object.outputProposal !== undefined && object.outputProposal !== null
                ? types_1.Output.fromPartial(object.outputProposal)
                : undefined;
        return message;
    },
};
function createBaseQueryOutputProposalsRequest() {
    return { bridgeId: long_1.default.UZERO, outputIndex: long_1.default.UZERO, pagination: undefined };
}
exports.QueryOutputProposalsRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.bridgeId.isZero()) {
            writer.uint32(8).uint64(message.bridgeId);
        }
        if (!message.outputIndex.isZero()) {
            writer.uint32(16).uint64(message.outputIndex);
        }
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryOutputProposalsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bridgeId = reader.uint64();
                    break;
                case 2:
                    message.outputIndex = reader.uint64();
                    break;
                case 3:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bridgeId: isSet(object.bridgeId) ? long_1.default.fromValue(object.bridgeId) : long_1.default.UZERO,
            outputIndex: isSet(object.outputIndex) ? long_1.default.fromValue(object.outputIndex) : long_1.default.UZERO,
            pagination: isSet(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.bridgeId !== undefined && (obj.bridgeId = (message.bridgeId || long_1.default.UZERO).toString());
        message.outputIndex !== undefined && (obj.outputIndex = (message.outputIndex || long_1.default.UZERO).toString());
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryOutputProposalsRequest();
        message.bridgeId =
            object.bridgeId !== undefined && object.bridgeId !== null
                ? long_1.default.fromValue(object.bridgeId)
                : long_1.default.UZERO;
        message.outputIndex =
            object.outputIndex !== undefined && object.outputIndex !== null
                ? long_1.default.fromValue(object.outputIndex)
                : long_1.default.UZERO;
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageRequest.fromPartial(object.pagination)
                : undefined;
        return message;
    },
};
function createBaseQueryOutputProposalsResponse() {
    return { outputProposals: [], pagination: undefined };
}
exports.QueryOutputProposalsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.outputProposals) {
            exports.QueryOutputProposalResponse.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryOutputProposalsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.outputProposals.push(exports.QueryOutputProposalResponse.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            outputProposals: Array.isArray(object === null || object === void 0 ? void 0 : object.outputProposals)
                ? object.outputProposals.map((e) => exports.QueryOutputProposalResponse.fromJSON(e))
                : [],
            pagination: isSet(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.outputProposals) {
            obj.outputProposals = message.outputProposals.map((e) => e ? exports.QueryOutputProposalResponse.toJSON(e) : undefined);
        }
        else {
            obj.outputProposals = [];
        }
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryOutputProposalsResponse();
        message.outputProposals =
            ((_a = object.outputProposals) === null || _a === void 0 ? void 0 : _a.map((e) => exports.QueryOutputProposalResponse.fromPartial(e))) || [];
        message.pagination =
            object.pagination !== undefined && object.pagination !== null
                ? pagination_1.PageResponse.fromPartial(object.pagination)
                : undefined;
        return message;
    },
};
function createBaseQueryParamsRequest() {
    return {};
}
exports.QueryParamsRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
};
function createBaseQueryParamsResponse() {
    return { params: undefined };
}
exports.QueryParamsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.params !== undefined) {
            types_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = types_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { params: isSet(object.params) ? types_1.Params.fromJSON(object.params) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? types_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params =
            object.params !== undefined && object.params !== null ? types_1.Params.fromPartial(object.params) : undefined;
        return message;
    },
};
class QueryClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.Bridge = this.Bridge.bind(this);
        this.Bridges = this.Bridges.bind(this);
        this.TokenPairByL1Denom = this.TokenPairByL1Denom.bind(this);
        this.TokenPairByL2Denom = this.TokenPairByL2Denom.bind(this);
        this.TokenPairs = this.TokenPairs.bind(this);
        this.LastFinalizedOutput = this.LastFinalizedOutput.bind(this);
        this.OutputProposal = this.OutputProposal.bind(this);
        this.OutputProposals = this.OutputProposals.bind(this);
        this.Params = this.Params.bind(this);
    }
    Bridge(request, metadata) {
        return this.rpc.unary(exports.QueryBridgeDesc, exports.QueryBridgeRequest.fromPartial(request), metadata);
    }
    Bridges(request, metadata) {
        return this.rpc.unary(exports.QueryBridgesDesc, exports.QueryBridgesRequest.fromPartial(request), metadata);
    }
    TokenPairByL1Denom(request, metadata) {
        return this.rpc.unary(exports.QueryTokenPairByL1DenomDesc, exports.QueryTokenPairByL1DenomRequest.fromPartial(request), metadata);
    }
    TokenPairByL2Denom(request, metadata) {
        return this.rpc.unary(exports.QueryTokenPairByL2DenomDesc, exports.QueryTokenPairByL2DenomRequest.fromPartial(request), metadata);
    }
    TokenPairs(request, metadata) {
        return this.rpc.unary(exports.QueryTokenPairsDesc, exports.QueryTokenPairsRequest.fromPartial(request), metadata);
    }
    LastFinalizedOutput(request, metadata) {
        return this.rpc.unary(exports.QueryLastFinalizedOutputDesc, exports.QueryLastFinalizedOutputRequest.fromPartial(request), metadata);
    }
    OutputProposal(request, metadata) {
        return this.rpc.unary(exports.QueryOutputProposalDesc, exports.QueryOutputProposalRequest.fromPartial(request), metadata);
    }
    OutputProposals(request, metadata) {
        return this.rpc.unary(exports.QueryOutputProposalsDesc, exports.QueryOutputProposalsRequest.fromPartial(request), metadata);
    }
    Params(request, metadata) {
        return this.rpc.unary(exports.QueryParamsDesc, exports.QueryParamsRequest.fromPartial(request), metadata);
    }
}
exports.QueryClientImpl = QueryClientImpl;
exports.QueryDesc = { serviceName: "opinit.ophost.v1.Query" };
exports.QueryBridgeDesc = {
    methodName: "Bridge",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryBridgeRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryBridgeResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryBridgesDesc = {
    methodName: "Bridges",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryBridgesRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryBridgesResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryTokenPairByL1DenomDesc = {
    methodName: "TokenPairByL1Denom",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryTokenPairByL1DenomRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryTokenPairByL1DenomResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryTokenPairByL2DenomDesc = {
    methodName: "TokenPairByL2Denom",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryTokenPairByL2DenomRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryTokenPairByL2DenomResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryTokenPairsDesc = {
    methodName: "TokenPairs",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryTokenPairsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryTokenPairsResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryLastFinalizedOutputDesc = {
    methodName: "LastFinalizedOutput",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryLastFinalizedOutputRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryLastFinalizedOutputResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryOutputProposalDesc = {
    methodName: "OutputProposal",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryOutputProposalRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryOutputProposalResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryOutputProposalsDesc = {
    methodName: "OutputProposals",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryOutputProposalsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryOutputProposalsResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryParamsDesc = {
    methodName: "Params",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryParamsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryParamsResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        var _a;
        const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_1.BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap))
            : metadata || this.options.metadata;
        return new Promise((resolve, reject) => {
            grpc_web_1.grpc.unary(methodDesc, {
                request,
                host: this.host,
                metadata: maybeCombinedMetadata,
                transport: this.options.transport,
                debug: this.options.debug,
                onEnd: function (response) {
                    if (response.status === grpc_web_1.grpc.Code.OK) {
                        resolve(response.message);
                    }
                    else {
                        const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
                        reject(err);
                    }
                },
            });
        });
    }
}
exports.GrpcWebImpl = GrpcWebImpl;
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
class GrpcWebError extends Error {
    constructor(message, code, metadata) {
        super(message);
        this.code = code;
        this.metadata = metadata;
    }
}
exports.GrpcWebError = GrpcWebError;
//# sourceMappingURL=query.js.map