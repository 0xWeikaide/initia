"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WrappedOutput = exports.Bridge = exports.GenesisState = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const types_1 = require("./types");
exports.protobufPackage = "opinit.ophost.v1";
function createBaseGenesisState() {
    return { params: undefined, bridges: [], nextBridgeId: long_1.default.UZERO };
}
exports.GenesisState = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.params !== undefined) {
            types_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.bridges) {
            exports.Bridge.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (!message.nextBridgeId.isZero()) {
            writer.uint32(24).uint64(message.nextBridgeId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = types_1.Params.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.bridges.push(exports.Bridge.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.nextBridgeId = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: isSet(object.params) ? types_1.Params.fromJSON(object.params) : undefined,
            bridges: Array.isArray(object === null || object === void 0 ? void 0 : object.bridges) ? object.bridges.map((e) => exports.Bridge.fromJSON(e)) : [],
            nextBridgeId: isSet(object.nextBridgeId) ? long_1.default.fromValue(object.nextBridgeId) : long_1.default.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? types_1.Params.toJSON(message.params) : undefined);
        if (message.bridges) {
            obj.bridges = message.bridges.map((e) => (e ? exports.Bridge.toJSON(e) : undefined));
        }
        else {
            obj.bridges = [];
        }
        message.nextBridgeId !== undefined &&
            (obj.nextBridgeId = (message.nextBridgeId || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGenesisState();
        message.params =
            object.params !== undefined && object.params !== null ? types_1.Params.fromPartial(object.params) : undefined;
        message.bridges = ((_a = object.bridges) === null || _a === void 0 ? void 0 : _a.map((e) => exports.Bridge.fromPartial(e))) || [];
        message.nextBridgeId =
            object.nextBridgeId !== undefined && object.nextBridgeId !== null
                ? long_1.default.fromValue(object.nextBridgeId)
                : long_1.default.UZERO;
        return message;
    },
};
function createBaseBridge() {
    return {
        bridgeId: long_1.default.UZERO,
        nextL1Sequence: long_1.default.UZERO,
        nextOutputIndex: long_1.default.UZERO,
        bridgeConfig: undefined,
        tokenPairs: [],
        provenWithdrawals: [],
        proposals: [],
    };
}
exports.Bridge = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.bridgeId.isZero()) {
            writer.uint32(8).uint64(message.bridgeId);
        }
        if (!message.nextL1Sequence.isZero()) {
            writer.uint32(16).uint64(message.nextL1Sequence);
        }
        if (!message.nextOutputIndex.isZero()) {
            writer.uint32(24).uint64(message.nextOutputIndex);
        }
        if (message.bridgeConfig !== undefined) {
            types_1.BridgeConfig.encode(message.bridgeConfig, writer.uint32(34).fork()).ldelim();
        }
        for (const v of message.tokenPairs) {
            types_1.TokenPair.encode(v, writer.uint32(42).fork()).ldelim();
        }
        for (const v of message.provenWithdrawals) {
            writer.uint32(50).bytes(v);
        }
        for (const v of message.proposals) {
            exports.WrappedOutput.encode(v, writer.uint32(58).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBridge();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bridgeId = reader.uint64();
                    break;
                case 2:
                    message.nextL1Sequence = reader.uint64();
                    break;
                case 3:
                    message.nextOutputIndex = reader.uint64();
                    break;
                case 4:
                    message.bridgeConfig = types_1.BridgeConfig.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.tokenPairs.push(types_1.TokenPair.decode(reader, reader.uint32()));
                    break;
                case 6:
                    message.provenWithdrawals.push(reader.bytes());
                    break;
                case 7:
                    message.proposals.push(exports.WrappedOutput.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bridgeId: isSet(object.bridgeId) ? long_1.default.fromValue(object.bridgeId) : long_1.default.UZERO,
            nextL1Sequence: isSet(object.nextL1Sequence) ? long_1.default.fromValue(object.nextL1Sequence) : long_1.default.UZERO,
            nextOutputIndex: isSet(object.nextOutputIndex) ? long_1.default.fromValue(object.nextOutputIndex) : long_1.default.UZERO,
            bridgeConfig: isSet(object.bridgeConfig) ? types_1.BridgeConfig.fromJSON(object.bridgeConfig) : undefined,
            tokenPairs: Array.isArray(object === null || object === void 0 ? void 0 : object.tokenPairs)
                ? object.tokenPairs.map((e) => types_1.TokenPair.fromJSON(e))
                : [],
            provenWithdrawals: Array.isArray(object === null || object === void 0 ? void 0 : object.provenWithdrawals)
                ? object.provenWithdrawals.map((e) => bytesFromBase64(e))
                : [],
            proposals: Array.isArray(object === null || object === void 0 ? void 0 : object.proposals)
                ? object.proposals.map((e) => exports.WrappedOutput.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.bridgeId !== undefined && (obj.bridgeId = (message.bridgeId || long_1.default.UZERO).toString());
        message.nextL1Sequence !== undefined &&
            (obj.nextL1Sequence = (message.nextL1Sequence || long_1.default.UZERO).toString());
        message.nextOutputIndex !== undefined &&
            (obj.nextOutputIndex = (message.nextOutputIndex || long_1.default.UZERO).toString());
        message.bridgeConfig !== undefined &&
            (obj.bridgeConfig = message.bridgeConfig ? types_1.BridgeConfig.toJSON(message.bridgeConfig) : undefined);
        if (message.tokenPairs) {
            obj.tokenPairs = message.tokenPairs.map((e) => (e ? types_1.TokenPair.toJSON(e) : undefined));
        }
        else {
            obj.tokenPairs = [];
        }
        if (message.provenWithdrawals) {
            obj.provenWithdrawals = message.provenWithdrawals.map((e) => base64FromBytes(e !== undefined ? e : new Uint8Array()));
        }
        else {
            obj.provenWithdrawals = [];
        }
        if (message.proposals) {
            obj.proposals = message.proposals.map((e) => (e ? exports.WrappedOutput.toJSON(e) : undefined));
        }
        else {
            obj.proposals = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseBridge();
        message.bridgeId =
            object.bridgeId !== undefined && object.bridgeId !== null
                ? long_1.default.fromValue(object.bridgeId)
                : long_1.default.UZERO;
        message.nextL1Sequence =
            object.nextL1Sequence !== undefined && object.nextL1Sequence !== null
                ? long_1.default.fromValue(object.nextL1Sequence)
                : long_1.default.UZERO;
        message.nextOutputIndex =
            object.nextOutputIndex !== undefined && object.nextOutputIndex !== null
                ? long_1.default.fromValue(object.nextOutputIndex)
                : long_1.default.UZERO;
        message.bridgeConfig =
            object.bridgeConfig !== undefined && object.bridgeConfig !== null
                ? types_1.BridgeConfig.fromPartial(object.bridgeConfig)
                : undefined;
        message.tokenPairs = ((_a = object.tokenPairs) === null || _a === void 0 ? void 0 : _a.map((e) => types_1.TokenPair.fromPartial(e))) || [];
        message.provenWithdrawals = ((_b = object.provenWithdrawals) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.proposals = ((_c = object.proposals) === null || _c === void 0 ? void 0 : _c.map((e) => exports.WrappedOutput.fromPartial(e))) || [];
        return message;
    },
};
function createBaseWrappedOutput() {
    return { outputIndex: long_1.default.UZERO, outputProposal: undefined };
}
exports.WrappedOutput = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.outputIndex.isZero()) {
            writer.uint32(8).uint64(message.outputIndex);
        }
        if (message.outputProposal !== undefined) {
            types_1.Output.encode(message.outputProposal, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWrappedOutput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.outputIndex = reader.uint64();
                    break;
                case 2:
                    message.outputProposal = types_1.Output.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            outputIndex: isSet(object.outputIndex) ? long_1.default.fromValue(object.outputIndex) : long_1.default.UZERO,
            outputProposal: isSet(object.outputProposal) ? types_1.Output.fromJSON(object.outputProposal) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.outputIndex !== undefined && (obj.outputIndex = (message.outputIndex || long_1.default.UZERO).toString());
        message.outputProposal !== undefined &&
            (obj.outputProposal = message.outputProposal ? types_1.Output.toJSON(message.outputProposal) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseWrappedOutput();
        message.outputIndex =
            object.outputIndex !== undefined && object.outputIndex !== null
                ? long_1.default.fromValue(object.outputIndex)
                : long_1.default.UZERO;
        message.outputProposal =
            object.outputProposal !== undefined && object.outputProposal !== null
                ? types_1.Output.fromPartial(object.outputProposal)
                : undefined;
        return message;
    },
};
var globalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=genesis.js.map