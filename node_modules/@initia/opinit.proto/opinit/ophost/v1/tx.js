"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcWebError = exports.GrpcWebImpl = exports.MsgUpdateParamsDesc = exports.MsgUpdateMetadataDesc = exports.MsgUpdateBatchInfoDesc = exports.MsgUpdateChallengerDesc = exports.MsgUpdateProposerDesc = exports.MsgFinalizeTokenWithdrawalDesc = exports.MsgInitiateTokenDepositDesc = exports.MsgDeleteOutputDesc = exports.MsgProposeOutputDesc = exports.MsgCreateBridgeDesc = exports.MsgRecordBatchDesc = exports.MsgDesc = exports.MsgClientImpl = exports.MsgUpdateParamsResponse = exports.MsgUpdateParams = exports.MsgUpdateMetadataResponse = exports.MsgUpdateMetadata = exports.MsgUpdateBatchInfoResponse = exports.MsgUpdateBatchInfo = exports.MsgUpdateChallengerResponse = exports.MsgUpdateChallenger = exports.MsgUpdateProposerResponse = exports.MsgUpdateProposer = exports.MsgFinalizeTokenWithdrawalResponse = exports.MsgFinalizeTokenWithdrawal = exports.MsgInitiateTokenDepositResponse = exports.MsgInitiateTokenDeposit = exports.MsgDeleteOutputResponse = exports.MsgDeleteOutput = exports.MsgProposeOutputResponse = exports.MsgProposeOutput = exports.MsgCreateBridgeResponse = exports.MsgCreateBridge = exports.MsgRecordBatchResponse = exports.MsgRecordBatch = exports.protobufPackage = void 0;
/* eslint-disable */
const grpc_web_1 = require("@improbable-eng/grpc-web");
const browser_headers_1 = require("browser-headers");
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
const types_1 = require("./types");
exports.protobufPackage = "opinit.ophost.v1";
function createBaseMsgRecordBatch() {
    return { submitter: "", bridgeId: long_1.default.UZERO, batchBytes: new Uint8Array() };
}
exports.MsgRecordBatch = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.submitter !== "") {
            writer.uint32(10).string(message.submitter);
        }
        if (!message.bridgeId.isZero()) {
            writer.uint32(16).uint64(message.bridgeId);
        }
        if (message.batchBytes.length !== 0) {
            writer.uint32(26).bytes(message.batchBytes);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgRecordBatch();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.submitter = reader.string();
                    break;
                case 2:
                    message.bridgeId = reader.uint64();
                    break;
                case 3:
                    message.batchBytes = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            submitter: isSet(object.submitter) ? String(object.submitter) : "",
            bridgeId: isSet(object.bridgeId) ? long_1.default.fromValue(object.bridgeId) : long_1.default.UZERO,
            batchBytes: isSet(object.batchBytes) ? bytesFromBase64(object.batchBytes) : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.submitter !== undefined && (obj.submitter = message.submitter);
        message.bridgeId !== undefined && (obj.bridgeId = (message.bridgeId || long_1.default.UZERO).toString());
        message.batchBytes !== undefined &&
            (obj.batchBytes = base64FromBytes(message.batchBytes !== undefined ? message.batchBytes : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgRecordBatch();
        message.submitter = (_a = object.submitter) !== null && _a !== void 0 ? _a : "";
        message.bridgeId =
            object.bridgeId !== undefined && object.bridgeId !== null
                ? long_1.default.fromValue(object.bridgeId)
                : long_1.default.UZERO;
        message.batchBytes = (_b = object.batchBytes) !== null && _b !== void 0 ? _b : new Uint8Array();
        return message;
    },
};
function createBaseMsgRecordBatchResponse() {
    return {};
}
exports.MsgRecordBatchResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgRecordBatchResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgRecordBatchResponse();
        return message;
    },
};
function createBaseMsgCreateBridge() {
    return { creator: "", config: undefined };
}
exports.MsgCreateBridge = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.creator !== "") {
            writer.uint32(10).string(message.creator);
        }
        if (message.config !== undefined) {
            types_1.BridgeConfig.encode(message.config, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateBridge();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.creator = reader.string();
                    break;
                case 2:
                    message.config = types_1.BridgeConfig.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            creator: isSet(object.creator) ? String(object.creator) : "",
            config: isSet(object.config) ? types_1.BridgeConfig.fromJSON(object.config) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.creator !== undefined && (obj.creator = message.creator);
        message.config !== undefined &&
            (obj.config = message.config ? types_1.BridgeConfig.toJSON(message.config) : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgCreateBridge();
        message.creator = (_a = object.creator) !== null && _a !== void 0 ? _a : "";
        message.config =
            object.config !== undefined && object.config !== null
                ? types_1.BridgeConfig.fromPartial(object.config)
                : undefined;
        return message;
    },
};
function createBaseMsgCreateBridgeResponse() {
    return { bridgeId: long_1.default.UZERO };
}
exports.MsgCreateBridgeResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.bridgeId.isZero()) {
            writer.uint32(8).uint64(message.bridgeId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateBridgeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bridgeId = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { bridgeId: isSet(object.bridgeId) ? long_1.default.fromValue(object.bridgeId) : long_1.default.UZERO };
    },
    toJSON(message) {
        const obj = {};
        message.bridgeId !== undefined && (obj.bridgeId = (message.bridgeId || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgCreateBridgeResponse();
        message.bridgeId =
            object.bridgeId !== undefined && object.bridgeId !== null
                ? long_1.default.fromValue(object.bridgeId)
                : long_1.default.UZERO;
        return message;
    },
};
function createBaseMsgProposeOutput() {
    return { proposer: "", bridgeId: long_1.default.UZERO, l2BlockNumber: long_1.default.UZERO, outputRoot: new Uint8Array() };
}
exports.MsgProposeOutput = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.proposer !== "") {
            writer.uint32(10).string(message.proposer);
        }
        if (!message.bridgeId.isZero()) {
            writer.uint32(16).uint64(message.bridgeId);
        }
        if (!message.l2BlockNumber.isZero()) {
            writer.uint32(24).uint64(message.l2BlockNumber);
        }
        if (message.outputRoot.length !== 0) {
            writer.uint32(34).bytes(message.outputRoot);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgProposeOutput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.proposer = reader.string();
                    break;
                case 2:
                    message.bridgeId = reader.uint64();
                    break;
                case 3:
                    message.l2BlockNumber = reader.uint64();
                    break;
                case 4:
                    message.outputRoot = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            proposer: isSet(object.proposer) ? String(object.proposer) : "",
            bridgeId: isSet(object.bridgeId) ? long_1.default.fromValue(object.bridgeId) : long_1.default.UZERO,
            l2BlockNumber: isSet(object.l2BlockNumber) ? long_1.default.fromValue(object.l2BlockNumber) : long_1.default.UZERO,
            outputRoot: isSet(object.outputRoot) ? bytesFromBase64(object.outputRoot) : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.proposer !== undefined && (obj.proposer = message.proposer);
        message.bridgeId !== undefined && (obj.bridgeId = (message.bridgeId || long_1.default.UZERO).toString());
        message.l2BlockNumber !== undefined &&
            (obj.l2BlockNumber = (message.l2BlockNumber || long_1.default.UZERO).toString());
        message.outputRoot !== undefined &&
            (obj.outputRoot = base64FromBytes(message.outputRoot !== undefined ? message.outputRoot : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgProposeOutput();
        message.proposer = (_a = object.proposer) !== null && _a !== void 0 ? _a : "";
        message.bridgeId =
            object.bridgeId !== undefined && object.bridgeId !== null
                ? long_1.default.fromValue(object.bridgeId)
                : long_1.default.UZERO;
        message.l2BlockNumber =
            object.l2BlockNumber !== undefined && object.l2BlockNumber !== null
                ? long_1.default.fromValue(object.l2BlockNumber)
                : long_1.default.UZERO;
        message.outputRoot = (_b = object.outputRoot) !== null && _b !== void 0 ? _b : new Uint8Array();
        return message;
    },
};
function createBaseMsgProposeOutputResponse() {
    return { outputIndex: long_1.default.UZERO };
}
exports.MsgProposeOutputResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.outputIndex.isZero()) {
            writer.uint32(8).uint64(message.outputIndex);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgProposeOutputResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.outputIndex = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { outputIndex: isSet(object.outputIndex) ? long_1.default.fromValue(object.outputIndex) : long_1.default.UZERO };
    },
    toJSON(message) {
        const obj = {};
        message.outputIndex !== undefined && (obj.outputIndex = (message.outputIndex || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgProposeOutputResponse();
        message.outputIndex =
            object.outputIndex !== undefined && object.outputIndex !== null
                ? long_1.default.fromValue(object.outputIndex)
                : long_1.default.UZERO;
        return message;
    },
};
function createBaseMsgDeleteOutput() {
    return { challenger: "", bridgeId: long_1.default.UZERO, outputIndex: long_1.default.UZERO };
}
exports.MsgDeleteOutput = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.challenger !== "") {
            writer.uint32(10).string(message.challenger);
        }
        if (!message.bridgeId.isZero()) {
            writer.uint32(16).uint64(message.bridgeId);
        }
        if (!message.outputIndex.isZero()) {
            writer.uint32(24).uint64(message.outputIndex);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDeleteOutput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.challenger = reader.string();
                    break;
                case 2:
                    message.bridgeId = reader.uint64();
                    break;
                case 3:
                    message.outputIndex = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            challenger: isSet(object.challenger) ? String(object.challenger) : "",
            bridgeId: isSet(object.bridgeId) ? long_1.default.fromValue(object.bridgeId) : long_1.default.UZERO,
            outputIndex: isSet(object.outputIndex) ? long_1.default.fromValue(object.outputIndex) : long_1.default.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.challenger !== undefined && (obj.challenger = message.challenger);
        message.bridgeId !== undefined && (obj.bridgeId = (message.bridgeId || long_1.default.UZERO).toString());
        message.outputIndex !== undefined && (obj.outputIndex = (message.outputIndex || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgDeleteOutput();
        message.challenger = (_a = object.challenger) !== null && _a !== void 0 ? _a : "";
        message.bridgeId =
            object.bridgeId !== undefined && object.bridgeId !== null
                ? long_1.default.fromValue(object.bridgeId)
                : long_1.default.UZERO;
        message.outputIndex =
            object.outputIndex !== undefined && object.outputIndex !== null
                ? long_1.default.fromValue(object.outputIndex)
                : long_1.default.UZERO;
        return message;
    },
};
function createBaseMsgDeleteOutputResponse() {
    return {};
}
exports.MsgDeleteOutputResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDeleteOutputResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgDeleteOutputResponse();
        return message;
    },
};
function createBaseMsgInitiateTokenDeposit() {
    return { sender: "", bridgeId: long_1.default.UZERO, to: "", amount: undefined, data: new Uint8Array() };
}
exports.MsgInitiateTokenDeposit = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (!message.bridgeId.isZero()) {
            writer.uint32(16).uint64(message.bridgeId);
        }
        if (message.to !== "") {
            writer.uint32(26).string(message.to);
        }
        if (message.amount !== undefined) {
            coin_1.Coin.encode(message.amount, writer.uint32(34).fork()).ldelim();
        }
        if (message.data.length !== 0) {
            writer.uint32(42).bytes(message.data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgInitiateTokenDeposit();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.bridgeId = reader.uint64();
                    break;
                case 3:
                    message.to = reader.string();
                    break;
                case 4:
                    message.amount = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.data = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? String(object.sender) : "",
            bridgeId: isSet(object.bridgeId) ? long_1.default.fromValue(object.bridgeId) : long_1.default.UZERO,
            to: isSet(object.to) ? String(object.to) : "",
            amount: isSet(object.amount) ? coin_1.Coin.fromJSON(object.amount) : undefined,
            data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.sender !== undefined && (obj.sender = message.sender);
        message.bridgeId !== undefined && (obj.bridgeId = (message.bridgeId || long_1.default.UZERO).toString());
        message.to !== undefined && (obj.to = message.to);
        message.amount !== undefined && (obj.amount = message.amount ? coin_1.Coin.toJSON(message.amount) : undefined);
        message.data !== undefined &&
            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseMsgInitiateTokenDeposit();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.bridgeId =
            object.bridgeId !== undefined && object.bridgeId !== null
                ? long_1.default.fromValue(object.bridgeId)
                : long_1.default.UZERO;
        message.to = (_b = object.to) !== null && _b !== void 0 ? _b : "";
        message.amount =
            object.amount !== undefined && object.amount !== null ? coin_1.Coin.fromPartial(object.amount) : undefined;
        message.data = (_c = object.data) !== null && _c !== void 0 ? _c : new Uint8Array();
        return message;
    },
};
function createBaseMsgInitiateTokenDepositResponse() {
    return { sequence: long_1.default.UZERO };
}
exports.MsgInitiateTokenDepositResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.sequence.isZero()) {
            writer.uint32(8).uint64(message.sequence);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgInitiateTokenDepositResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sequence = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { sequence: isSet(object.sequence) ? long_1.default.fromValue(object.sequence) : long_1.default.UZERO };
    },
    toJSON(message) {
        const obj = {};
        message.sequence !== undefined && (obj.sequence = (message.sequence || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgInitiateTokenDepositResponse();
        message.sequence =
            object.sequence !== undefined && object.sequence !== null
                ? long_1.default.fromValue(object.sequence)
                : long_1.default.UZERO;
        return message;
    },
};
function createBaseMsgFinalizeTokenWithdrawal() {
    return {
        bridgeId: long_1.default.UZERO,
        outputIndex: long_1.default.UZERO,
        withdrawalProofs: [],
        sender: "",
        receiver: "",
        sequence: long_1.default.UZERO,
        amount: undefined,
        version: new Uint8Array(),
        stateRoot: new Uint8Array(),
        storageRoot: new Uint8Array(),
        latestBlockHash: new Uint8Array(),
    };
}
exports.MsgFinalizeTokenWithdrawal = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.bridgeId.isZero()) {
            writer.uint32(16).uint64(message.bridgeId);
        }
        if (!message.outputIndex.isZero()) {
            writer.uint32(24).uint64(message.outputIndex);
        }
        for (const v of message.withdrawalProofs) {
            writer.uint32(34).bytes(v);
        }
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.receiver !== "") {
            writer.uint32(42).string(message.receiver);
        }
        if (!message.sequence.isZero()) {
            writer.uint32(48).uint64(message.sequence);
        }
        if (message.amount !== undefined) {
            coin_1.Coin.encode(message.amount, writer.uint32(58).fork()).ldelim();
        }
        if (message.version.length !== 0) {
            writer.uint32(66).bytes(message.version);
        }
        if (message.stateRoot.length !== 0) {
            writer.uint32(74).bytes(message.stateRoot);
        }
        if (message.storageRoot.length !== 0) {
            writer.uint32(82).bytes(message.storageRoot);
        }
        if (message.latestBlockHash.length !== 0) {
            writer.uint32(90).bytes(message.latestBlockHash);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgFinalizeTokenWithdrawal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2:
                    message.bridgeId = reader.uint64();
                    break;
                case 3:
                    message.outputIndex = reader.uint64();
                    break;
                case 4:
                    message.withdrawalProofs.push(reader.bytes());
                    break;
                case 1:
                    message.sender = reader.string();
                    break;
                case 5:
                    message.receiver = reader.string();
                    break;
                case 6:
                    message.sequence = reader.uint64();
                    break;
                case 7:
                    message.amount = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.version = reader.bytes();
                    break;
                case 9:
                    message.stateRoot = reader.bytes();
                    break;
                case 10:
                    message.storageRoot = reader.bytes();
                    break;
                case 11:
                    message.latestBlockHash = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bridgeId: isSet(object.bridgeId) ? long_1.default.fromValue(object.bridgeId) : long_1.default.UZERO,
            outputIndex: isSet(object.outputIndex) ? long_1.default.fromValue(object.outputIndex) : long_1.default.UZERO,
            withdrawalProofs: Array.isArray(object === null || object === void 0 ? void 0 : object.withdrawalProofs)
                ? object.withdrawalProofs.map((e) => bytesFromBase64(e))
                : [],
            sender: isSet(object.sender) ? String(object.sender) : "",
            receiver: isSet(object.receiver) ? String(object.receiver) : "",
            sequence: isSet(object.sequence) ? long_1.default.fromValue(object.sequence) : long_1.default.UZERO,
            amount: isSet(object.amount) ? coin_1.Coin.fromJSON(object.amount) : undefined,
            version: isSet(object.version) ? bytesFromBase64(object.version) : new Uint8Array(),
            stateRoot: isSet(object.stateRoot) ? bytesFromBase64(object.stateRoot) : new Uint8Array(),
            storageRoot: isSet(object.storageRoot) ? bytesFromBase64(object.storageRoot) : new Uint8Array(),
            latestBlockHash: isSet(object.latestBlockHash)
                ? bytesFromBase64(object.latestBlockHash)
                : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.bridgeId !== undefined && (obj.bridgeId = (message.bridgeId || long_1.default.UZERO).toString());
        message.outputIndex !== undefined && (obj.outputIndex = (message.outputIndex || long_1.default.UZERO).toString());
        if (message.withdrawalProofs) {
            obj.withdrawalProofs = message.withdrawalProofs.map((e) => base64FromBytes(e !== undefined ? e : new Uint8Array()));
        }
        else {
            obj.withdrawalProofs = [];
        }
        message.sender !== undefined && (obj.sender = message.sender);
        message.receiver !== undefined && (obj.receiver = message.receiver);
        message.sequence !== undefined && (obj.sequence = (message.sequence || long_1.default.UZERO).toString());
        message.amount !== undefined && (obj.amount = message.amount ? coin_1.Coin.toJSON(message.amount) : undefined);
        message.version !== undefined &&
            (obj.version = base64FromBytes(message.version !== undefined ? message.version : new Uint8Array()));
        message.stateRoot !== undefined &&
            (obj.stateRoot = base64FromBytes(message.stateRoot !== undefined ? message.stateRoot : new Uint8Array()));
        message.storageRoot !== undefined &&
            (obj.storageRoot = base64FromBytes(message.storageRoot !== undefined ? message.storageRoot : new Uint8Array()));
        message.latestBlockHash !== undefined &&
            (obj.latestBlockHash = base64FromBytes(message.latestBlockHash !== undefined ? message.latestBlockHash : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseMsgFinalizeTokenWithdrawal();
        message.bridgeId =
            object.bridgeId !== undefined && object.bridgeId !== null
                ? long_1.default.fromValue(object.bridgeId)
                : long_1.default.UZERO;
        message.outputIndex =
            object.outputIndex !== undefined && object.outputIndex !== null
                ? long_1.default.fromValue(object.outputIndex)
                : long_1.default.UZERO;
        message.withdrawalProofs = ((_a = object.withdrawalProofs) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.sender = (_b = object.sender) !== null && _b !== void 0 ? _b : "";
        message.receiver = (_c = object.receiver) !== null && _c !== void 0 ? _c : "";
        message.sequence =
            object.sequence !== undefined && object.sequence !== null
                ? long_1.default.fromValue(object.sequence)
                : long_1.default.UZERO;
        message.amount =
            object.amount !== undefined && object.amount !== null ? coin_1.Coin.fromPartial(object.amount) : undefined;
        message.version = (_d = object.version) !== null && _d !== void 0 ? _d : new Uint8Array();
        message.stateRoot = (_e = object.stateRoot) !== null && _e !== void 0 ? _e : new Uint8Array();
        message.storageRoot = (_f = object.storageRoot) !== null && _f !== void 0 ? _f : new Uint8Array();
        message.latestBlockHash = (_g = object.latestBlockHash) !== null && _g !== void 0 ? _g : new Uint8Array();
        return message;
    },
};
function createBaseMsgFinalizeTokenWithdrawalResponse() {
    return {};
}
exports.MsgFinalizeTokenWithdrawalResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgFinalizeTokenWithdrawalResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgFinalizeTokenWithdrawalResponse();
        return message;
    },
};
function createBaseMsgUpdateProposer() {
    return { authority: "", bridgeId: long_1.default.UZERO, newProposer: "" };
}
exports.MsgUpdateProposer = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (!message.bridgeId.isZero()) {
            writer.uint32(16).uint64(message.bridgeId);
        }
        if (message.newProposer !== "") {
            writer.uint32(26).string(message.newProposer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateProposer();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.authority = reader.string();
                    break;
                case 2:
                    message.bridgeId = reader.uint64();
                    break;
                case 3:
                    message.newProposer = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? String(object.authority) : "",
            bridgeId: isSet(object.bridgeId) ? long_1.default.fromValue(object.bridgeId) : long_1.default.UZERO,
            newProposer: isSet(object.newProposer) ? String(object.newProposer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.authority !== undefined && (obj.authority = message.authority);
        message.bridgeId !== undefined && (obj.bridgeId = (message.bridgeId || long_1.default.UZERO).toString());
        message.newProposer !== undefined && (obj.newProposer = message.newProposer);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgUpdateProposer();
        message.authority = (_a = object.authority) !== null && _a !== void 0 ? _a : "";
        message.bridgeId =
            object.bridgeId !== undefined && object.bridgeId !== null
                ? long_1.default.fromValue(object.bridgeId)
                : long_1.default.UZERO;
        message.newProposer = (_b = object.newProposer) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseMsgUpdateProposerResponse() {
    return { outputIndex: long_1.default.UZERO, l2BlockNumber: long_1.default.UZERO };
}
exports.MsgUpdateProposerResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.outputIndex.isZero()) {
            writer.uint32(8).uint64(message.outputIndex);
        }
        if (!message.l2BlockNumber.isZero()) {
            writer.uint32(16).uint64(message.l2BlockNumber);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateProposerResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.outputIndex = reader.uint64();
                    break;
                case 2:
                    message.l2BlockNumber = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            outputIndex: isSet(object.outputIndex) ? long_1.default.fromValue(object.outputIndex) : long_1.default.UZERO,
            l2BlockNumber: isSet(object.l2BlockNumber) ? long_1.default.fromValue(object.l2BlockNumber) : long_1.default.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.outputIndex !== undefined && (obj.outputIndex = (message.outputIndex || long_1.default.UZERO).toString());
        message.l2BlockNumber !== undefined &&
            (obj.l2BlockNumber = (message.l2BlockNumber || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgUpdateProposerResponse();
        message.outputIndex =
            object.outputIndex !== undefined && object.outputIndex !== null
                ? long_1.default.fromValue(object.outputIndex)
                : long_1.default.UZERO;
        message.l2BlockNumber =
            object.l2BlockNumber !== undefined && object.l2BlockNumber !== null
                ? long_1.default.fromValue(object.l2BlockNumber)
                : long_1.default.UZERO;
        return message;
    },
};
function createBaseMsgUpdateChallenger() {
    return { authority: "", bridgeId: long_1.default.UZERO, newChallenger: "" };
}
exports.MsgUpdateChallenger = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (!message.bridgeId.isZero()) {
            writer.uint32(16).uint64(message.bridgeId);
        }
        if (message.newChallenger !== "") {
            writer.uint32(26).string(message.newChallenger);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateChallenger();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.authority = reader.string();
                    break;
                case 2:
                    message.bridgeId = reader.uint64();
                    break;
                case 3:
                    message.newChallenger = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? String(object.authority) : "",
            bridgeId: isSet(object.bridgeId) ? long_1.default.fromValue(object.bridgeId) : long_1.default.UZERO,
            newChallenger: isSet(object.newChallenger) ? String(object.newChallenger) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.authority !== undefined && (obj.authority = message.authority);
        message.bridgeId !== undefined && (obj.bridgeId = (message.bridgeId || long_1.default.UZERO).toString());
        message.newChallenger !== undefined && (obj.newChallenger = message.newChallenger);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgUpdateChallenger();
        message.authority = (_a = object.authority) !== null && _a !== void 0 ? _a : "";
        message.bridgeId =
            object.bridgeId !== undefined && object.bridgeId !== null
                ? long_1.default.fromValue(object.bridgeId)
                : long_1.default.UZERO;
        message.newChallenger = (_b = object.newChallenger) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseMsgUpdateChallengerResponse() {
    return { outputIndex: long_1.default.UZERO, l2BlockNumber: long_1.default.UZERO };
}
exports.MsgUpdateChallengerResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.outputIndex.isZero()) {
            writer.uint32(8).uint64(message.outputIndex);
        }
        if (!message.l2BlockNumber.isZero()) {
            writer.uint32(16).uint64(message.l2BlockNumber);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateChallengerResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.outputIndex = reader.uint64();
                    break;
                case 2:
                    message.l2BlockNumber = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            outputIndex: isSet(object.outputIndex) ? long_1.default.fromValue(object.outputIndex) : long_1.default.UZERO,
            l2BlockNumber: isSet(object.l2BlockNumber) ? long_1.default.fromValue(object.l2BlockNumber) : long_1.default.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.outputIndex !== undefined && (obj.outputIndex = (message.outputIndex || long_1.default.UZERO).toString());
        message.l2BlockNumber !== undefined &&
            (obj.l2BlockNumber = (message.l2BlockNumber || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgUpdateChallengerResponse();
        message.outputIndex =
            object.outputIndex !== undefined && object.outputIndex !== null
                ? long_1.default.fromValue(object.outputIndex)
                : long_1.default.UZERO;
        message.l2BlockNumber =
            object.l2BlockNumber !== undefined && object.l2BlockNumber !== null
                ? long_1.default.fromValue(object.l2BlockNumber)
                : long_1.default.UZERO;
        return message;
    },
};
function createBaseMsgUpdateBatchInfo() {
    return { authority: "", bridgeId: long_1.default.UZERO, newBatchInfo: undefined };
}
exports.MsgUpdateBatchInfo = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (!message.bridgeId.isZero()) {
            writer.uint32(16).uint64(message.bridgeId);
        }
        if (message.newBatchInfo !== undefined) {
            types_1.BatchInfo.encode(message.newBatchInfo, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateBatchInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.authority = reader.string();
                    break;
                case 2:
                    message.bridgeId = reader.uint64();
                    break;
                case 3:
                    message.newBatchInfo = types_1.BatchInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? String(object.authority) : "",
            bridgeId: isSet(object.bridgeId) ? long_1.default.fromValue(object.bridgeId) : long_1.default.UZERO,
            newBatchInfo: isSet(object.newBatchInfo) ? types_1.BatchInfo.fromJSON(object.newBatchInfo) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.authority !== undefined && (obj.authority = message.authority);
        message.bridgeId !== undefined && (obj.bridgeId = (message.bridgeId || long_1.default.UZERO).toString());
        message.newBatchInfo !== undefined &&
            (obj.newBatchInfo = message.newBatchInfo ? types_1.BatchInfo.toJSON(message.newBatchInfo) : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgUpdateBatchInfo();
        message.authority = (_a = object.authority) !== null && _a !== void 0 ? _a : "";
        message.bridgeId =
            object.bridgeId !== undefined && object.bridgeId !== null
                ? long_1.default.fromValue(object.bridgeId)
                : long_1.default.UZERO;
        message.newBatchInfo =
            object.newBatchInfo !== undefined && object.newBatchInfo !== null
                ? types_1.BatchInfo.fromPartial(object.newBatchInfo)
                : undefined;
        return message;
    },
};
function createBaseMsgUpdateBatchInfoResponse() {
    return { outputIndex: long_1.default.UZERO, l2BlockNumber: long_1.default.UZERO };
}
exports.MsgUpdateBatchInfoResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.outputIndex.isZero()) {
            writer.uint32(8).uint64(message.outputIndex);
        }
        if (!message.l2BlockNumber.isZero()) {
            writer.uint32(16).uint64(message.l2BlockNumber);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateBatchInfoResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.outputIndex = reader.uint64();
                    break;
                case 2:
                    message.l2BlockNumber = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            outputIndex: isSet(object.outputIndex) ? long_1.default.fromValue(object.outputIndex) : long_1.default.UZERO,
            l2BlockNumber: isSet(object.l2BlockNumber) ? long_1.default.fromValue(object.l2BlockNumber) : long_1.default.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.outputIndex !== undefined && (obj.outputIndex = (message.outputIndex || long_1.default.UZERO).toString());
        message.l2BlockNumber !== undefined &&
            (obj.l2BlockNumber = (message.l2BlockNumber || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgUpdateBatchInfoResponse();
        message.outputIndex =
            object.outputIndex !== undefined && object.outputIndex !== null
                ? long_1.default.fromValue(object.outputIndex)
                : long_1.default.UZERO;
        message.l2BlockNumber =
            object.l2BlockNumber !== undefined && object.l2BlockNumber !== null
                ? long_1.default.fromValue(object.l2BlockNumber)
                : long_1.default.UZERO;
        return message;
    },
};
function createBaseMsgUpdateMetadata() {
    return { authority: "", bridgeId: long_1.default.UZERO, metadata: new Uint8Array() };
}
exports.MsgUpdateMetadata = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (!message.bridgeId.isZero()) {
            writer.uint32(16).uint64(message.bridgeId);
        }
        if (message.metadata.length !== 0) {
            writer.uint32(26).bytes(message.metadata);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.authority = reader.string();
                    break;
                case 2:
                    message.bridgeId = reader.uint64();
                    break;
                case 3:
                    message.metadata = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? String(object.authority) : "",
            bridgeId: isSet(object.bridgeId) ? long_1.default.fromValue(object.bridgeId) : long_1.default.UZERO,
            metadata: isSet(object.metadata) ? bytesFromBase64(object.metadata) : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.authority !== undefined && (obj.authority = message.authority);
        message.bridgeId !== undefined && (obj.bridgeId = (message.bridgeId || long_1.default.UZERO).toString());
        message.metadata !== undefined &&
            (obj.metadata = base64FromBytes(message.metadata !== undefined ? message.metadata : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgUpdateMetadata();
        message.authority = (_a = object.authority) !== null && _a !== void 0 ? _a : "";
        message.bridgeId =
            object.bridgeId !== undefined && object.bridgeId !== null
                ? long_1.default.fromValue(object.bridgeId)
                : long_1.default.UZERO;
        message.metadata = (_b = object.metadata) !== null && _b !== void 0 ? _b : new Uint8Array();
        return message;
    },
};
function createBaseMsgUpdateMetadataResponse() {
    return { outputIndex: long_1.default.UZERO, l2BlockNumber: long_1.default.UZERO };
}
exports.MsgUpdateMetadataResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.outputIndex.isZero()) {
            writer.uint32(8).uint64(message.outputIndex);
        }
        if (!message.l2BlockNumber.isZero()) {
            writer.uint32(16).uint64(message.l2BlockNumber);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateMetadataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.outputIndex = reader.uint64();
                    break;
                case 2:
                    message.l2BlockNumber = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            outputIndex: isSet(object.outputIndex) ? long_1.default.fromValue(object.outputIndex) : long_1.default.UZERO,
            l2BlockNumber: isSet(object.l2BlockNumber) ? long_1.default.fromValue(object.l2BlockNumber) : long_1.default.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.outputIndex !== undefined && (obj.outputIndex = (message.outputIndex || long_1.default.UZERO).toString());
        message.l2BlockNumber !== undefined &&
            (obj.l2BlockNumber = (message.l2BlockNumber || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgUpdateMetadataResponse();
        message.outputIndex =
            object.outputIndex !== undefined && object.outputIndex !== null
                ? long_1.default.fromValue(object.outputIndex)
                : long_1.default.UZERO;
        message.l2BlockNumber =
            object.l2BlockNumber !== undefined && object.l2BlockNumber !== null
                ? long_1.default.fromValue(object.l2BlockNumber)
                : long_1.default.UZERO;
        return message;
    },
};
function createBaseMsgUpdateParams() {
    return { authority: "", params: undefined };
}
exports.MsgUpdateParams = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.params !== undefined) {
            types_1.Params.encode(message.params, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.authority = reader.string();
                    break;
                case 2:
                    message.params = types_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? String(object.authority) : "",
            params: isSet(object.params) ? types_1.Params.fromJSON(object.params) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.authority !== undefined && (obj.authority = message.authority);
        message.params !== undefined && (obj.params = message.params ? types_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgUpdateParams();
        message.authority = (_a = object.authority) !== null && _a !== void 0 ? _a : "";
        message.params =
            object.params !== undefined && object.params !== null ? types_1.Params.fromPartial(object.params) : undefined;
        return message;
    },
};
function createBaseMsgUpdateParamsResponse() {
    return {};
}
exports.MsgUpdateParamsResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgUpdateParamsResponse();
        return message;
    },
};
class MsgClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.RecordBatch = this.RecordBatch.bind(this);
        this.CreateBridge = this.CreateBridge.bind(this);
        this.ProposeOutput = this.ProposeOutput.bind(this);
        this.DeleteOutput = this.DeleteOutput.bind(this);
        this.InitiateTokenDeposit = this.InitiateTokenDeposit.bind(this);
        this.FinalizeTokenWithdrawal = this.FinalizeTokenWithdrawal.bind(this);
        this.UpdateProposer = this.UpdateProposer.bind(this);
        this.UpdateChallenger = this.UpdateChallenger.bind(this);
        this.UpdateBatchInfo = this.UpdateBatchInfo.bind(this);
        this.UpdateMetadata = this.UpdateMetadata.bind(this);
        this.UpdateParams = this.UpdateParams.bind(this);
    }
    RecordBatch(request, metadata) {
        return this.rpc.unary(exports.MsgRecordBatchDesc, exports.MsgRecordBatch.fromPartial(request), metadata);
    }
    CreateBridge(request, metadata) {
        return this.rpc.unary(exports.MsgCreateBridgeDesc, exports.MsgCreateBridge.fromPartial(request), metadata);
    }
    ProposeOutput(request, metadata) {
        return this.rpc.unary(exports.MsgProposeOutputDesc, exports.MsgProposeOutput.fromPartial(request), metadata);
    }
    DeleteOutput(request, metadata) {
        return this.rpc.unary(exports.MsgDeleteOutputDesc, exports.MsgDeleteOutput.fromPartial(request), metadata);
    }
    InitiateTokenDeposit(request, metadata) {
        return this.rpc.unary(exports.MsgInitiateTokenDepositDesc, exports.MsgInitiateTokenDeposit.fromPartial(request), metadata);
    }
    FinalizeTokenWithdrawal(request, metadata) {
        return this.rpc.unary(exports.MsgFinalizeTokenWithdrawalDesc, exports.MsgFinalizeTokenWithdrawal.fromPartial(request), metadata);
    }
    UpdateProposer(request, metadata) {
        return this.rpc.unary(exports.MsgUpdateProposerDesc, exports.MsgUpdateProposer.fromPartial(request), metadata);
    }
    UpdateChallenger(request, metadata) {
        return this.rpc.unary(exports.MsgUpdateChallengerDesc, exports.MsgUpdateChallenger.fromPartial(request), metadata);
    }
    UpdateBatchInfo(request, metadata) {
        return this.rpc.unary(exports.MsgUpdateBatchInfoDesc, exports.MsgUpdateBatchInfo.fromPartial(request), metadata);
    }
    UpdateMetadata(request, metadata) {
        return this.rpc.unary(exports.MsgUpdateMetadataDesc, exports.MsgUpdateMetadata.fromPartial(request), metadata);
    }
    UpdateParams(request, metadata) {
        return this.rpc.unary(exports.MsgUpdateParamsDesc, exports.MsgUpdateParams.fromPartial(request), metadata);
    }
}
exports.MsgClientImpl = MsgClientImpl;
exports.MsgDesc = { serviceName: "opinit.ophost.v1.Msg" };
exports.MsgRecordBatchDesc = {
    methodName: "RecordBatch",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgRecordBatch.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.MsgRecordBatchResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.MsgCreateBridgeDesc = {
    methodName: "CreateBridge",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgCreateBridge.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.MsgCreateBridgeResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.MsgProposeOutputDesc = {
    methodName: "ProposeOutput",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgProposeOutput.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.MsgProposeOutputResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.MsgDeleteOutputDesc = {
    methodName: "DeleteOutput",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgDeleteOutput.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.MsgDeleteOutputResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.MsgInitiateTokenDepositDesc = {
    methodName: "InitiateTokenDeposit",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgInitiateTokenDeposit.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.MsgInitiateTokenDepositResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.MsgFinalizeTokenWithdrawalDesc = {
    methodName: "FinalizeTokenWithdrawal",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgFinalizeTokenWithdrawal.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.MsgFinalizeTokenWithdrawalResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.MsgUpdateProposerDesc = {
    methodName: "UpdateProposer",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgUpdateProposer.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.MsgUpdateProposerResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.MsgUpdateChallengerDesc = {
    methodName: "UpdateChallenger",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgUpdateChallenger.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.MsgUpdateChallengerResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.MsgUpdateBatchInfoDesc = {
    methodName: "UpdateBatchInfo",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgUpdateBatchInfo.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.MsgUpdateBatchInfoResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.MsgUpdateMetadataDesc = {
    methodName: "UpdateMetadata",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgUpdateMetadata.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.MsgUpdateMetadataResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.MsgUpdateParamsDesc = {
    methodName: "UpdateParams",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgUpdateParams.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.MsgUpdateParamsResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        var _a;
        const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_1.BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap))
            : metadata || this.options.metadata;
        return new Promise((resolve, reject) => {
            grpc_web_1.grpc.unary(methodDesc, {
                request,
                host: this.host,
                metadata: maybeCombinedMetadata,
                transport: this.options.transport,
                debug: this.options.debug,
                onEnd: function (response) {
                    if (response.status === grpc_web_1.grpc.Code.OK) {
                        resolve(response.message);
                    }
                    else {
                        const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
                        reject(err);
                    }
                },
            });
        });
    }
}
exports.GrpcWebImpl = GrpcWebImpl;
var globalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
class GrpcWebError extends Error {
    constructor(message, code, metadata) {
        super(message);
        this.code = code;
        this.metadata = metadata;
    }
}
exports.GrpcWebError = GrpcWebError;
//# sourceMappingURL=tx.js.map